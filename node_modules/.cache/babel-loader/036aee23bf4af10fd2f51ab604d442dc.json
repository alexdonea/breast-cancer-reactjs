{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar kernelRegistry = new Map();\n/**\n * Returns the kernel function (code) associated with the provided names.\n *\n * @param kernelName The official name of the kernel.\n * @param backendName The official name of the backend.\n */\n\nfunction getKernel(kernelName, backendName) {\n  var key = makeKey(kernelName, backendName);\n  return kernelRegistry.get(key);\n}\n\nexports.getKernel = getKernel;\n\nfunction getKernelsForBackend(backendName) {\n  var it = kernelRegistry.entries();\n  var result = [];\n\n  while (true) {\n    var _a = it.next(),\n        done = _a.done,\n        value = _a.value;\n\n    if (done) {\n      break;\n    }\n\n    var key = value[0],\n        config = value[1];\n    var backend = key.split('_')[0];\n\n    if (backend === backendName) {\n      result.push(config);\n    }\n  }\n\n  return result;\n}\n\nexports.getKernelsForBackend = getKernelsForBackend;\n/**\n * Registers the function (forward pass) for the kernel in a global registry.\n *\n * @param config A config object with the following properties:\n * - `kernelName` The official name of the kernel.\n * - `backendName` The official name of the backend.\n * - `kernelFunc` The function to run during the forward pass of the kernel.\n * - `setupFunc` Optional. Gets called once, after the backend initializes.\n * - `disposeFunc` Optional. Gets called once, right before the backend is\n * disposed.\n */\n\nfunction registerKernel(config) {\n  var kernelName = config.kernelName,\n      backendName = config.backendName;\n  var key = makeKey(kernelName, backendName);\n\n  if (kernelRegistry.has(key)) {\n    throw new Error(\"The kernel '\" + kernelName + \"' for backend \" + (\"'\" + backendName + \"' is already registered\"));\n  }\n\n  kernelRegistry.set(key, config);\n}\n\nexports.registerKernel = registerKernel;\n/**\n * Removes the kernel function from the registry.\n *\n * @param kernelName The official name of the kernel.\n * @param backendName The official name of the backend.\n *\n */\n\nfunction unregisterKernel(kernelName, backendName) {\n  var key = makeKey(kernelName, backendName);\n\n  if (!kernelRegistry.has(key)) {\n    throw new Error(\"The kernel '\" + kernelName + \"' for backend \" + (\"'\" + backendName + \"' is not registered\"));\n  }\n\n  kernelRegistry.delete(key);\n}\n\nexports.unregisterKernel = unregisterKernel;\n\nfunction makeKey(kernelName, backendName) {\n  return backendName + \"_\" + kernelName;\n}","map":null,"metadata":{},"sourceType":"script"}