{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nvar engine_1 = require(\"../engine\");\n\nvar tensor_util_env_1 = require(\"../tensor_util_env\");\n\nvar util = require(\"../util\");\n\nvar operation_1 = require(\"./operation\");\n/**\n * Converts two real numbers to a complex number.\n *\n * Given a tensor `real` representing the real part of a complex number, and a\n * tensor `imag` representing the imaginary part of a complex number, this\n * operation returns complex numbers elementwise of the form [r0, i0, r1, i1],\n * where r represents the real part and i represents the imag part.\n *\n * The input tensors real and imag must have the same shape.\n *\n * ```js\n * const real = tf.tensor1d([2.25, 3.25]);\n * const imag = tf.tensor1d([4.75, 5.75]);\n * const complex = tf.complex(real, imag);\n *\n * complex.print();\n * ```\n */\n\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\n\n\nfunction complex_(real, imag) {\n  var $real = tensor_util_env_1.convertToTensor(real, 'real', 'complex');\n  var $imag = tensor_util_env_1.convertToTensor(imag, 'imag', 'complex');\n  util.assertShapesMatch($real.shape, $imag.shape, \"real and imag shapes, \" + $real.shape + \" and \" + $imag.shape + \", \" + \"must match in call to tf.complex().\");\n  return engine_1.ENGINE.runKernelFunc(function (backend) {\n    return backend.complex($real, $imag);\n  }, {\n    $real: $real,\n    $imag: $imag\n  });\n}\n/**\n * Returns the real part of a complex (or real) tensor.\n *\n * Given a tensor input, this operation returns a tensor of type float that is\n * the real part of each element in input considered as a complex number.\n *\n * If the input is real, it simply makes a clone.\n *\n * ```js\n * const x = tf.complex([-2.25, 3.25], [4.75, 5.75]);\n * tf.real(x).print();\n * ```\n */\n\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\n\n\nfunction real_(input) {\n  var $input = tensor_util_env_1.convertToTensor(input, 'input', 'real');\n  return engine_1.ENGINE.runKernelFunc(function (backend) {\n    return backend.real($input);\n  }, {\n    $input: $input\n  });\n}\n/**\n * Returns the imaginary part of a complex (or real) tensor.\n *\n * Given a tensor input, this operation returns a tensor of type float that is\n * the imaginary part of each element in input considered as a complex number.\n * If input is real, a tensor of all zeros is returned.\n *\n * ```js\n * const x = tf.complex([-2.25, 3.25], [4.75, 5.75]);\n * tf.imag(x).print();\n * ```\n */\n\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\n\n\nfunction imag_(input) {\n  var $input = tensor_util_env_1.convertToTensor(input, 'input', 'imag');\n  return engine_1.ENGINE.runKernelFunc(function (backend) {\n    return backend.imag($input);\n  }, {\n    $input: $input\n  });\n}\n\nexports.complex = operation_1.op({\n  complex_: complex_\n});\nexports.real = operation_1.op({\n  real_: real_\n});\nexports.imag = operation_1.op({\n  imag_: imag_\n});","map":null,"metadata":{},"sourceType":"script"}