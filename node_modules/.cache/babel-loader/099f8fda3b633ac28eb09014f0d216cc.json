{"ast":null,"code":"var _jsxFileName = \"/Users/acd/Documents/Projects/breast-cancer-ml/src/App.js\";\nimport React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Console from \"./Components/Console\";\nimport Button from \"./Components/Button\";\nimport RadioButton from \"./Components/RadioButton\";\nconst e = React.createElement;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.clearConsole = this.clearConsole.bind(this);\n    this.addConsoleValue = this.addConsoleValue.bind(this);\n    this.trainingModeAction = this.trainingModeAction.bind(this);\n    this.state = {\n      console: [\"Nothing on console...\"],\n      epochs: 30,\n      mode: \"default\",\n      trainedModel: []\n    };\n  }\n\n  componentDidMount() {}\n\n  clearConsole() {\n    this.setState({\n      console: []\n    });\n  }\n\n  trainingModeAction(mode) {\n    console.log(\"mode\", mode);\n    this.setState({\n      mode: mode\n    });\n  }\n\n  addConsoleValue() {\n    const date = new Date();\n    this.setState({\n      console: [...this.state.console, \"[\" + date.toLocaleTimeString() + \"]:Training...\"]\n    });\n  }\n\n  renderMode(mode) {\n    if (mode === 'default') {\n      return e('div', {}, React.createElement(Button, {\n        label: \"Train\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }), React.createElement(Button, {\n        label: \"Predict default test dataset\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }));\n    }\n  }\n\n  render() {\n    return e(\"div\", {\n      className: \"container\"\n    }, e(\"div\", {\n      className: \"row\"\n    }, e(\"div\", {\n      className: \"col-md-6\"\n    }, e(\"p\", null, \"Console\"), React.createElement(Console, {\n      console: this.state.console,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(Button, {\n      label: \"Add\",\n      onClick: this.addConsoleValue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }), React.createElement(Button, {\n      label: \"Clear\",\n      onClick: this.clearConsole,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    })), e(\"div\", {\n      className: \"col-md-6\"\n    }, e(\"p\", {}, \"Train\"), e(\"p\", null, \"Default Breast Cancer Dataset\"), React.createElement(RadioButton, {\n      label: \"Default dataset train\",\n      value: \"default\",\n      checked: true,\n      onModeSelection: this.trainingModeAction,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), this.renderMode(this.state.mode), React.createElement(RadioButton, {\n      label: \"Custom dataset train\",\n      value: \"custom\",\n      onModeSelection: this.trainingModeAction,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/acd/Documents/Projects/breast-cancer-ml/src/App.js"],"names":["React","Console","Button","RadioButton","e","createElement","App","Component","constructor","props","clearConsole","bind","addConsoleValue","trainingModeAction","state","console","epochs","mode","trainedModel","componentDidMount","setState","log","date","Date","toLocaleTimeString","renderMode","render","className"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Console from \"./Components/Console\";\nimport Button from \"./Components/Button\";\nimport RadioButton from \"./Components/RadioButton\";\n\nconst e = React.createElement;\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.clearConsole = this.clearConsole.bind(this);\n    this.addConsoleValue = this.addConsoleValue.bind(this);\n    this.trainingModeAction = this.trainingModeAction.bind(this);\n\n    this.state = {\n      console: [\"Nothing on console...\"],\n      epochs: 30,\n      mode: \"default\",\n      trainedModel: []\n    };\n  }\n\n  componentDidMount() {}\n\n  clearConsole() {\n    this.setState({\n      console: []\n    });\n  }\n\n  trainingModeAction(mode) {\n    console.log(\"mode\", mode);\n    this.setState({\n      mode: mode\n    });\n  }\n  addConsoleValue() {\n    const date = new Date();\n    this.setState({\n      console: [\n        ...this.state.console,\n        \"[\" + date.toLocaleTimeString() + \"]:Training...\"\n      ]\n    });\n  }\n\n  renderMode(mode){\n    if(mode === 'default'){\n        return e('div',{},\n            <Button label=\"Train\"/>,\n            <Button label=\"Predict default test dataset\"/>\n        )\n    }\n}\n\n  render() {\n    return e(\n      \"div\",\n      { className: \"container\" },\n      e(\n        \"div\",\n        { className: \"row\" },\n        e(\n          \"div\",\n          { className: \"col-md-6\" },\n          e(\"p\", null, \"Console\"),\n          <Console console={this.state.console} />,\n          <Button label=\"Add\" onClick={this.addConsoleValue} />,\n          <Button label=\"Clear\" onClick={this.clearConsole} />\n        ),\n        e(\n          \"div\",\n          { className: \"col-md-6\" },\n          e(\"p\", {}, \"Train\"),\n          e(\"p\", null, \"Default Breast Cancer Dataset\"),\n          <RadioButton\n            label=\"Default dataset train\"\n            value=\"default\"\n            checked={true}\n            onModeSelection={this.trainingModeAction}\n          />,\n          this.renderMode(this.state.mode),\n          <RadioButton\n            label=\"Custom dataset train\"\n            value=\"custom\"\n            onModeSelection={this.trainingModeAction}\n          />\n        )\n      )\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}