{"ast":null,"code":"var _jsxFileName = \"/Users/acd/Documents/Projects/breast-cancer-ml/src/App.js\";\nimport React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport Console from \"./Components/Console\";\nimport Button from \"./Components/Button\";\nimport RadioButton from \"./Components/RadioButton\";\nimport Input from \"./Components/Input\";\nimport { dataset, xTest, yTest } from \"./datasetJson\";\nimport { filterData } from \"./Dataset\";\nconst e = React.createElement;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.predictTrainedModel = async () => {// const xTest = tf.tensor2d(data.xTest, [data.xTest.length, data.xTest[0].length]);\n      // const yTest = tf.tensor2d(data.yTest, [data.yTest.length, data.yTest[0].length]);\n      // const modelStorage = await tf.loadLayersModel(\n      //   \"localstorage://breast-cancer-model\"\n      // );\n      // tf.tidy(() => {\n      //   const output = modelStorage.predict(xTest);\n      //   const predictions = output.dataSync();\n      //   let correct = 0;\n      //   let wrong = 0;\n      //   let total = 0;\n      //   const yTestData = yTest.dataSync();\n      //   predictions.forEach((value, index) => {\n      //     total++;\n      //     if (yTestData[index] === 1) {\n      //       const fromTest = value >= 0.5 ? \"Correct\" : \"Wrong\";\n      //       if (fromTest === \"Correct\") {\n      //         correct++;\n      //       } else {\n      //         wrong++;\n      //       }\n      //       this.addConsoleValue(\n      //         `[${index}] = Malignant, Dataset Test = ${fromTest}`\n      //       );\n      //     } else {\n      //       const fromTest = value <= 0.5 ? \"Correct\" : \"Wrong\";\n      //       if (fromTest === \"Correct\") {\n      //         correct++;\n      //       } else {\n      //         wrong++;\n      //       }\n      //       this.addConsoleValue(\n      //         `[${index}] = Benign, Dataset Test= ${fromTest} `\n      //       );\n      //     }\n      //   });\n      //   this.addConsoleValue(\n      //     `Correct=${correct}, Wrong = ${wrong} Total=${total}`\n      //   );\n      // });\n    };\n\n    this.test = async () => {\n      this.addConsoleValue(\"Training...\");\n      console.log(dataset);\n      const data = filterData(dataset);\n      console.log(data.xTrain);\n      const xTensorTrain = tf.tensor2d(data.xTrain, [data.xTrain.length, data.xTrain[0].length]);\n      const yTensorTrain = tf.tensor2d(data.yTrain, [data.yTrain.length, data.yTrain[0].length]); //Create model as sequential\n\n      const model = tf.sequential(); // const learningRate = this.state.learningRate;\n      // const optimizer = tf.train.sgd(learningRate);\n\n      const inputLayer = tf.layers.dense({\n        units: 16,\n        inputDim: 30,\n        activation: \"relu\"\n      });\n      const hiddenLayer = tf.layers.dense({\n        units: 8,\n        activation: \"relu\"\n      });\n      const hiddenLayer2 = tf.layers.dense({\n        units: 8,\n        activation: \"relu\"\n      });\n      const outputLayer = tf.layers.dense({\n        units: 1,\n        activation: \"sigmoid\"\n      });\n      model.add(inputLayer);\n      model.add(hiddenLayer);\n      model.add(hiddenLayer2); // model.add(hiddenLayer3);\n\n      model.add(outputLayer);\n      model.compile({\n        optimizer: \"rmsprop\",\n        //learning rate\n        loss: \"meanSquaredError\",\n        metrics: [\"accuracy\"]\n      }); // const xTest = tf.tensor2d(dataset.xTest, [dataset.xTest.length, 30]);\n      // const yTest = tf.tensor2d(dataset.yTest, [dataset.yTest.length, 1]);\n\n      const batchSize = this.state.batchIterations || 0;\n      const trainEpochs = this.state.epochs || 0; // const totalNumBatches = Math.ceil(xTensorTrain.shape[0] * (1 - validationSplit) / batchSize) *trainEpochs;\n\n      let valAcc;\n      await model.fit(xTensorTrain, yTensorTrain, {\n        batchSize: batchSize,\n        epochs: trainEpochs,\n        // validationData: [xTest, yTest],\n        callbacks: {\n          onEpochEnd: async (epoch, logs) => {\n            valAcc = logs.acc;\n            this.addConsoleValue(\"Epoch =\".concat(epoch, \" Loss=\").concat(logs.loss, \"  Acc=\").concat(logs.acc));\n          }\n        }\n      }).then(async () => {\n        const testResult = model.evaluate(xTensorTrain, yTensorTrain);\n        const testAccPercent = testResult[0].dataSync()[0] * 100;\n        const finalValAccPercent = valAcc * 100;\n        this.addConsoleValue(\"Final validation accuracy: \".concat(finalValAccPercent.toFixed(1), \"%; \") + \"Final test accuracy: \".concat(testAccPercent.toFixed(1), \"%\"));\n        await model.save(\"localstorage://breast-cancer-model\");\n        this.addConsoleValue(\"Model savet to localStorage\");\n      });\n    };\n\n    this.clearConsole = this.clearConsole.bind(this);\n    this.addConsoleValue = this.addConsoleValue.bind(this);\n    this.trainingModeAction = this.trainingModeAction.bind(this);\n    this.updateEpochs = this.updateEpochs.bind(this);\n    this.updateLearningRate = this.updateLearningRate.bind(this);\n    this.updatebatchIterations = this.updatebatchIterations.bind(this);\n    this.predictTrainedModel = this.predictTrainedModel.bind(this);\n    this.train = this.train.bind(this);\n    this.state = {\n      console: [],\n      epochs: 50,\n      learningRate: 1.5,\n      batchIterations: 1,\n      mode: \"default\"\n    };\n  }\n\n  clearConsole() {\n    this.setState({\n      console: []\n    });\n  }\n\n  train() {\n    const date = new Date();\n    this.setState({\n      console: [...this.state.console, \"[\" + date.toLocaleTimeString() + \"]:Epochs \" + this.state.epochs + \"Iter \" + this.state.batchIterations]\n    });\n  }\n\n  updatebatchIterations(iteration) {\n    this.setState({\n      batchIterations: iteration\n    });\n  }\n\n  updateLearningRate(learningRate) {\n    this.setState({\n      learningRate: learningRate\n    });\n  }\n\n  updateEpochs(epoch) {\n    this.setState({\n      epochs: epoch\n    });\n  }\n\n  trainingModeAction(mode) {\n    this.setState({\n      mode: mode\n    });\n  }\n\n  addConsoleValue(value) {\n    const date = new Date();\n    this.setState({\n      console: [...this.state.console, \"[\" + date.toLocaleTimeString() + \"] \" + value]\n    });\n  }\n\n  renderMode(mode) {\n    switch (mode) {\n      default:\n        return e(\"div\", {}, React.createElement(Button, {\n          label: \"Train with default dataset\",\n          onClick: this.test,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }), React.createElement(Button, {\n          label: \"Predict with test dataset\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        }), React.createElement(Button, {\n          label: \"Predict with pre trained model\",\n          onClick: this.predictTrainedModel,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }), React.createElement(Button, {\n          label: \"Download model\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }));\n\n      case \"custom\":\n        return e(\"p\", {}, \"custom goest here...\");\n    }\n  }\n\n  render() {\n    return e(\"div\", {\n      className: \"container\",\n      style: {\n        position: \"relative\",\n        top: 100\n      }\n    }, e(\"div\", {\n      className: \"row\"\n    }, e(\"div\", {\n      className: \"col-md-6\"\n    }, e(\"p\", null, \"Console\"), React.createElement(Console, {\n      console: this.state.console,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }), React.createElement(Button, {\n      label: \"Clear\",\n      onClick: this.clearConsole,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    })), e(\"div\", {\n      className: \"col-md-6\"\n    }, e(\"p\", {}, \"Train\"), e(\"p\", null, \"Default Breast Cancer Dataset\"), e(\"div\", {\n      className: \"row\"\n    }, e(\"div\", {\n      className: \"col-md-4\"\n    }, e(\"p\", {}, \"Epochs\"), React.createElement(Input, {\n      placeholder: \"Enter here number of epochs\",\n      value: this.state.epochs,\n      updateValue: this.updateEpochs,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    })), e(\"div\", {\n      className: \"col-md-4\"\n    }, e(\"p\", {}, \"Batch Iterations\"), React.createElement(Input, {\n      placeholder: \"Enter here number of batchIterations\",\n      value: this.state.batchIterations,\n      updateValue: this.updatebatchIterations,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    })), e(\"div\", {\n      className: \"col-md-4\"\n    }, e(\"p\", {}, \"Learning rate\"), React.createElement(Input, {\n      placeholder: \"Learning rate\",\n      value: this.state.learningRate,\n      updateValue: this.updateLearningRate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    })), e(\"div\", {\n      className: \"col-md-6\"\n    }, React.createElement(RadioButton, {\n      label: \"Default dataset train\",\n      value: \"default\",\n      onModeSelection: this.trainingModeAction,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    })), e(\"div\", {\n      className: \"col-md-6\"\n    }, React.createElement(RadioButton, {\n      label: \"Custom dataset train\",\n      value: \"custom\",\n      onModeSelection: this.trainingModeAction,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }))), this.renderMode(this.state.mode))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/acd/Documents/Projects/breast-cancer-ml/src/App.js"],"names":["React","tf","Console","Button","RadioButton","Input","dataset","xTest","yTest","filterData","e","createElement","App","Component","constructor","props","predictTrainedModel","test","addConsoleValue","console","log","data","xTrain","xTensorTrain","tensor2d","length","yTensorTrain","yTrain","model","sequential","inputLayer","layers","dense","units","inputDim","activation","hiddenLayer","hiddenLayer2","outputLayer","add","compile","optimizer","loss","metrics","batchSize","state","batchIterations","trainEpochs","epochs","valAcc","fit","callbacks","onEpochEnd","epoch","logs","acc","then","testResult","evaluate","testAccPercent","dataSync","finalValAccPercent","toFixed","save","clearConsole","bind","trainingModeAction","updateEpochs","updateLearningRate","updatebatchIterations","train","learningRate","mode","setState","date","Date","toLocaleTimeString","iteration","value","renderMode","render","className","style","position","top"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport Console from \"./Components/Console\";\nimport Button from \"./Components/Button\";\nimport RadioButton from \"./Components/RadioButton\";\nimport Input from \"./Components/Input\";\nimport {dataset,xTest,yTest} from \"./datasetJson\";\nimport {filterData} from \"./Dataset\";\n\nconst e = React.createElement;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.clearConsole = this.clearConsole.bind(this);\n    this.addConsoleValue = this.addConsoleValue.bind(this);\n    this.trainingModeAction = this.trainingModeAction.bind(this);\n    this.updateEpochs = this.updateEpochs.bind(this);\n    this.updateLearningRate = this.updateLearningRate.bind(this);\n    this.updatebatchIterations = this.updatebatchIterations.bind(this);\n    this.predictTrainedModel = this.predictTrainedModel.bind(this);\n    this.train = this.train.bind(this);\n    this.state = {\n      console: [],\n      epochs: 50,\n      learningRate: 1.5,\n      batchIterations: 1,\n      mode: \"default\"\n    };\n  }\n\n  clearConsole() {\n    this.setState({\n      console: []\n    });\n  }\n\n  train() {\n    const date = new Date();\n    this.setState({\n      console: [\n        ...this.state.console,\n        \"[\" +\n          date.toLocaleTimeString() +\n          \"]:Epochs \" +\n          this.state.epochs +\n          \"Iter \" +\n          this.state.batchIterations\n      ]\n    });\n  }\n\n  updatebatchIterations(iteration) {\n    this.setState({\n      batchIterations: iteration\n    });\n  }\n  updateLearningRate(learningRate) {\n    this.setState({\n      learningRate: learningRate\n    });\n  }\n  updateEpochs(epoch) {\n    this.setState({\n      epochs: epoch\n    });\n  }\n\n  trainingModeAction(mode) {\n    this.setState({\n      mode: mode\n    });\n  }\n\n  addConsoleValue(value) {\n    const date = new Date();\n    this.setState({\n      console: [\n        ...this.state.console,\n        \"[\" + date.toLocaleTimeString() + \"] \" + value\n      ]\n    });\n  }\n\n  renderMode(mode) {\n    switch (mode) {\n      default:\n        return e(\n          \"div\",\n          {},\n          <Button label=\"Train with default dataset\" onClick={this.test} />,\n          <Button label=\"Predict with test dataset\" />,\n          <Button\n            label=\"Predict with pre trained model\"\n            onClick={this.predictTrainedModel}\n          />,\n          <Button label=\"Download model\" />\n        );\n      case \"custom\":\n        return e(\"p\", {}, \"custom goest here...\");\n    }\n  }\n  predictTrainedModel = async () => {\n    // const xTest = tf.tensor2d(data.xTest, [data.xTest.length, data.xTest[0].length]);\n    // const yTest = tf.tensor2d(data.yTest, [data.yTest.length, data.yTest[0].length]);\n    // const modelStorage = await tf.loadLayersModel(\n    //   \"localstorage://breast-cancer-model\"\n    // );\n    // tf.tidy(() => {\n    //   const output = modelStorage.predict(xTest);\n    //   const predictions = output.dataSync();\n    //   let correct = 0;\n    //   let wrong = 0;\n    //   let total = 0;\n    //   const yTestData = yTest.dataSync();\n    //   predictions.forEach((value, index) => {\n    //     total++;\n    //     if (yTestData[index] === 1) {\n    //       const fromTest = value >= 0.5 ? \"Correct\" : \"Wrong\";\n    //       if (fromTest === \"Correct\") {\n    //         correct++;\n    //       } else {\n    //         wrong++;\n    //       }\n    //       this.addConsoleValue(\n    //         `[${index}] = Malignant, Dataset Test = ${fromTest}`\n    //       );\n    //     } else {\n    //       const fromTest = value <= 0.5 ? \"Correct\" : \"Wrong\";\n    //       if (fromTest === \"Correct\") {\n    //         correct++;\n    //       } else {\n    //         wrong++;\n    //       }\n    //       this.addConsoleValue(\n    //         `[${index}] = Benign, Dataset Test= ${fromTest} `\n    //       );\n    //     }\n    //   });\n    //   this.addConsoleValue(\n    //     `Correct=${correct}, Wrong = ${wrong} Total=${total}`\n    //   );\n    // });\n  };\n  test = async () => {\n    this.addConsoleValue(\"Training...\");\n    console.log(dataset);\n    const data = filterData(dataset);\n    console.log(data.xTrain);\n    const xTensorTrain = tf.tensor2d(data.xTrain, [\n      data.xTrain.length,\n      data.xTrain[0].length\n    ]);\n    const yTensorTrain = tf.tensor2d(data.yTrain, [\n      data.yTrain.length,\n      data.yTrain[0].length\n    ]);\n\n    //Create model as sequential\n\n    const model = tf.sequential();\n    // const learningRate = this.state.learningRate;\n    // const optimizer = tf.train.sgd(learningRate);\n    const inputLayer = tf.layers.dense({\n      units: 16,\n      inputDim: 30,\n      activation: \"relu\"\n    });\n\n    const hiddenLayer = tf.layers.dense({\n      units: 8,\n      activation: \"relu\"\n    });\n\n    const hiddenLayer2 = tf.layers.dense({\n      units: 8,\n      activation: \"relu\"\n    });\n    const outputLayer = tf.layers.dense({\n      units: 1,\n      activation: \"sigmoid\"\n    });\n\n    model.add(inputLayer);\n    model.add(hiddenLayer);\n    model.add(hiddenLayer2);\n    // model.add(hiddenLayer3);\n    model.add(outputLayer);\n\n    model.compile({\n      optimizer: \"rmsprop\", //learning rate\n      loss: \"meanSquaredError\",\n      metrics: [\"accuracy\"]\n    });\n\n    // const xTest = tf.tensor2d(dataset.xTest, [dataset.xTest.length, 30]);\n    // const yTest = tf.tensor2d(dataset.yTest, [dataset.yTest.length, 1]);\n    const batchSize = this.state.batchIterations || 0;\n    const trainEpochs = this.state.epochs || 0;\n    // const totalNumBatches = Math.ceil(xTensorTrain.shape[0] * (1 - validationSplit) / batchSize) *trainEpochs;\n    let valAcc;\n    await model\n      .fit(xTensorTrain, yTensorTrain, {\n        batchSize: batchSize,\n        epochs: trainEpochs,\n        // validationData: [xTest, yTest],\n        callbacks: {\n          onEpochEnd: async (epoch, logs) => {\n            valAcc = logs.acc;\n            this.addConsoleValue(\n              `Epoch =${epoch} Loss=${logs.loss}  Acc=${logs.acc}`\n            );\n          }\n        }\n      })\n      .then(async () => {\n        const testResult = model.evaluate(xTensorTrain, yTensorTrain);\n        const testAccPercent = testResult[0].dataSync()[0] * 100;\n        const finalValAccPercent = valAcc * 100;\n        this.addConsoleValue(\n          `Final validation accuracy: ${finalValAccPercent.toFixed(1)}%; ` +\n            `Final test accuracy: ${testAccPercent.toFixed(1)}%`\n        );\n\n        await model.save(\"localstorage://breast-cancer-model\");\n        this.addConsoleValue(\"Model savet to localStorage\");\n      });\n  };\n\n  render() {\n    return e(\n      \"div\",\n      {\n        className: \"container\",\n        style: {\n          position: \"relative\",\n          top: 100\n        }\n      },\n      e(\n        \"div\",\n        { className: \"row\" },\n        e(\n          \"div\",\n          { className: \"col-md-6\" },\n          e(\"p\", null, \"Console\"),\n          <Console console={this.state.console} />,\n          <Button label=\"Clear\" onClick={this.clearConsole} />\n        ),\n        e(\n          \"div\",\n          { className: \"col-md-6\" },\n          e(\"p\", {}, \"Train\"),\n          e(\"p\", null, \"Default Breast Cancer Dataset\"),\n          e(\n            \"div\",\n            { className: \"row\" },\n            e(\n              \"div\",\n              { className: \"col-md-4\" },\n              e(\"p\", {}, \"Epochs\"),\n              <Input\n                placeholder=\"Enter here number of epochs\"\n                value={this.state.epochs}\n                updateValue={this.updateEpochs}\n              />\n            ),\n            e(\n              \"div\",\n              { className: \"col-md-4\" },\n              e(\"p\", {}, \"Batch Iterations\"),\n              <Input\n                placeholder=\"Enter here number of batchIterations\"\n                value={this.state.batchIterations}\n                updateValue={this.updatebatchIterations}\n              />\n            ),\n            e(\n              \"div\",\n              { className: \"col-md-4\" },\n              e(\"p\", {}, \"Learning rate\"),\n              <Input\n                placeholder=\"Learning rate\"\n                value={this.state.learningRate}\n                updateValue={this.updateLearningRate}\n              />\n            ),\n            e(\n              \"div\",\n              { className: \"col-md-6\" },\n              <RadioButton\n                label=\"Default dataset train\"\n                value=\"default\"\n                onModeSelection={this.trainingModeAction}\n              />\n            ),\n            e(\n              \"div\",\n              { className: \"col-md-6\" },\n              <RadioButton\n                label=\"Custom dataset train\"\n                value=\"custom\"\n                onModeSelection={this.trainingModeAction}\n              />\n            )\n          ),\n          this.renderMode(this.state.mode)\n        )\n      )\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}