{"ast":null,"code":"var _jsxFileName = \"/Users/acd/Documents/Projects/breast-cancer-ml/src/App.js\";\nimport React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport dataset from \"./Dataset\";\nimport Console from \"./Components/Console\";\nimport Button from \"./Components/Button\";\nimport RadioButton from \"./Components/RadioButton\";\nimport Input from \"./Components/Input\";\nimport Model from \"./Model\";\nconst e = React.createElement;\n\nconst modelStorage = async () => {\n  return await tf.loadLayersModel('localstorage://breast-cancer-model');\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.predictTrainedModel = async () => {\n      const xTest = tf.tensor2d(dataset.xTest.map(item => [item[0], item[1], item[2], item[3], item[4], item[5], item[6], item[7], item[8], item[9], item[10], item[11], item[12], item[13], item[14], item[15], item[16], item[17], item[18], item[19], item[20], item[21], item[22], item[23], item[24], item[25], item[26], item[27], item[28], item[29]]), [114, 30]);\n      const modelStorage = await tf.loadLayersModel('localstorage://breast-cancer-model'); // console.log('modelStorage',modelStorage);\n      // console.log(modelStorage);\n\n      const ypred = modelStorage.predict(xTest);\n      console.log(ypred.shape);\n    };\n\n    this.test = async () => {\n      this.addConsoleValue(\"Training...\"); //Create model as sequential\n\n      const model = tf.sequential();\n      const inputLayer = tf.layers.dense({\n        units: 16,\n        inputDim: 30,\n        activation: \"relu\"\n      });\n      const hiddenLayer = tf.layers.dense({\n        units: 8,\n        activation: \"relu\"\n      });\n      const hiddenLayer2 = tf.layers.dense({\n        units: 8,\n        activation: \"relu\"\n      });\n      const outputLayer = tf.layers.dense({\n        units: 1,\n        activation: \"sigmoid\"\n      });\n      model.add(inputLayer);\n      model.add(hiddenLayer);\n      model.add(hiddenLayer2);\n      model.add(outputLayer);\n      model.compile({\n        optimizer: \"rmsprop\",\n        loss: \"meanSquaredError\",\n        metrics: [\"accuracy\"]\n      });\n      const xTrain = tf.tensor2d(dataset.xTrain.map(item => [item[0], item[1], item[2], item[3], item[4], item[5], item[6], item[7], item[8], item[9], item[10], item[11], item[12], item[13], item[14], item[15], item[16], item[17], item[18], item[19], item[20], item[21], item[22], item[23], item[24], item[25], item[26], item[27], item[28], item[29]]), [454, 30]);\n      const yTrain = tf.tensor2d(dataset.yTrain.map(item => [item[0]]), [454, 1]);\n      const xTest = tf.tensor2d(dataset.xTest.map(item => [item[0], item[1], item[2], item[3], item[4], item[5], item[6], item[7], item[8], item[9], item[10], item[11], item[12], item[13], item[14], item[15], item[16], item[17], item[18], item[19], item[20], item[21], item[22], item[23], item[24], item[25], item[26], item[27], item[28], item[29]]), [114, 30]);\n      const yTest = tf.tensor2d(dataset.yTest.map(item => [item[0]]), [114, 1]);\n      let trainBatchCount = 0;\n      let valAcc;\n      let onIteration = 0;\n      const batchSize = this.state.batchIterations || 0;\n      const trainEpochs = this.state.epochs || 0;\n      const validationSplit = 0.15; //learning rate\n      // console.log(dataset.xTrain[0],validationSplit,batchSize,trainEpochs);\n      // const totalNumBatches = Math.ceil((dataset.xTrain[0].length * (1 - validationSplit)) / batchSize) * trainEpochs;\n      // const optimizer = tf.train.sgd(0.1);\n      // // const totalTraining = (trainBatchCount / totalNumBatches * 100).toFixed(1);\n      //         this.addConsoleValue(\n      //           `Total training =${totalNumBatches}`\n      //         );\n\n      await model.fit(xTrain, yTrain, {\n        batchSize: this.state.batchIterations,\n        epochs: this.state.epochs,\n        callbacks: {\n          onBatchEnd: async (batch, logs) => {// trainBatchCount++;\n            // // console.table(logs);\n            // this.addConsoleValue(\n            //   `Batch =${trainBatchCount} Loss=${logs.loss}  Acc=${logs.acc}`\n            // );\n            // if (trainBatchCount === batchSize) {\n            //   // console.table(logs);\n            //   // this.addConsoleValue(\n            //   //   `On batch end, Batch=${batch}, Log loss=${logs.loss}  acc=${logs.acc}`\n            //   // );\n            //   // trainBatchCount = 0;\n            // }\n          },\n          onEpochEnd: async (epoch, logs) => {\n            valAcc = logs.acc; // console.table(logs);\n\n            this.addConsoleValue(\"Epoch =\".concat(epoch, \" Loss=\").concat(logs.loss, \"  Acc=\").concat(logs.acc)); // if (onIteration) {\n            //   // this.addConsoleValue(`On epoch end, ${epoch}, ${logs}`);\n            // }\n          }\n        }\n      }).then(async () => {\n        const testResult = model.evaluate(xTest, yTest); // console.table(testResult);\n\n        const testAccPercent = testResult[1].dataSync()[0] * 100;\n        const finalValAccPercent = valAcc * 100;\n        this.addConsoleValue(\"Final validation accuracy: \".concat(finalValAccPercent.toFixed(1), \"%; \") + \"Final test accuracy: \".concat(testAccPercent.toFixed(1), \"%\"));\n        const ypred = model.predict(xTest);\n        console.log(ypred);\n        await model.save('localstorage://breast-cancer-model');\n        console.log('cancer saved'); //  const predictions = Array.from(output.argMax(1).dataSync());\n        //  console.table(output);\n        //  console.table(predictions);\n      }); // console.log(`Iteration ${i}: ${res.history.loss}`);\n      // }\n\n      console.log('finisheeeed,predicting'); // model.predict(xTest,yTest).print();\n      // await model.save('downloads://my-model');\n      // const json = fetch('./trained_alex.json');\n      // // const model2 = await tf.loadLayersModel('file:trained_alex.json');\n      // console.log('model2',json);\n    };\n\n    this.clearConsole = this.clearConsole.bind(this);\n    this.addConsoleValue = this.addConsoleValue.bind(this);\n    this.trainingModeAction = this.trainingModeAction.bind(this);\n    this.updateEpochs = this.updateEpochs.bind(this);\n    this.updateLearningRate = this.updateLearningRate.bind(this);\n    this.updatebatchIterations = this.updatebatchIterations.bind(this);\n    this.predictTrainedModel = this.predictTrainedModel.bind(this);\n    this.train = this.train.bind(this);\n    this.state = {\n      console: [],\n      epochs: 50,\n      learningRate: 1.5,\n      batchIterations: 1,\n      mode: \"default\",\n      trainedModel: Model.trainedModelModel\n    };\n  }\n\n  clearConsole() {\n    this.setState({\n      console: []\n    });\n  }\n\n  train() {\n    const date = new Date();\n    this.setState({\n      console: [...this.state.console, \"[\" + date.toLocaleTimeString() + \"]:Epochs \" + this.state.epochs + \"Iter \" + this.state.batchIterations]\n    });\n  }\n\n  updatebatchIterations(iteration) {\n    this.setState({\n      batchIterations: iteration\n    });\n  }\n\n  updateLearningRate(learningRate) {\n    this.setState({\n      learningRate: learningRate\n    });\n  }\n\n  updateEpochs(epoch) {\n    this.setState({\n      epochs: epoch\n    });\n  }\n\n  trainingModeAction(mode) {\n    this.setState({\n      mode: mode\n    });\n  }\n\n  addConsoleValue(value) {\n    const date = new Date();\n    this.setState({\n      console: [...this.state.console, \"[\" + date.toLocaleTimeString() + \"] \" + value]\n    });\n  }\n\n  renderMode(mode) {\n    switch (mode) {\n      default:\n        return e(\"div\", {}, React.createElement(Button, {\n          label: \"Train with default dataset\",\n          onClick: this.test,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }), React.createElement(Button, {\n          label: \"Predict with test dataset\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        }), React.createElement(Button, {\n          label: \"Predict with pre trained model\",\n          onClick: this.predictTrainedModel,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        }), React.createElement(Button, {\n          label: \"Download model\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        }));\n\n      case \"custom\":\n        return e(\"p\", {}, \"custom goest here...\");\n    }\n  }\n\n  render() {\n    return e(\"div\", {\n      className: \"container\",\n      style: {\n        position: \"relative\",\n        top: 100\n      }\n    }, e(\"div\", {\n      className: \"row\"\n    }, e(\"div\", {\n      className: \"col-md-6\"\n    }, e(\"p\", null, \"Console\"), React.createElement(Console, {\n      console: this.state.console,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }), React.createElement(Button, {\n      label: \"Clear\",\n      onClick: this.clearConsole,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    })), e(\"div\", {\n      className: \"col-md-6\"\n    }, e(\"p\", {}, \"Train\"), e(\"p\", null, \"Default Breast Cancer Dataset\"), e(\"div\", {\n      className: \"row\"\n    }, e(\"div\", {\n      className: \"col-md-4\"\n    }, e(\"p\", {}, \"Epochs\"), React.createElement(Input, {\n      placeholder: \"Enter here number of epochs\",\n      value: this.state.epochs,\n      updateValue: this.updateEpochs,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    })), e(\"div\", {\n      className: \"col-md-4\"\n    }, e(\"p\", {}, \"Batch Iterations\"), React.createElement(Input, {\n      placeholder: \"Enter here number of batchIterations\",\n      value: this.state.batchIterations,\n      updateValue: this.updatebatchIterations,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    })), e(\"div\", {\n      className: \"col-md-4\"\n    }, e(\"p\", {}, \"Learning rate\"), React.createElement(Input, {\n      placeholder: \"Learning rate\",\n      value: this.state.learningRate,\n      updateValue: this.updateLearningRate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    })), e(\"div\", {\n      className: \"col-md-6\"\n    }, React.createElement(RadioButton, {\n      label: \"Default dataset train\",\n      value: \"default\",\n      onModeSelection: this.trainingModeAction,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406\n      },\n      __self: this\n    })), e(\"div\", {\n      className: \"col-md-6\"\n    }, React.createElement(RadioButton, {\n      label: \"Custom dataset train\",\n      value: \"custom\",\n      onModeSelection: this.trainingModeAction,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415\n      },\n      __self: this\n    }))), this.renderMode(this.state.mode))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/acd/Documents/Projects/breast-cancer-ml/src/App.js"],"names":["React","tf","dataset","Console","Button","RadioButton","Input","Model","e","createElement","modelStorage","loadLayersModel","App","Component","constructor","props","predictTrainedModel","xTest","tensor2d","map","item","ypred","predict","console","log","shape","test","addConsoleValue","model","sequential","inputLayer","layers","dense","units","inputDim","activation","hiddenLayer","hiddenLayer2","outputLayer","add","compile","optimizer","loss","metrics","xTrain","yTrain","yTest","trainBatchCount","valAcc","onIteration","batchSize","state","batchIterations","trainEpochs","epochs","validationSplit","fit","callbacks","onBatchEnd","batch","logs","onEpochEnd","epoch","acc","then","testResult","evaluate","testAccPercent","dataSync","finalValAccPercent","toFixed","save","clearConsole","bind","trainingModeAction","updateEpochs","updateLearningRate","updatebatchIterations","train","learningRate","mode","trainedModel","trainedModelModel","setState","date","Date","toLocaleTimeString","iteration","value","renderMode","render","className","style","position","top"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport dataset from \"./Dataset\";\nimport Console from \"./Components/Console\";\nimport Button from \"./Components/Button\";\nimport RadioButton from \"./Components/RadioButton\";\nimport Input from \"./Components/Input\";\nimport Model from \"./Model\";\n\n\n\n\nconst e = React.createElement;\nconst modelStorage = async () => {\n return await tf.loadLayersModel('localstorage://breast-cancer-model');\n}\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.clearConsole = this.clearConsole.bind(this);\n    this.addConsoleValue = this.addConsoleValue.bind(this);\n    this.trainingModeAction = this.trainingModeAction.bind(this);\n    this.updateEpochs = this.updateEpochs.bind(this);\n    this.updateLearningRate = this.updateLearningRate.bind(this);\n    this.updatebatchIterations = this.updatebatchIterations.bind(this);\n    this.predictTrainedModel = this.predictTrainedModel.bind(this);\n    this.train = this.train.bind(this);\n    this.state = {\n      console: [],\n      epochs: 50,\n      learningRate:1.5,\n      batchIterations: 1,\n      mode: \"default\",\n      trainedModel: Model.trainedModelModel\n      \n    };\n  }\n\n  clearConsole() {\n    this.setState({\n      console: []\n    });\n  }\n\n  train() {\n    const date = new Date();\n    this.setState({\n      console: [\n        ...this.state.console,\n        \"[\" +\n          date.toLocaleTimeString() +\n          \"]:Epochs \" +\n          this.state.epochs +\n          \"Iter \" +\n          this.state.batchIterations\n      ]\n    });\n  }\n\n  updatebatchIterations(iteration) {\n    this.setState({\n      batchIterations:iteration\n    });\n  }\n  updateLearningRate(learningRate) {\n    this.setState({\n      learningRate:learningRate\n    });\n  }\n  updateEpochs(epoch) {\n    this.setState({\n      epochs: epoch\n    });\n  }\n\n  trainingModeAction(mode) {\n    this.setState({\n      mode: mode\n    });\n  }\n\n  addConsoleValue(value) {\n    const date = new Date();\n    this.setState({\n      console: [\n        ...this.state.console,\n        \"[\" + date.toLocaleTimeString() + \"] \" + value\n      ]\n    });\n  }\n\n  renderMode(mode) {\n    switch (mode) {\n      default:\n        return e(\n          \"div\",\n          {},\n          <Button label=\"Train with default dataset\" onClick={this.test} />,\n          <Button label=\"Predict with test dataset\" />,\n          <Button label=\"Predict with pre trained model\"\n            onClick={this.predictTrainedModel}\n          />,\n          <Button label=\"Download model\" />\n        );\n      case \"custom\":\n        return e(\"p\", {}, \"custom goest here...\");\n    }\n  }\n  predictTrainedModel = async () =>{\n    const xTest = tf.tensor2d(\n      dataset.xTest.map(item => [\n        item[0],\n        item[1],\n        item[2],\n        item[3],\n        item[4],\n        item[5],\n        item[6],\n        item[7],\n        item[8],\n        item[9],\n        item[10],\n        item[11],\n        item[12],\n        item[13],\n        item[14],\n        item[15],\n        item[16],\n        item[17],\n        item[18],\n        item[19],\n        item[20],\n        item[21],\n        item[22],\n        item[23],\n        item[24],\n        item[25],\n        item[26],\n        item[27],\n        item[28],\n        item[29]\n      ]),\n      [114, 30]\n    );\n    const modelStorage = await tf.loadLayersModel('localstorage://breast-cancer-model');\n    // console.log('modelStorage',modelStorage);\n    // console.log(modelStorage);\n    const ypred = modelStorage.predict(xTest);\n       console.log(ypred.shape);\n  }\n  test = async () => {\n    this.addConsoleValue(\"Training...\");\n  \n\n    //Create model as sequential\n\n    const model = tf.sequential();\n\n    const inputLayer = tf.layers.dense({\n      units: 16,\n      inputDim: 30,\n      activation: \"relu\"\n    });\n\n    const hiddenLayer = tf.layers.dense({\n      units: 8,\n      activation: \"relu\"\n    });\n\n    const hiddenLayer2 = tf.layers.dense({\n      units: 8,\n      activation: \"relu\"\n    });\n\n    const outputLayer = tf.layers.dense({\n      units: 1,\n      activation: \"sigmoid\"\n    });\n\n    model.add(inputLayer);\n    model.add(hiddenLayer);\n    model.add(hiddenLayer2);\n    model.add(outputLayer);\n\n    model.compile({\n      optimizer: \"rmsprop\",\n      loss: \"meanSquaredError\",\n      metrics: [\"accuracy\"]\n    });\n\n    const xTrain = tf.tensor2d(\n      dataset.xTrain.map(item => [\n        item[0],\n        item[1],\n        item[2],\n        item[3],\n        item[4],\n        item[5],\n        item[6],\n        item[7],\n        item[8],\n        item[9],\n        item[10],\n        item[11],\n        item[12],\n        item[13],\n        item[14],\n        item[15],\n        item[16],\n        item[17],\n        item[18],\n        item[19],\n        item[20],\n        item[21],\n        item[22],\n        item[23],\n        item[24],\n        item[25],\n        item[26],\n        item[27],\n        item[28],\n        item[29]\n      ]),\n      [454, 30]\n    );\n\n    const yTrain = tf.tensor2d(dataset.yTrain.map(item => [item[0]]), [454, 1]);\n\n    const xTest = tf.tensor2d(\n      dataset.xTest.map(item => [\n        item[0],\n        item[1],\n        item[2],\n        item[3],\n        item[4],\n        item[5],\n        item[6],\n        item[7],\n        item[8],\n        item[9],\n        item[10],\n        item[11],\n        item[12],\n        item[13],\n        item[14],\n        item[15],\n        item[16],\n        item[17],\n        item[18],\n        item[19],\n        item[20],\n        item[21],\n        item[22],\n        item[23],\n        item[24],\n        item[25],\n        item[26],\n        item[27],\n        item[28],\n        item[29]\n      ]),\n      [114, 30]\n    );\n\n    const yTest = tf.tensor2d(dataset.yTest.map(item => [item[0]]), [114, 1]);\n    let trainBatchCount = 0;\n    let valAcc;\n    let onIteration = 0;\n    const batchSize = this.state.batchIterations || 0;\n    const trainEpochs = this.state.epochs || 0;\n    const validationSplit = 0.15; //learning rate\n    // console.log(dataset.xTrain[0],validationSplit,batchSize,trainEpochs);\n    // const totalNumBatches = Math.ceil((dataset.xTrain[0].length * (1 - validationSplit)) / batchSize) * trainEpochs;\n    // const optimizer = tf.train.sgd(0.1);\n    // // const totalTraining = (trainBatchCount / totalNumBatches * 100).toFixed(1);\n    //         this.addConsoleValue(\n    //           `Total training =${totalNumBatches}`\n    //         );\n    await model\n      .fit(xTrain, yTrain, {\n        batchSize: this.state.batchIterations,\n        epochs: this.state.epochs,\n        callbacks: {\n          onBatchEnd: async (batch, logs) => {\n            // trainBatchCount++;\n            // // console.table(logs);\n            \n            // this.addConsoleValue(\n            //   `Batch =${trainBatchCount} Loss=${logs.loss}  Acc=${logs.acc}`\n            // );\n            // if (trainBatchCount === batchSize) {\n            //   // console.table(logs);\n            //   // this.addConsoleValue(\n            //   //   `On batch end, Batch=${batch}, Log loss=${logs.loss}  acc=${logs.acc}`\n            //   // );\n            //   // trainBatchCount = 0;\n            // }\n          },\n          onEpochEnd: async (epoch, logs) => {\n            valAcc = logs.acc;\n            // console.table(logs);\n            this.addConsoleValue(\n              `Epoch =${epoch} Loss=${logs.loss}  Acc=${logs.acc}`\n            );\n            // if (onIteration) {\n            //   // this.addConsoleValue(`On epoch end, ${epoch}, ${logs}`);\n            // }\n          }\n        }\n      })\n      .then( async () => {\n        const testResult = model.evaluate(xTest, yTest);\n        // console.table(testResult);\n        \n        const testAccPercent = testResult[1].dataSync()[0] * 100;\n        const finalValAccPercent = valAcc * 100;\n        this.addConsoleValue(\n          `Final validation accuracy: ${finalValAccPercent.toFixed(1)}%; ` +\n            `Final test accuracy: ${testAccPercent.toFixed(1)}%`\n        );\n\n       const ypred = model.predict(xTest);\n       console.log  (ypred)\n\n       await model.save('localstorage://breast-cancer-model');\n\n       console.log('cancer saved');\n      //  const predictions = Array.from(output.argMax(1).dataSync());\n      //  console.table(output);\n      //  console.table(predictions);\n      });\n    // console.log(`Iteration ${i}: ${res.history.loss}`);\n    // }\n\n    console.log('finisheeeed,predicting');\n    // model.predict(xTest,yTest).print();\n    // await model.save('downloads://my-model');\n\n    // const json = fetch('./trained_alex.json');\n    // // const model2 = await tf.loadLayersModel('file:trained_alex.json');\n    // console.log('model2',json);\n  };\n\n  render() {\n    return e(\n      \"div\",\n      {\n        className: \"container\",\n        style: {\n          position: \"relative\",\n          top: 100\n        }\n      },\n      e(\n        \"div\",\n        { className: \"row\" },\n        e(\n          \"div\",\n          { className: \"col-md-6\" },\n          e(\"p\", null, \"Console\"),\n          <Console console={this.state.console} />,\n          <Button label=\"Clear\" onClick={this.clearConsole} />\n        ),\n        e(\n          \"div\",\n          { className: \"col-md-6\" },\n          e(\"p\", {}, \"Train\"),\n          e(\"p\", null, \"Default Breast Cancer Dataset\"),\n          e(\n            \"div\",\n            { className: \"row\" },\n            e(\n              \"div\",\n              { className: \"col-md-4\" },\n              e(\"p\", {}, \"Epochs\"),\n              <Input\n                placeholder=\"Enter here number of epochs\"\n                value={this.state.epochs}\n                updateValue={this.updateEpochs}\n              />\n            ),\n            e(\n              \"div\",\n              { className: \"col-md-4\" },\n              e(\"p\", {}, \"Batch Iterations\"),\n              <Input\n                placeholder=\"Enter here number of batchIterations\"\n                value={this.state.batchIterations}\n                updateValue={this.updatebatchIterations}\n              />\n            ),\n            e(\n              \"div\",\n              { className: \"col-md-4\" },\n              e(\"p\", {}, \"Learning rate\"),\n              <Input\n                placeholder=\"Learning rate\"\n                value={this.state.learningRate}\n                updateValue={this.updateLearningRate}\n              />\n            ),\n            e(\n              \"div\",\n              { className: \"col-md-6\" },\n              <RadioButton\n                label=\"Default dataset train\"\n                value=\"default\"\n                onModeSelection={this.trainingModeAction}\n              />\n            ),\n            e(\n              \"div\",\n              { className: \"col-md-6\" },\n              <RadioButton\n                label=\"Custom dataset train\"\n                value=\"custom\"\n                onModeSelection={this.trainingModeAction}\n              />\n            )\n          ),\n          this.renderMode(this.state.mode)\n        )\n      )\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}