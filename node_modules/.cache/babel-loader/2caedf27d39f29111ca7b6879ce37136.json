{"ast":null,"code":"var _jsxFileName = \"/Users/acd/Documents/Projects/breast-cancer-ml/src/App.js\";\nimport React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport dataset from \"./Dataset\";\nimport Console from \"./Components/Console\";\nimport Button from \"./Components/Button\";\nimport RadioButton from \"./Components/RadioButton\";\nimport Input from \"./Components/Input\";\nimport Model from \"./Model\";\nimport data from \"./dataset\";\nconst e = React.createElement;\n\nconst modelStorage = async () => {\n  return await tf.loadLayersModel(\"localstorage://breast-cancer-model\");\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.predictTrainedModel = async () => {\n      // const xTest = tf.tensor2d(\n      //   dataset.xTest.map(item => [\n      //     item[0],\n      //     item[1],\n      //     item[2],\n      //     item[3],\n      //     item[4],\n      //     item[5],\n      //     item[6],\n      //     item[7],\n      //     item[8],\n      //     item[9],\n      //     item[10],\n      //     item[11],\n      //     item[12],\n      //     item[13],\n      //     item[14],\n      //     item[15],\n      //     item[16],\n      //     item[17],\n      //     item[18],\n      //     item[19],\n      //     item[20],\n      //     item[21],\n      //     item[22],\n      //     item[23],\n      //     item[24],\n      //     item[25],\n      //     item[26],\n      //     item[27],\n      //     item[28],\n      //     item[29]\n      //   ]),\n      //   [114, 30]\n      // );\n      // const yTest = tf.tensor2d(dataset.yTest.map(item => [item[0]]), [114, 1]);\n      // const modelStorage = await tf.loadLayersModel('localstorage://breast-cancer-model');\n      // console.log('modelStorage',modelStorage);\n      // console.log(modelStorage);\n      // const ypred = modelStorage.predict(xTest);\n      //    console.log(ypred);\n      // const testResult = modelStorage.evaluate(xTest, yTest);\n      //     // console.table(testResult);\n      //    let valAcc = 0;\n      //     const testAccPercent = testResult[1].dataSync()[0] * 100;\n      //     const finalValAccPercent = valAcc * 100;\n      //     this.addConsoleValue(\n      //       `Final validation accuracy: ${finalValAccPercent.toFixed(1)}%; ` +\n      //         `Final test accuracy: ${testAccPercent.toFixed(1)}%`\n      // const xData = xTest.dataSync();\n      // const yTrue = yTest.argMax(-1).dataSync();\n      // const predictOut = modelStorage.predict(xTest);\n      // const yPred = predictOut.argMax(1);\n      // console.log(yPred.dataSync());\n      const dataset = data.dataset;\n      const yTrain = [];\n      dataset.map(row => {\n        //We do not need ID so we will delete ID from array\n        delete row.id; //test data using target M=1, B =0;\n\n        yTrain.push([row.diagnosis === \"M\" ? 1 : 0]);\n        delete row.diagnosis;\n        return row;\n      });\n      const xTrain = dataset.map(row => [row.radius_mean, row.texture_mean, row.perimeter_mean, row.area_mean, row.smoothness_mean, row.compactness_mean, row.concavity_mean, row.concave_points_mean, row.symmetry_mean, row.fractal_dimension_mean, row.radius_se, row.texture_se, row.perimeter_se, row.area_se, row.smoothness_se, row.compactness_se, row.concavity_se, row.concave_points_se, row.symmetry_se, row.fractal_dimension_se, row.radius_worst, row.texture_worst, row.perimeter_worst, row.area_worst, row.smoothness_worst, row.compactness_worst, row.concavity_worst, row.concave_points_worst, row.symmetry_worst, row.fractal_dimension_worst]);\n      console.log(xTrain);\n      const xTensorTrain = tf.tensor2d([xTrain], [xTrain.length, 30]);\n      const yTensorTrain = tf.tensor2d(yTrain, [yTrain.length, 1]);\n      xTensorTrain.print();\n      yTensorTrain.print(); // console.log(dataset);\n      // console.log(yTensorTrain);\n      //     );\n    };\n\n    this.test = async () => {\n      this.addConsoleValue(\"Training...\"); //Create model as sequential\n\n      const model = tf.sequential();\n      const inputLayer = tf.layers.dense({\n        units: 16,\n        inputDim: 30,\n        activation: \"relu\"\n      });\n      const hiddenLayer = tf.layers.dense({\n        units: 8,\n        activation: \"relu\"\n      });\n      const hiddenLayer2 = tf.layers.dense({\n        units: 8,\n        activation: \"relu\"\n      });\n      const outputLayer = tf.layers.dense({\n        units: 1,\n        activation: \"sigmoid\"\n      });\n      model.add(inputLayer);\n      model.add(hiddenLayer);\n      model.add(hiddenLayer2);\n      model.add(outputLayer);\n      model.compile({\n        optimizer: \"rmsprop\",\n        loss: \"meanSquaredError\",\n        metrics: [\"accuracy\"]\n      });\n      const xTrain = tf.tensor2d(dataset.xTrain.map(item => [item[0], item[1], item[2], item[3], item[4], item[5], item[6], item[7], item[8], item[9], item[10], item[11], item[12], item[13], item[14], item[15], item[16], item[17], item[18], item[19], item[20], item[21], item[22], item[23], item[24], item[25], item[26], item[27], item[28], item[29]]), [454, 30]);\n      const yTrain = tf.tensor2d(dataset.yTrain.map(item => [item[0]]), [454, 1]);\n      const xTest = tf.tensor2d(dataset.xTest.map(item => [item[0], item[1], item[2], item[3], item[4], item[5], item[6], item[7], item[8], item[9], item[10], item[11], item[12], item[13], item[14], item[15], item[16], item[17], item[18], item[19], item[20], item[21], item[22], item[23], item[24], item[25], item[26], item[27], item[28], item[29]]), [114, 30]);\n      const yTest = tf.tensor2d(dataset.yTest.map(item => [item[0]]), [114, 1]);\n      let trainBatchCount = 0;\n      let valAcc;\n      let onIteration = 0;\n      const batchSize = this.state.batchIterations || 0;\n      const trainEpochs = this.state.epochs || 0;\n      const validationSplit = 0.15; //learning rate\n      // console.log(dataset.xTrain[0],validationSplit,batchSize,trainEpochs);\n      // const totalNumBatches = Math.ceil((dataset.xTrain[0].length * (1 - validationSplit)) / batchSize) * trainEpochs;\n      // const optimizer = tf.train.sgd(0.1);\n      // // const totalTraining = (trainBatchCount / totalNumBatches * 100).toFixed(1);\n      //         this.addConsoleValue(\n      //           `Total training =${totalNumBatches}`\n      //         );\n\n      await model.fit(xTrain, yTrain, {\n        batchSize: this.state.batchIterations,\n        epochs: this.state.epochs,\n        validationData: [xTest, yTest],\n        callbacks: {\n          onBatchEnd: async (batch, logs) => {// trainBatchCount++;\n            // // console.table(logs);\n            // this.addConsoleValue(\n            //   `Batch =${trainBatchCount} Loss=${logs.loss}  Acc=${logs.acc}`\n            // );\n            // if (trainBatchCount === batchSize) {\n            //   // console.table(logs);\n            //   // this.addConsoleValue(\n            //   //   `On batch end, Batch=${batch}, Log loss=${logs.loss}  acc=${logs.acc}`\n            //   // );\n            //   // trainBatchCount = 0;\n            // }\n          },\n          onEpochEnd: async (epoch, logs) => {\n            valAcc = logs.acc; // console.table(logs);\n\n            this.addConsoleValue(\"Epoch =\".concat(epoch, \" Loss=\").concat(logs.loss, \"  Acc=\").concat(logs.acc)); // if (onIteration) {\n            //   // this.addConsoleValue(`On epoch end, ${epoch}, ${logs}`);\n            // }\n          }\n        }\n      }).then(async () => {\n        const testResult = model.evaluate(xTest, yTest); // console.table(testResult);\n\n        const testAccPercent = testResult[1].dataSync()[0] * 100;\n        const finalValAccPercent = valAcc * 100;\n        this.addConsoleValue(\"Final validation accuracy: \".concat(finalValAccPercent.toFixed(1), \"%; \") + \"Final test accuracy: \".concat(testAccPercent.toFixed(1), \"%\")); //  const ypred = model.predict(xTest);\n        //  console.log  (ypred)\n        //  await model.save('localstorage://breast-cancer-model');\n        //  console.log('cancer saved');\n        //  const predictions = Array.from(output.argMax(1).dataSync());\n        //  console.table(output);\n        //  console.table(predictions);\n\n        const xData = xTest.dataSync();\n        const yTrue = yTest.argMax(-1).dataSync();\n        const predictOut = model.predict(xTest);\n        const yPred = predictOut.argMax(-1);\n        console.log(xData, yTrue, yPred.dataSync(), predictOut.dataSync());\n      }); // console.log(`Iteration ${i}: ${res.history.loss}`);\n      // }\n\n      console.log(\"finisheeeed,predicting\"); // model.predict(xTest,yTest).print();\n      // await model.save('downloads://my-model');\n      // const json = fetch('./trained_alex.json');\n      // // const model2 = await tf.loadLayersModel('file:trained_alex.json');\n      // console.log('model2',json);\n    };\n\n    this.clearConsole = this.clearConsole.bind(this);\n    this.addConsoleValue = this.addConsoleValue.bind(this);\n    this.trainingModeAction = this.trainingModeAction.bind(this);\n    this.updateEpochs = this.updateEpochs.bind(this);\n    this.updateLearningRate = this.updateLearningRate.bind(this);\n    this.updatebatchIterations = this.updatebatchIterations.bind(this);\n    this.predictTrainedModel = this.predictTrainedModel.bind(this);\n    this.train = this.train.bind(this);\n    this.state = {\n      console: [],\n      epochs: 50,\n      learningRate: 1.5,\n      batchIterations: 1,\n      mode: \"default\",\n      trainedModel: Model.trainedModelModel\n    };\n  }\n\n  clearConsole() {\n    this.setState({\n      console: []\n    });\n  }\n\n  train() {\n    const date = new Date();\n    this.setState({\n      console: [...this.state.console, \"[\" + date.toLocaleTimeString() + \"]:Epochs \" + this.state.epochs + \"Iter \" + this.state.batchIterations]\n    });\n  }\n\n  updatebatchIterations(iteration) {\n    this.setState({\n      batchIterations: iteration\n    });\n  }\n\n  updateLearningRate(learningRate) {\n    this.setState({\n      learningRate: learningRate\n    });\n  }\n\n  updateEpochs(epoch) {\n    this.setState({\n      epochs: epoch\n    });\n  }\n\n  trainingModeAction(mode) {\n    this.setState({\n      mode: mode\n    });\n  }\n\n  addConsoleValue(value) {\n    const date = new Date();\n    this.setState({\n      console: [...this.state.console, \"[\" + date.toLocaleTimeString() + \"] \" + value]\n    });\n  }\n\n  renderMode(mode) {\n    switch (mode) {\n      default:\n        return e(\"div\", {}, React.createElement(Button, {\n          label: \"Train with default dataset\",\n          onClick: this.test,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }), React.createElement(Button, {\n          label: \"Predict with test dataset\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }), React.createElement(Button, {\n          label: \"Predict with pre trained model\",\n          onClick: this.predictTrainedModel,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }), React.createElement(Button, {\n          label: \"Download model\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }));\n\n      case \"custom\":\n        return e(\"p\", {}, \"custom goest here...\");\n    }\n  }\n\n  render() {\n    return e(\"div\", {\n      className: \"container\",\n      style: {\n        position: \"relative\",\n        top: 100\n      }\n    }, e(\"div\", {\n      className: \"row\"\n    }, e(\"div\", {\n      className: \"col-md-6\"\n    }, e(\"p\", null, \"Console\"), React.createElement(Console, {\n      console: this.state.console,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440\n      },\n      __self: this\n    }), React.createElement(Button, {\n      label: \"Clear\",\n      onClick: this.clearConsole,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441\n      },\n      __self: this\n    })), e(\"div\", {\n      className: \"col-md-6\"\n    }, e(\"p\", {}, \"Train\"), e(\"p\", null, \"Default Breast Cancer Dataset\"), e(\"div\", {\n      className: \"row\"\n    }, e(\"div\", {\n      className: \"col-md-4\"\n    }, e(\"p\", {}, \"Epochs\"), React.createElement(Input, {\n      placeholder: \"Enter here number of epochs\",\n      value: this.state.epochs,\n      updateValue: this.updateEpochs,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455\n      },\n      __self: this\n    })), e(\"div\", {\n      className: \"col-md-4\"\n    }, e(\"p\", {}, \"Batch Iterations\"), React.createElement(Input, {\n      placeholder: \"Enter here number of batchIterations\",\n      value: this.state.batchIterations,\n      updateValue: this.updatebatchIterations,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465\n      },\n      __self: this\n    })), e(\"div\", {\n      className: \"col-md-4\"\n    }, e(\"p\", {}, \"Learning rate\"), React.createElement(Input, {\n      placeholder: \"Learning rate\",\n      value: this.state.learningRate,\n      updateValue: this.updateLearningRate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475\n      },\n      __self: this\n    })), e(\"div\", {\n      className: \"col-md-6\"\n    }, React.createElement(RadioButton, {\n      label: \"Default dataset train\",\n      value: \"default\",\n      onModeSelection: this.trainingModeAction,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484\n      },\n      __self: this\n    })), e(\"div\", {\n      className: \"col-md-6\"\n    }, React.createElement(RadioButton, {\n      label: \"Custom dataset train\",\n      value: \"custom\",\n      onModeSelection: this.trainingModeAction,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493\n      },\n      __self: this\n    }))), this.renderMode(this.state.mode))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/acd/Documents/Projects/breast-cancer-ml/src/App.js"],"names":["React","tf","dataset","Console","Button","RadioButton","Input","Model","data","e","createElement","modelStorage","loadLayersModel","App","Component","constructor","props","predictTrainedModel","yTrain","map","row","id","push","diagnosis","xTrain","radius_mean","texture_mean","perimeter_mean","area_mean","smoothness_mean","compactness_mean","concavity_mean","concave_points_mean","symmetry_mean","fractal_dimension_mean","radius_se","texture_se","perimeter_se","area_se","smoothness_se","compactness_se","concavity_se","concave_points_se","symmetry_se","fractal_dimension_se","radius_worst","texture_worst","perimeter_worst","area_worst","smoothness_worst","compactness_worst","concavity_worst","concave_points_worst","symmetry_worst","fractal_dimension_worst","console","log","xTensorTrain","tensor2d","length","yTensorTrain","print","test","addConsoleValue","model","sequential","inputLayer","layers","dense","units","inputDim","activation","hiddenLayer","hiddenLayer2","outputLayer","add","compile","optimizer","loss","metrics","item","xTest","yTest","trainBatchCount","valAcc","onIteration","batchSize","state","batchIterations","trainEpochs","epochs","validationSplit","fit","validationData","callbacks","onBatchEnd","batch","logs","onEpochEnd","epoch","acc","then","testResult","evaluate","testAccPercent","dataSync","finalValAccPercent","toFixed","xData","yTrue","argMax","predictOut","predict","yPred","clearConsole","bind","trainingModeAction","updateEpochs","updateLearningRate","updatebatchIterations","train","learningRate","mode","trainedModel","trainedModelModel","setState","date","Date","toLocaleTimeString","iteration","value","renderMode","render","className","style","position","top"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport dataset from \"./Dataset\";\nimport Console from \"./Components/Console\";\nimport Button from \"./Components/Button\";\nimport RadioButton from \"./Components/RadioButton\";\nimport Input from \"./Components/Input\";\nimport Model from \"./Model\";\nimport data from \"./dataset\";\n\nconst e = React.createElement;\nconst modelStorage = async () => {\n  return await tf.loadLayersModel(\"localstorage://breast-cancer-model\");\n};\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.clearConsole = this.clearConsole.bind(this);\n    this.addConsoleValue = this.addConsoleValue.bind(this);\n    this.trainingModeAction = this.trainingModeAction.bind(this);\n    this.updateEpochs = this.updateEpochs.bind(this);\n    this.updateLearningRate = this.updateLearningRate.bind(this);\n    this.updatebatchIterations = this.updatebatchIterations.bind(this);\n    this.predictTrainedModel = this.predictTrainedModel.bind(this);\n    this.train = this.train.bind(this);\n    this.state = {\n      console: [],\n      epochs: 50,\n      learningRate: 1.5,\n      batchIterations: 1,\n      mode: \"default\",\n      trainedModel: Model.trainedModelModel\n    };\n  }\n\n  clearConsole() {\n    this.setState({\n      console: []\n    });\n  }\n\n  train() {\n    const date = new Date();\n    this.setState({\n      console: [\n        ...this.state.console,\n        \"[\" +\n          date.toLocaleTimeString() +\n          \"]:Epochs \" +\n          this.state.epochs +\n          \"Iter \" +\n          this.state.batchIterations\n      ]\n    });\n  }\n\n  updatebatchIterations(iteration) {\n    this.setState({\n      batchIterations: iteration\n    });\n  }\n  updateLearningRate(learningRate) {\n    this.setState({\n      learningRate: learningRate\n    });\n  }\n  updateEpochs(epoch) {\n    this.setState({\n      epochs: epoch\n    });\n  }\n\n  trainingModeAction(mode) {\n    this.setState({\n      mode: mode\n    });\n  }\n\n  addConsoleValue(value) {\n    const date = new Date();\n    this.setState({\n      console: [\n        ...this.state.console,\n        \"[\" + date.toLocaleTimeString() + \"] \" + value\n      ]\n    });\n  }\n\n  renderMode(mode) {\n    switch (mode) {\n      default:\n        return e(\n          \"div\",\n          {},\n          <Button label=\"Train with default dataset\" onClick={this.test} />,\n          <Button label=\"Predict with test dataset\" />,\n          <Button\n            label=\"Predict with pre trained model\"\n            onClick={this.predictTrainedModel}\n          />,\n          <Button label=\"Download model\" />\n        );\n      case \"custom\":\n        return e(\"p\", {}, \"custom goest here...\");\n    }\n  }\n  predictTrainedModel = async () => {\n    // const xTest = tf.tensor2d(\n    //   dataset.xTest.map(item => [\n    //     item[0],\n    //     item[1],\n    //     item[2],\n    //     item[3],\n    //     item[4],\n    //     item[5],\n    //     item[6],\n    //     item[7],\n    //     item[8],\n    //     item[9],\n    //     item[10],\n    //     item[11],\n    //     item[12],\n    //     item[13],\n    //     item[14],\n    //     item[15],\n    //     item[16],\n    //     item[17],\n    //     item[18],\n    //     item[19],\n    //     item[20],\n    //     item[21],\n    //     item[22],\n    //     item[23],\n    //     item[24],\n    //     item[25],\n    //     item[26],\n    //     item[27],\n    //     item[28],\n    //     item[29]\n    //   ]),\n    //   [114, 30]\n    // );\n\n    // const yTest = tf.tensor2d(dataset.yTest.map(item => [item[0]]), [114, 1]);\n    // const modelStorage = await tf.loadLayersModel('localstorage://breast-cancer-model');\n    // console.log('modelStorage',modelStorage);\n    // console.log(modelStorage);\n    // const ypred = modelStorage.predict(xTest);\n    //    console.log(ypred);\n\n    // const testResult = modelStorage.evaluate(xTest, yTest);\n    //     // console.table(testResult);\n    //    let valAcc = 0;\n    //     const testAccPercent = testResult[1].dataSync()[0] * 100;\n    //     const finalValAccPercent = valAcc * 100;\n    //     this.addConsoleValue(\n    //       `Final validation accuracy: ${finalValAccPercent.toFixed(1)}%; ` +\n    //         `Final test accuracy: ${testAccPercent.toFixed(1)}%`\n\n    // const xData = xTest.dataSync();\n    // const yTrue = yTest.argMax(-1).dataSync();\n    // const predictOut = modelStorage.predict(xTest);\n    // const yPred = predictOut.argMax(1);\n\n    // console.log(yPred.dataSync());\n\n    const dataset = data.dataset;\n    const yTrain = [];\n    dataset.map(row => {\n      //We do not need ID so we will delete ID from array\n      delete row.id;\n      //test data using target M=1, B =0;\n      yTrain.push([row.diagnosis === \"M\" ? 1 : 0]);\n      delete row.diagnosis;\n      return row;\n    });\n    const xTrain = dataset.map(row => [\n          row.radius_mean,\n          row.texture_mean,\n          row.perimeter_mean,\n          row.area_mean,\n          row.smoothness_mean,\n          row.compactness_mean,\n          row.concavity_mean,\n          row.concave_points_mean,\n          row.symmetry_mean,\n          row.fractal_dimension_mean,\n          row.radius_se,\n          row.texture_se,\n          row.perimeter_se,\n          row.area_se,\n          row.smoothness_se,\n          row.compactness_se,\n          row.concavity_se,\n          row.concave_points_se,\n          row.symmetry_se,\n          row.fractal_dimension_se,\n          row.radius_worst,\n          row.texture_worst,\n          row.perimeter_worst,\n          row.area_worst,\n          row.smoothness_worst,\n          row.compactness_worst,\n          row.concavity_worst,\n          row.concave_points_worst,\n          row.symmetry_worst,\n          row.fractal_dimension_worst\n        \n    ]);\n\n    console.log(xTrain);\n    const xTensorTrain = tf.tensor2d([xTrain],[xTrain.length,30]);\n    const yTensorTrain = tf.tensor2d(yTrain,[yTrain.length,1]);\n\n    \n    xTensorTrain.print();\n    yTensorTrain.print();\n    // console.log(dataset);\n    // console.log(yTensorTrain);\n\n    //     );\n  };\n  test = async () => {\n    this.addConsoleValue(\"Training...\");\n\n    //Create model as sequential\n\n    const model = tf.sequential();\n\n    const inputLayer = tf.layers.dense({\n      units: 16,\n      inputDim: 30,\n      activation: \"relu\"\n    });\n\n    const hiddenLayer = tf.layers.dense({\n      units: 8,\n      activation: \"relu\"\n    });\n\n    const hiddenLayer2 = tf.layers.dense({\n      units: 8,\n      activation: \"relu\"\n    });\n\n    const outputLayer = tf.layers.dense({\n      units: 1,\n      activation: \"sigmoid\"\n    });\n\n    model.add(inputLayer);\n    model.add(hiddenLayer);\n    model.add(hiddenLayer2);\n    model.add(outputLayer);\n\n    model.compile({\n      optimizer: \"rmsprop\",\n      loss: \"meanSquaredError\",\n      metrics: [\"accuracy\"]\n    });\n\n    const xTrain = tf.tensor2d(\n      dataset.xTrain.map(item => [\n        item[0],\n        item[1],\n        item[2],\n        item[3],\n        item[4],\n        item[5],\n        item[6],\n        item[7],\n        item[8],\n        item[9],\n        item[10],\n        item[11],\n        item[12],\n        item[13],\n        item[14],\n        item[15],\n        item[16],\n        item[17],\n        item[18],\n        item[19],\n        item[20],\n        item[21],\n        item[22],\n        item[23],\n        item[24],\n        item[25],\n        item[26],\n        item[27],\n        item[28],\n        item[29]\n      ]),\n      [454, 30]\n    );\n\n    const yTrain = tf.tensor2d(dataset.yTrain.map(item => [item[0]]), [454, 1]);\n\n    const xTest = tf.tensor2d(\n      dataset.xTest.map(item => [\n        item[0],\n        item[1],\n        item[2],\n        item[3],\n        item[4],\n        item[5],\n        item[6],\n        item[7],\n        item[8],\n        item[9],\n        item[10],\n        item[11],\n        item[12],\n        item[13],\n        item[14],\n        item[15],\n        item[16],\n        item[17],\n        item[18],\n        item[19],\n        item[20],\n        item[21],\n        item[22],\n        item[23],\n        item[24],\n        item[25],\n        item[26],\n        item[27],\n        item[28],\n        item[29]\n      ]),\n      [114, 30]\n    );\n\n    const yTest = tf.tensor2d(dataset.yTest.map(item => [item[0]]), [114, 1]);\n    let trainBatchCount = 0;\n    let valAcc;\n    let onIteration = 0;\n    const batchSize = this.state.batchIterations || 0;\n    const trainEpochs = this.state.epochs || 0;\n    const validationSplit = 0.15; //learning rate\n    // console.log(dataset.xTrain[0],validationSplit,batchSize,trainEpochs);\n    // const totalNumBatches = Math.ceil((dataset.xTrain[0].length * (1 - validationSplit)) / batchSize) * trainEpochs;\n    // const optimizer = tf.train.sgd(0.1);\n    // // const totalTraining = (trainBatchCount / totalNumBatches * 100).toFixed(1);\n    //         this.addConsoleValue(\n    //           `Total training =${totalNumBatches}`\n    //         );\n    await model\n      .fit(xTrain, yTrain, {\n        batchSize: this.state.batchIterations,\n        epochs: this.state.epochs,\n        validationData: [xTest, yTest],\n        callbacks: {\n          onBatchEnd: async (batch, logs) => {\n            // trainBatchCount++;\n            // // console.table(logs);\n            // this.addConsoleValue(\n            //   `Batch =${trainBatchCount} Loss=${logs.loss}  Acc=${logs.acc}`\n            // );\n            // if (trainBatchCount === batchSize) {\n            //   // console.table(logs);\n            //   // this.addConsoleValue(\n            //   //   `On batch end, Batch=${batch}, Log loss=${logs.loss}  acc=${logs.acc}`\n            //   // );\n            //   // trainBatchCount = 0;\n            // }\n          },\n          onEpochEnd: async (epoch, logs) => {\n            valAcc = logs.acc;\n            // console.table(logs);\n            this.addConsoleValue(\n              `Epoch =${epoch} Loss=${logs.loss}  Acc=${logs.acc}`\n            );\n            // if (onIteration) {\n            //   // this.addConsoleValue(`On epoch end, ${epoch}, ${logs}`);\n            // }\n          }\n        }\n      })\n      .then(async () => {\n        const testResult = model.evaluate(xTest, yTest);\n        // console.table(testResult);\n\n        const testAccPercent = testResult[1].dataSync()[0] * 100;\n        const finalValAccPercent = valAcc * 100;\n        this.addConsoleValue(\n          `Final validation accuracy: ${finalValAccPercent.toFixed(1)}%; ` +\n            `Final test accuracy: ${testAccPercent.toFixed(1)}%`\n        );\n\n        //  const ypred = model.predict(xTest);\n        //  console.log  (ypred)\n\n        //  await model.save('localstorage://breast-cancer-model');\n\n        //  console.log('cancer saved');\n\n        //  const predictions = Array.from(output.argMax(1).dataSync());\n        //  console.table(output);\n        //  console.table(predictions);\n        const xData = xTest.dataSync();\n        const yTrue = yTest.argMax(-1).dataSync();\n        const predictOut = model.predict(xTest);\n        const yPred = predictOut.argMax(-1);\n\n        console.log(xData, yTrue, yPred.dataSync(), predictOut.dataSync());\n      });\n    // console.log(`Iteration ${i}: ${res.history.loss}`);\n    // }\n\n    console.log(\"finisheeeed,predicting\");\n    // model.predict(xTest,yTest).print();\n    // await model.save('downloads://my-model');\n\n    // const json = fetch('./trained_alex.json');\n    // // const model2 = await tf.loadLayersModel('file:trained_alex.json');\n    // console.log('model2',json);\n  };\n\n  render() {\n    return e(\n      \"div\",\n      {\n        className: \"container\",\n        style: {\n          position: \"relative\",\n          top: 100\n        }\n      },\n      e(\n        \"div\",\n        { className: \"row\" },\n        e(\n          \"div\",\n          { className: \"col-md-6\" },\n          e(\"p\", null, \"Console\"),\n          <Console console={this.state.console} />,\n          <Button label=\"Clear\" onClick={this.clearConsole} />\n        ),\n        e(\n          \"div\",\n          { className: \"col-md-6\" },\n          e(\"p\", {}, \"Train\"),\n          e(\"p\", null, \"Default Breast Cancer Dataset\"),\n          e(\n            \"div\",\n            { className: \"row\" },\n            e(\n              \"div\",\n              { className: \"col-md-4\" },\n              e(\"p\", {}, \"Epochs\"),\n              <Input\n                placeholder=\"Enter here number of epochs\"\n                value={this.state.epochs}\n                updateValue={this.updateEpochs}\n              />\n            ),\n            e(\n              \"div\",\n              { className: \"col-md-4\" },\n              e(\"p\", {}, \"Batch Iterations\"),\n              <Input\n                placeholder=\"Enter here number of batchIterations\"\n                value={this.state.batchIterations}\n                updateValue={this.updatebatchIterations}\n              />\n            ),\n            e(\n              \"div\",\n              { className: \"col-md-4\" },\n              e(\"p\", {}, \"Learning rate\"),\n              <Input\n                placeholder=\"Learning rate\"\n                value={this.state.learningRate}\n                updateValue={this.updateLearningRate}\n              />\n            ),\n            e(\n              \"div\",\n              { className: \"col-md-6\" },\n              <RadioButton\n                label=\"Default dataset train\"\n                value=\"default\"\n                onModeSelection={this.trainingModeAction}\n              />\n            ),\n            e(\n              \"div\",\n              { className: \"col-md-6\" },\n              <RadioButton\n                label=\"Custom dataset train\"\n                value=\"custom\"\n                onModeSelection={this.trainingModeAction}\n              />\n            )\n          ),\n          this.renderMode(this.state.mode)\n        )\n      )\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}