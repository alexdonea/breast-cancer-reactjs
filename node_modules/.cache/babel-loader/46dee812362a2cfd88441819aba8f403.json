{"ast":null,"code":"var _jsxFileName = \"/Users/acd/Documents/Projects/breast-cancer-ml/src/App.js\";\nimport React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport Console from \"./Components/Console\";\nimport Button from \"./Components/Button\";\nimport RadioButton from \"./Components/RadioButton\";\nimport Input from \"./Components/Input\";\nimport data from \"./dataset\";\nconst e = React.createElement;\n\nconst modelStorage = async () => {\n  return await tf.loadLayersModel(\"localstorage://breast-cancer-model\");\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.predictTrainedModel = async () => {\n      const xTest = tf.tensor2d(data.xTest, [data.xTest.length, 30]);\n      const yTest = tf.tensor2d(data.yTest, [data.yTest.length, 1]);\n      let correct = 0;\n      let wrong = 0;\n      const modelStorage = await tf.loadLayersModel(\"localstorage://breast-cancer-model\");\n      tf.tidy(() => {\n        const output = modelStorage.predict(xTest); // const axis = 1;\n        // const labels = Array.from(yTest.argMax(axis).dataSync());\n        // const predictions = Array.from(output.argMax(axis).dataSync();\n\n        const predictions = output.dataSync();\n        let correct = 0;\n        let wrong = 0;\n        let total = 0; // console.log(predictions);\n        // console.log('ytest',yTest.);\n\n        const yTestData = yTest.dataSync();\n        console.log('realytest', yTestData);\n        console.log('pred=d', predictions);\n        predictions.map((value, index) => {\n          total++;\n          console.log(value, yTestData[index]);\n\n          if (yTestData[index] === 1) {\n            // console.log('value=',value,'ytest=',ytestData)\n            const fromTest = value >= 0.5 ? 'Correct' : 'Wrong';\n\n            if (fromTest === 'Correct') {\n              correct++;\n            } else {\n              wrong++;\n            }\n\n            this.addConsoleValue(\"[\".concat(index, \"] = Malignant, Dataset Test = \").concat(fromTest));\n          } else {\n            const fromTest = value <= 0.5 ? 'Correct' : 'Wrong';\n\n            if (fromTest === 'Correct') {\n              correct++;\n            } else {\n              wrong++;\n            }\n\n            this.addConsoleValue(\"[\".concat(index, \"] = Benign, Dataset Test= \").concat(fromTest, \" \"));\n          }\n        });\n        this.addConsoleValue(\"Correct=\".concat(correct, \", Wrong = \").concat(wrong, \" Total=\").concat(total)); // console.log('labels',labels,'predictions',predictions);\n      });\n    };\n\n    this.test = async () => {\n      this.addConsoleValue(\"Training...\");\n      const dataset = data.dataset;\n      const yTrain = [];\n      dataset.map(row => {\n        //We do not need ID so we will delete ID from array\n        delete row.id; //test data using target M=1, B =0;\n\n        yTrain.push([row.diagnosis === \"M\" ? 1 : 0]);\n        delete row.diagnosis;\n        return row;\n      });\n      const xTrain = dataset.map(row => [row.radius_mean, row.texture_mean, row.perimeter_mean, row.area_mean, row.smoothness_mean, row.compactness_mean, row.concavity_mean, row.concave_points_mean, row.symmetry_mean, row.fractal_dimension_mean, row.radius_se, row.texture_se, row.perimeter_se, row.area_se, row.smoothness_se, row.compactness_se, row.concavity_se, row.concave_points_se, row.symmetry_se, row.fractal_dimension_se, row.radius_worst, row.texture_worst, row.perimeter_worst, row.area_worst, row.smoothness_worst, row.compactness_worst, row.concavity_worst, row.concave_points_worst, row.symmetry_worst, row.fractal_dimension_worst]);\n      console.log(xTrain);\n      const xTensorTrain = tf.tensor2d(xTrain, [xTrain.length, 30]);\n      const yTensorTrain = tf.tensor2d(yTrain, [yTrain.length, 1]);\n      const xTrain1 = data.xTrain;\n      const yTrain1 = data.yTrain; //Create model as sequential\n\n      const model = tf.sequential();\n      const learningRate = this.state.learningRate;\n      const optimizer = tf.train.sgd(learningRate);\n      const inputLayer = tf.layers.dense({\n        units: 16,\n        inputDim: 30,\n        activation: \"relu\"\n      });\n      const hiddenLayer = tf.layers.dense({\n        units: 8,\n        activation: \"relu\"\n      });\n      const hiddenLayer2 = tf.layers.dense({\n        units: 8,\n        activation: \"relu\"\n      });\n      const hiddenLayer3 = tf.layers.dense({\n        units: 8,\n        activation: \"relu\"\n      });\n      const outputLayer = tf.layers.dense({\n        units: 1,\n        activation: \"sigmoid\"\n      });\n      model.add(inputLayer);\n      model.add(hiddenLayer);\n      model.add(hiddenLayer2); // model.add(hiddenLayer3);\n\n      model.add(outputLayer);\n      model.compile({\n        optimizer: \"rmsprop\",\n        //learning rate\n        loss: \"meanSquaredError\",\n        metrics: [\"accuracy\"]\n      });\n      const xTest = tf.tensor2d(data.xTest, [data.xTest.length, 30]);\n      const yTest = tf.tensor2d(data.yTest, [data.yTest.length, 1]);\n      let trainBatchCount = 0;\n      let onIteration = 0;\n      const batchSize = this.state.batchIterations || 0;\n      const trainEpochs = this.state.epochs || 0;\n      const validationSplit = 0.15; //learning rate\n\n      const totalNumBatches = Math.ceil(xTensorTrain.shape[0] * (1 - validationSplit) / batchSize) * trainEpochs;\n      let trainBathcCount = 0;\n      let valAcc;\n      await model.fit(xTensorTrain, yTensorTrain, {\n        batchSize: batchSize,\n        epochs: trainEpochs,\n        validationData: [xTest, yTest],\n        callbacks: {\n          onEpochEnd: async (epoch, logs) => {\n            valAcc = logs.acc;\n            this.addConsoleValue(\"Epoch =\".concat(epoch, \" Loss=\").concat(logs.loss, \"  Acc=\").concat(logs.acc));\n          }\n        }\n      }).then(async () => {\n        const testResult = model.evaluate(xTensorTrain, yTensorTrain); // testResult.print();\n        // console.table(testResult);\n\n        const testAccPercent = testResult[0].dataSync()[0] * 100;\n        const finalValAccPercent = valAcc * 100;\n        this.addConsoleValue(\"Final validation accuracy: \".concat(finalValAccPercent.toFixed(1), \"%; \") + \"Final test accuracy: \".concat(testAccPercent.toFixed(1), \"%\")); //  const ypred = model.predict(xTest).print();\n        //  console.log  (ypred)\n        //     tf.tidy(() => {\n        //       const output = model.predict(xTest);\n        //       const axis = 1;\n        // const labels = Array.from(yTest.argMax(axis).dataSync());\n        // const predictions = Array.from(output.argMax(axis).dataSync());\n        //         console.log('labels',labels,'predictions',predictions);\n        //     });   \n\n        await model.save(\"localstorage://breast-cancer-model\");\n        console.log(\"cancer saved\"); //  const predictions = Array.from(output.argMax(1).dataSync());\n        //  const\n        //  predictions.map((image,index) => {\n        //  });\n        //  console.table(output);\n        //  console.table(predictions);\n        // const xData = xTest.dataSync();\n        // const yTrue = yTest.argMax(-1).dataSync();\n        // const predictOut = model.predict(xTest);\n        // const yPred = predictOut.argMax(1);\n        // yPred.map((predX,index) =>{\n        //   if(predX == 1){\n        //     this.addConsoleValue(`${index} = Maglim`)\n        //   }\n        //   else if (predX === 0){\n        //     this.addConsoleValue(`${index} = Benign`)\n        //   }\n        //   else{\n        //     this.addConsoleValue(`${index} = Erroare`)\n        //   }\n        // })\n        // console.log(xData, yTrue, yPred.dataSync(), predictOut.dataSync());\n      }); // console.log(`Iteration ${i}: ${res.history.loss}`);\n      // }\n\n      console.log(\"finisheeeed,predicting\"); // model.predict(xTest,yTest)\n      // await model.save('downloads://my-model');\n      // const json = fetch('./trained_alex.json');\n      // // const model2 = await tf.loadLayersModel('file:trained_alex.json');\n      // console.log('model2',json);\n    };\n\n    this.clearConsole = this.clearConsole.bind(this);\n    this.addConsoleValue = this.addConsoleValue.bind(this);\n    this.trainingModeAction = this.trainingModeAction.bind(this);\n    this.updateEpochs = this.updateEpochs.bind(this);\n    this.updateLearningRate = this.updateLearningRate.bind(this);\n    this.updatebatchIterations = this.updatebatchIterations.bind(this);\n    this.predictTrainedModel = this.predictTrainedModel.bind(this);\n    this.train = this.train.bind(this);\n    this.state = {\n      console: [],\n      epochs: 100,\n      learningRate: 1.5,\n      batchIterations: 1,\n      mode: \"default\"\n    };\n  }\n\n  clearConsole() {\n    this.setState({\n      console: []\n    });\n  }\n\n  train() {\n    const date = new Date();\n    this.setState({\n      console: [...this.state.console, \"[\" + date.toLocaleTimeString() + \"]:Epochs \" + this.state.epochs + \"Iter \" + this.state.batchIterations]\n    });\n  }\n\n  updatebatchIterations(iteration) {\n    this.setState({\n      batchIterations: iteration\n    });\n  }\n\n  updateLearningRate(learningRate) {\n    this.setState({\n      learningRate: learningRate\n    });\n  }\n\n  updateEpochs(epoch) {\n    this.setState({\n      epochs: epoch\n    });\n  }\n\n  trainingModeAction(mode) {\n    this.setState({\n      mode: mode\n    });\n  }\n\n  addConsoleValue(value) {\n    const date = new Date();\n    this.setState({\n      console: [...this.state.console, \"[\" + date.toLocaleTimeString() + \"] \" + value]\n    });\n  }\n\n  renderMode(mode) {\n    switch (mode) {\n      default:\n        return e(\"div\", {}, React.createElement(Button, {\n          label: \"Train with default dataset\",\n          onClick: this.test,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        }), React.createElement(Button, {\n          label: \"Predict with test dataset\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }), React.createElement(Button, {\n          label: \"Predict with pre trained model\",\n          onClick: this.predictTrainedModel,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }), React.createElement(Button, {\n          label: \"Download model\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }));\n\n      case \"custom\":\n        return e(\"p\", {}, \"custom goest here...\");\n    }\n  }\n\n  render() {\n    return e(\"div\", {\n      className: \"container\",\n      style: {\n        position: \"relative\",\n        top: 100\n      }\n    }, e(\"div\", {\n      className: \"row\"\n    }, e(\"div\", {\n      className: \"col-md-6\"\n    }, e(\"p\", null, \"Console\"), React.createElement(Console, {\n      console: this.state.console,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372\n      },\n      __self: this\n    }), React.createElement(Button, {\n      label: \"Clear\",\n      onClick: this.clearConsole,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    })), e(\"div\", {\n      className: \"col-md-6\"\n    }, e(\"p\", {}, \"Train\"), e(\"p\", null, \"Default Breast Cancer Dataset\"), e(\"div\", {\n      className: \"row\"\n    }, e(\"div\", {\n      className: \"col-md-4\"\n    }, e(\"p\", {}, \"Epochs\"), React.createElement(Input, {\n      placeholder: \"Enter here number of epochs\",\n      value: this.state.epochs,\n      updateValue: this.updateEpochs,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    })), e(\"div\", {\n      className: \"col-md-4\"\n    }, e(\"p\", {}, \"Batch Iterations\"), React.createElement(Input, {\n      placeholder: \"Enter here number of batchIterations\",\n      value: this.state.batchIterations,\n      updateValue: this.updatebatchIterations,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    })), e(\"div\", {\n      className: \"col-md-4\"\n    }, e(\"p\", {}, \"Learning rate\"), React.createElement(Input, {\n      placeholder: \"Learning rate\",\n      value: this.state.learningRate,\n      updateValue: this.updateLearningRate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407\n      },\n      __self: this\n    })), e(\"div\", {\n      className: \"col-md-6\"\n    }, React.createElement(RadioButton, {\n      label: \"Default dataset train\",\n      value: \"default\",\n      onModeSelection: this.trainingModeAction,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416\n      },\n      __self: this\n    })), e(\"div\", {\n      className: \"col-md-6\"\n    }, React.createElement(RadioButton, {\n      label: \"Custom dataset train\",\n      value: \"custom\",\n      onModeSelection: this.trainingModeAction,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425\n      },\n      __self: this\n    }))), this.renderMode(this.state.mode) // <ChartComponent\n    //   data={this.state.chartData.data}\n    //   title={this.state.chartData.title}\n    // />\n    )));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/acd/Documents/Projects/breast-cancer-ml/src/App.js"],"names":["React","tf","Console","Button","RadioButton","Input","data","e","createElement","modelStorage","loadLayersModel","App","Component","constructor","props","predictTrainedModel","xTest","tensor2d","length","yTest","correct","wrong","tidy","output","predict","predictions","dataSync","total","yTestData","console","log","map","value","index","fromTest","addConsoleValue","test","dataset","yTrain","row","id","push","diagnosis","xTrain","radius_mean","texture_mean","perimeter_mean","area_mean","smoothness_mean","compactness_mean","concavity_mean","concave_points_mean","symmetry_mean","fractal_dimension_mean","radius_se","texture_se","perimeter_se","area_se","smoothness_se","compactness_se","concavity_se","concave_points_se","symmetry_se","fractal_dimension_se","radius_worst","texture_worst","perimeter_worst","area_worst","smoothness_worst","compactness_worst","concavity_worst","concave_points_worst","symmetry_worst","fractal_dimension_worst","xTensorTrain","yTensorTrain","xTrain1","yTrain1","model","sequential","learningRate","state","optimizer","train","sgd","inputLayer","layers","dense","units","inputDim","activation","hiddenLayer","hiddenLayer2","hiddenLayer3","outputLayer","add","compile","loss","metrics","trainBatchCount","onIteration","batchSize","batchIterations","trainEpochs","epochs","validationSplit","totalNumBatches","Math","ceil","shape","trainBathcCount","valAcc","fit","validationData","callbacks","onEpochEnd","epoch","logs","acc","then","testResult","evaluate","testAccPercent","finalValAccPercent","toFixed","save","clearConsole","bind","trainingModeAction","updateEpochs","updateLearningRate","updatebatchIterations","mode","setState","date","Date","toLocaleTimeString","iteration","renderMode","render","className","style","position","top"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport Console from \"./Components/Console\";\nimport Button from \"./Components/Button\";\nimport RadioButton from \"./Components/RadioButton\";\nimport Input from \"./Components/Input\";\nimport data from \"./dataset\";\n\nconst e = React.createElement;\nconst modelStorage = async () => {\n  return await tf.loadLayersModel(\"localstorage://breast-cancer-model\");\n};\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.clearConsole = this.clearConsole.bind(this);\n    this.addConsoleValue = this.addConsoleValue.bind(this);\n    this.trainingModeAction = this.trainingModeAction.bind(this);\n    this.updateEpochs = this.updateEpochs.bind(this);\n    this.updateLearningRate = this.updateLearningRate.bind(this);\n    this.updatebatchIterations = this.updatebatchIterations.bind(this);\n    this.predictTrainedModel = this.predictTrainedModel.bind(this);\n    this.train = this.train.bind(this);\n    this.state = {\n      console: [],\n      epochs: 100,\n      learningRate: 1.5,\n      batchIterations:1,\n      mode: \"default\",\n    };\n  }\n\n  clearConsole() {\n    this.setState({\n      console: []\n    });\n  }\n\n  train() {\n    const date = new Date();\n    this.setState({\n      console: [\n        ...this.state.console,\n        \"[\" +\n          date.toLocaleTimeString() +\n          \"]:Epochs \" +\n          this.state.epochs +\n          \"Iter \" +\n          this.state.batchIterations\n      ]\n    });\n  }\n\n  updatebatchIterations(iteration) {\n    this.setState({\n      batchIterations: iteration\n    });\n  }\n  updateLearningRate(learningRate) {\n    this.setState({\n      learningRate: learningRate\n    });\n  }\n  updateEpochs(epoch) {\n    this.setState({\n      epochs: epoch\n    });\n  }\n\n  trainingModeAction(mode) {\n    this.setState({\n      mode: mode\n    });\n  }\n\n  addConsoleValue(value) {\n    const date = new Date();\n    this.setState({\n      console: [\n        ...this.state.console,\n        \"[\" + date.toLocaleTimeString() + \"] \" + value\n      ]\n    });\n  }\n\n  renderMode(mode) {\n    switch (mode) {\n      default:\n        return e(\n          \"div\",\n          {},\n          <Button label=\"Train with default dataset\" onClick={this.test} />,\n          <Button label=\"Predict with test dataset\" />,\n          <Button\n            label=\"Predict with pre trained model\"\n            onClick={this.predictTrainedModel}\n          />,\n          <Button label=\"Download model\" />\n        );\n      case \"custom\":\n        return e(\"p\", {}, \"custom goest here...\");\n    }\n  }\n  predictTrainedModel = async () => {\n\n    const xTest = tf.tensor2d(data.xTest, [data.xTest.length, 30]);\n    const yTest = tf.tensor2d(data.yTest, [data.yTest.length, 1]);\n    let correct = 0;\n    let wrong  = 0;\n    const modelStorage = await tf.loadLayersModel(\n      \"localstorage://breast-cancer-model\"\n    );\n\n    tf.tidy(() => {\n      const output = modelStorage.predict(xTest);\n\n      // const axis = 1;\n// const labels = Array.from(yTest.argMax(axis).dataSync());\n// const predictions = Array.from(output.argMax(axis).dataSync();\n      const predictions = output.dataSync();\n      let correct = 0;\n      let wrong = 0;\n      let total = 0;\n      // console.log(predictions);\n      // console.log('ytest',yTest.);\n\n      const yTestData = yTest.dataSync();\n      console.log('realytest',yTestData);\n      console.log('pred=d',predictions);\n      predictions.map((value,index)=>{\n        \n        total++;\n\n        console.log(value, yTestData[index]);\n\n        if(yTestData[index] === 1){\n          \n          // console.log('value=',value,'ytest=',ytestData)\n          const fromTest = value >= 0.5 ? 'Correct' : 'Wrong'\n          if(fromTest === 'Correct'){\n            correct++;\n          }\n          else{\n            wrong++;\n          }\n          this.addConsoleValue(`[${index}] = Malignant, Dataset Test = ${fromTest}`)\n        }\n        else {\n          \n          const fromTest = value <= 0.5 ? 'Correct' : 'Wrong';\n          if(fromTest === 'Correct'){\n            correct++;\n          }\n          else{\n            wrong++;\n          }\n          this.addConsoleValue(`[${index}] = Benign, Dataset Test= ${fromTest} `)\n        }\n      })\n\n      this.addConsoleValue(`Correct=${correct}, Wrong = ${wrong} Total=${total}`)\n        // console.log('labels',labels,'predictions',predictions);\n    \n    }); \n\n  };\n  test = async () => {\n    this.addConsoleValue(\"Training...\");\n\n    const dataset = data.dataset;\n    const yTrain = [];\n    dataset.map(row => {\n      //We do not need ID so we will delete ID from array\n      delete row.id;\n      //test data using target M=1, B =0;\n      yTrain.push([row.diagnosis === \"M\" ? 1 : 0]);\n      delete row.diagnosis;\n      return row;\n    });\n    const xTrain = dataset.map(row => [\n      row.radius_mean,\n      row.texture_mean,\n      row.perimeter_mean,\n      row.area_mean,\n      row.smoothness_mean,\n      row.compactness_mean,\n      row.concavity_mean,\n      row.concave_points_mean,\n      row.symmetry_mean,\n      row.fractal_dimension_mean,\n      row.radius_se,\n      row.texture_se,\n      row.perimeter_se,\n      row.area_se,\n      row.smoothness_se,\n      row.compactness_se,\n      row.concavity_se,\n      row.concave_points_se,\n      row.symmetry_se,\n      row.fractal_dimension_se,\n      row.radius_worst,\n      row.texture_worst,\n      row.perimeter_worst,\n      row.area_worst,\n      row.smoothness_worst,\n      row.compactness_worst,\n      row.concavity_worst,\n      row.concave_points_worst,\n      row.symmetry_worst,\n      row.fractal_dimension_worst\n    ]);\n\n    console.log(xTrain);\n    const xTensorTrain = tf.tensor2d(xTrain, [xTrain.length, 30]);\n    const yTensorTrain = tf.tensor2d(yTrain, [yTrain.length, 1]);\n\n    const xTrain1 = data.xTrain;\n    const yTrain1 = data.yTrain;\n\n    //Create model as sequential\n\n    const model = tf.sequential();\n    const learningRate = this.state.learningRate;\n    const optimizer = tf.train.sgd(learningRate);\n    const inputLayer = tf.layers.dense({\n      units: 16,\n      inputDim: 30,\n      activation: \"relu\"\n    });\n\n    const hiddenLayer = tf.layers.dense({\n      units: 8,\n      activation: \"relu\"\n    });\n\n    const hiddenLayer2 = tf.layers.dense({\n      units: 8,\n      activation: \"relu\"\n    });\n    const hiddenLayer3 = tf.layers.dense({\n      units: 8,\n      activation: \"relu\"\n    });\n\n    const outputLayer = tf.layers.dense({\n      units: 1,\n      activation: \"sigmoid\"\n    });\n\n    model.add(inputLayer);\n    model.add(hiddenLayer);\n    model.add(hiddenLayer2);\n    // model.add(hiddenLayer3);\n    model.add(outputLayer);\n\n    model.compile({\n      optimizer: \"rmsprop\", //learning rate\n      loss: \"meanSquaredError\",\n      metrics: [\"accuracy\"]\n    });\n\n    const xTest = tf.tensor2d(data.xTest, [data.xTest.length, 30]);\n    const yTest = tf.tensor2d(data.yTest, [data.yTest.length, 1]);\n    let trainBatchCount = 0;\n    let onIteration = 0;\n    const batchSize = this.state.batchIterations || 0;\n    const trainEpochs = this.state.epochs || 0;\n    const validationSplit = 0.15; //learning rate\n    const totalNumBatches = Math.ceil(xTensorTrain.shape[0] * (1 - validationSplit) / batchSize) *trainEpochs;\n    let trainBathcCount = 0;\n    let valAcc;\n    await model\n      .fit(xTensorTrain, yTensorTrain, {\n        batchSize: batchSize,\n        epochs: trainEpochs,\n        validationData: [xTest, yTest],\n        callbacks: {\n          onEpochEnd: async (epoch, logs) => {\n            valAcc = logs.acc;\n            this.addConsoleValue(\n              `Epoch =${epoch} Loss=${logs.loss}  Acc=${logs.acc}`\n            );\n          }\n        }\n      })\n      .then(async () => {\n        const testResult = model.evaluate(xTensorTrain, yTensorTrain);\n        // testResult.print();\n        // console.table(testResult);\n\n        const testAccPercent = testResult[0].dataSync()[0] * 100;\n        const finalValAccPercent = valAcc * 100;\n        this.addConsoleValue(\n          `Final validation accuracy: ${finalValAccPercent.toFixed(1)}%; ` +\n            `Final test accuracy: ${testAccPercent.toFixed(1)}%`\n        );\n\n        //  const ypred = model.predict(xTest).print();\n        //  console.log  (ypred)\n\n    //     tf.tidy(() => {\n    //       const output = model.predict(xTest);\n\n    //       const axis = 1;\n    // const labels = Array.from(yTest.argMax(axis).dataSync());\n    // const predictions = Array.from(output.argMax(axis).dataSync());\n    //         console.log('labels',labels,'predictions',predictions);\n        \n    //     });   \n\n        await model.save(\"localstorage://breast-cancer-model\");\n\n        console.log(\"cancer saved\");\n\n        //  const predictions = Array.from(output.argMax(1).dataSync());\n        //  const\n        //  predictions.map((image,index) => {\n\n        //  });\n\n        //  console.table(output);\n        //  console.table(predictions);\n        // const xData = xTest.dataSync();\n        // const yTrue = yTest.argMax(-1).dataSync();\n        // const predictOut = model.predict(xTest);\n        // const yPred = predictOut.argMax(1);\n\n        // yPred.map((predX,index) =>{\n        //   if(predX == 1){\n        //     this.addConsoleValue(`${index} = Maglim`)\n        //   }\n        //   else if (predX === 0){\n        //     this.addConsoleValue(`${index} = Benign`)\n        //   }\n        //   else{\n        //     this.addConsoleValue(`${index} = Erroare`)\n        //   }\n        // })\n\n        // console.log(xData, yTrue, yPred.dataSync(), predictOut.dataSync());\n      });\n    // console.log(`Iteration ${i}: ${res.history.loss}`);\n    // }\n\n    console.log(\"finisheeeed,predicting\");\n    // model.predict(xTest,yTest)\n    // await model.save('downloads://my-model');\n\n    // const json = fetch('./trained_alex.json');\n    // // const model2 = await tf.loadLayersModel('file:trained_alex.json');\n    // console.log('model2',json);\n  };\n\n  render() {\n    return e(\n      \"div\",\n      {\n        className: \"container\",\n        style: {\n          position: \"relative\",\n          top: 100\n        }\n      },\n      e(\n        \"div\",\n        { className: \"row\" },\n        e(\n          \"div\",\n          { className: \"col-md-6\" },\n          e(\"p\", null, \"Console\"),\n          <Console console={this.state.console} />,\n          <Button label=\"Clear\" onClick={this.clearConsole} />\n        ),\n        e(\n          \"div\",\n          { className: \"col-md-6\" },\n          e(\"p\", {}, \"Train\"),\n          e(\"p\", null, \"Default Breast Cancer Dataset\"),\n          e(\n            \"div\",\n            { className: \"row\" },\n            e(\n              \"div\",\n              { className: \"col-md-4\" },\n              e(\"p\", {}, \"Epochs\"),\n              <Input\n                placeholder=\"Enter here number of epochs\"\n                value={this.state.epochs}\n                updateValue={this.updateEpochs}\n              />\n            ),\n            e(\n              \"div\",\n              { className: \"col-md-4\" },\n              e(\"p\", {}, \"Batch Iterations\"),\n              <Input\n                placeholder=\"Enter here number of batchIterations\"\n                value={this.state.batchIterations}\n                updateValue={this.updatebatchIterations}\n              />\n            ),\n            e(\n              \"div\",\n              { className: \"col-md-4\" },\n              e(\"p\", {}, \"Learning rate\"),\n              <Input\n                placeholder=\"Learning rate\"\n                value={this.state.learningRate}\n                updateValue={this.updateLearningRate}\n              />\n            ),\n            e(\n              \"div\",\n              { className: \"col-md-6\" },\n              <RadioButton\n                label=\"Default dataset train\"\n                value=\"default\"\n                onModeSelection={this.trainingModeAction}\n              />\n            ),\n            e(\n              \"div\",\n              { className: \"col-md-6\" },\n              <RadioButton\n                label=\"Custom dataset train\"\n                value=\"custom\"\n                onModeSelection={this.trainingModeAction}\n              />\n            )\n          ),\n          this.renderMode(this.state.mode),\n          // <ChartComponent\n          //   data={this.state.chartData.data}\n          //   title={this.state.chartData.title}\n          // />\n       \n        )\n      )\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}