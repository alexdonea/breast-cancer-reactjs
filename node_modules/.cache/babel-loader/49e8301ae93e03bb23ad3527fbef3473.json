{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * IOHandlers related to files, such as browser-triggered file downloads,\n * user-selected files in browser.\n */\n\nvar environment_1 = require(\"../environment\");\n\nvar io_utils_1 = require(\"./io_utils\");\n\nvar router_registry_1 = require(\"./router_registry\");\n\nvar DEFAULT_FILE_NAME_PREFIX = 'model';\nvar DEFAULT_JSON_EXTENSION_NAME = '.json';\nvar DEFAULT_WEIGHT_DATA_EXTENSION_NAME = '.weights.bin';\n\nfunction defer(f) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve);\n  }).then(f);\n}\n\nvar BrowserDownloads =\n/** @class */\nfunction () {\n  function BrowserDownloads(fileNamePrefix) {\n    if (!environment_1.env().getBool('IS_BROWSER')) {\n      // TODO(cais): Provide info on what IOHandlers are available under the\n      //   current environment.\n      throw new Error('browserDownloads() cannot proceed because the current environment ' + 'is not a browser.');\n    }\n\n    if (fileNamePrefix.startsWith(BrowserDownloads.URL_SCHEME)) {\n      fileNamePrefix = fileNamePrefix.slice(BrowserDownloads.URL_SCHEME.length);\n    }\n\n    if (fileNamePrefix == null || fileNamePrefix.length === 0) {\n      fileNamePrefix = DEFAULT_FILE_NAME_PREFIX;\n    }\n\n    this.modelTopologyFileName = fileNamePrefix + DEFAULT_JSON_EXTENSION_NAME;\n    this.weightDataFileName = fileNamePrefix + DEFAULT_WEIGHT_DATA_EXTENSION_NAME;\n  }\n\n  BrowserDownloads.prototype.save = function (modelArtifacts) {\n    return __awaiter(this, void 0, void 0, function () {\n      var weightsURL, weightsManifest, modelTopologyAndWeightManifest, modelTopologyAndWeightManifestURL, jsonAnchor_1, weightDataAnchor_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (typeof document === 'undefined') {\n              throw new Error('Browser downloads are not supported in ' + 'this environment since `document` is not present');\n            }\n\n            weightsURL = window.URL.createObjectURL(new Blob([modelArtifacts.weightData], {\n              type: 'application/octet-stream'\n            }));\n            if (!(modelArtifacts.modelTopology instanceof ArrayBuffer)) return [3\n            /*break*/\n            , 1];\n            throw new Error('BrowserDownloads.save() does not support saving model topology ' + 'in binary formats yet.');\n\n          case 1:\n            weightsManifest = [{\n              paths: ['./' + this.weightDataFileName],\n              weights: modelArtifacts.weightSpecs\n            }];\n            modelTopologyAndWeightManifest = {\n              modelTopology: modelArtifacts.modelTopology,\n              format: modelArtifacts.format,\n              generatedBy: modelArtifacts.generatedBy,\n              convertedBy: modelArtifacts.convertedBy,\n              weightsManifest: weightsManifest\n            };\n            modelTopologyAndWeightManifestURL = window.URL.createObjectURL(new Blob([JSON.stringify(modelTopologyAndWeightManifest)], {\n              type: 'application/json'\n            }));\n            jsonAnchor_1 = this.jsonAnchor == null ? document.createElement('a') : this.jsonAnchor;\n            jsonAnchor_1.download = this.modelTopologyFileName;\n            jsonAnchor_1.href = modelTopologyAndWeightManifestURL; // Trigger downloads by evoking a click event on the download anchors.\n            // When multiple downloads are started synchronously, Firefox will only\n            // save the last one.\n\n            return [4\n            /*yield*/\n            , defer(function () {\n              return jsonAnchor_1.dispatchEvent(new MouseEvent('click'));\n            })];\n\n          case 2:\n            // Trigger downloads by evoking a click event on the download anchors.\n            // When multiple downloads are started synchronously, Firefox will only\n            // save the last one.\n            _a.sent();\n\n            if (!(modelArtifacts.weightData != null)) return [3\n            /*break*/\n            , 4];\n            weightDataAnchor_1 = this.weightDataAnchor == null ? document.createElement('a') : this.weightDataAnchor;\n            weightDataAnchor_1.download = this.weightDataFileName;\n            weightDataAnchor_1.href = weightsURL;\n            return [4\n            /*yield*/\n            , defer(function () {\n              return weightDataAnchor_1.dispatchEvent(new MouseEvent('click'));\n            })];\n\n          case 3:\n            _a.sent();\n\n            _a.label = 4;\n\n          case 4:\n            return [2\n            /*return*/\n            , {\n              modelArtifactsInfo: io_utils_1.getModelArtifactsInfoForJSON(modelArtifacts)\n            }];\n        }\n      });\n    });\n  };\n\n  BrowserDownloads.URL_SCHEME = 'downloads://';\n  return BrowserDownloads;\n}();\n\nexports.BrowserDownloads = BrowserDownloads;\n\nvar BrowserFiles =\n/** @class */\nfunction () {\n  function BrowserFiles(files) {\n    if (files == null || files.length < 1) {\n      throw new Error(\"When calling browserFiles, at least 1 file is required, \" + (\"but received \" + files));\n    }\n\n    this.files = files;\n  }\n\n  BrowserFiles.prototype.load = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var jsonFile, weightFiles;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        jsonFile = this.files[0];\n        weightFiles = this.files.slice(1);\n        return [2\n        /*return*/\n        , new Promise(function (resolve, reject) {\n          var jsonReader = new FileReader();\n\n          jsonReader.onload = function (event) {\n            // tslint:disable-next-line:no-any\n            var modelJSON = JSON.parse(event.target.result);\n            var modelTopology = modelJSON.modelTopology;\n\n            if (modelTopology == null) {\n              reject(new Error(\"modelTopology field is missing from file \" + jsonFile.name));\n              return;\n            }\n\n            if (weightFiles.length === 0) {\n              resolve({\n                modelTopology: modelTopology\n              });\n            }\n\n            var weightsManifest = modelJSON.weightsManifest;\n\n            if (weightsManifest == null) {\n              reject(new Error(\"weightManifest field is missing from file \" + jsonFile.name));\n              return;\n            }\n\n            var pathToFile;\n\n            try {\n              pathToFile = _this.checkManifestAndWeightFiles(weightsManifest, weightFiles);\n            } catch (err) {\n              reject(err);\n              return;\n            }\n\n            var weightSpecs = [];\n            var paths = [];\n            var perFileBuffers = [];\n            weightsManifest.forEach(function (weightsGroup) {\n              weightsGroup.paths.forEach(function (path) {\n                paths.push(path);\n                perFileBuffers.push(null);\n              });\n              weightSpecs.push.apply(weightSpecs, weightsGroup.weights);\n            });\n            weightsManifest.forEach(function (weightsGroup) {\n              weightsGroup.paths.forEach(function (path) {\n                var weightFileReader = new FileReader();\n\n                weightFileReader.onload = function (event) {\n                  // tslint:disable-next-line:no-any\n                  var weightData = event.target.result;\n                  var index = paths.indexOf(path);\n                  perFileBuffers[index] = weightData;\n\n                  if (perFileBuffers.indexOf(null) === -1) {\n                    resolve({\n                      modelTopology: modelTopology,\n                      weightSpecs: weightSpecs,\n                      weightData: io_utils_1.concatenateArrayBuffers(perFileBuffers)\n                    });\n                  }\n                };\n\n                weightFileReader.onerror = function (error) {\n                  return reject(\"Failed to weights data from file of path '\" + path + \"'.\");\n                };\n\n                weightFileReader.readAsArrayBuffer(pathToFile[path]);\n              });\n            });\n          };\n\n          jsonReader.onerror = function (error) {\n            return reject(\"Failed to read model topology and weights manifest JSON \" + (\"from file '\" + jsonFile.name + \"'. BrowserFiles supports loading \") + \"Keras-style tf.Model artifacts only.\");\n          };\n\n          jsonReader.readAsText(jsonFile);\n        })];\n      });\n    });\n  };\n  /**\n   * Check the compatibility between weights manifest and weight files.\n   */\n\n\n  BrowserFiles.prototype.checkManifestAndWeightFiles = function (manifest, files) {\n    var basenames = [];\n    var fileNames = files.map(function (file) {\n      return io_utils_1.basename(file.name);\n    });\n    var pathToFile = {};\n\n    for (var _i = 0, manifest_1 = manifest; _i < manifest_1.length; _i++) {\n      var group = manifest_1[_i];\n      group.paths.forEach(function (path) {\n        var pathBasename = io_utils_1.basename(path);\n\n        if (basenames.indexOf(pathBasename) !== -1) {\n          throw new Error(\"Duplicate file basename found in weights manifest: \" + (\"'\" + pathBasename + \"'\"));\n        }\n\n        basenames.push(pathBasename);\n\n        if (fileNames.indexOf(pathBasename) === -1) {\n          throw new Error(\"Weight file with basename '\" + pathBasename + \"' is not provided.\");\n        } else {\n          pathToFile[path] = files[fileNames.indexOf(pathBasename)];\n        }\n      });\n    }\n\n    if (basenames.length !== files.length) {\n      throw new Error(\"Mismatch in the number of files in weights manifest \" + (\"(\" + basenames.length + \") and the number of weight files provided \") + (\"(\" + files.length + \").\"));\n    }\n\n    return pathToFile;\n  };\n\n  return BrowserFiles;\n}();\n\nexports.browserDownloadsRouter = function (url) {\n  if (!environment_1.env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserDownloads.URL_SCHEME)) {\n      return browserDownloads(url.slice(BrowserDownloads.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\n\nrouter_registry_1.IORouterRegistry.registerSaveRouter(exports.browserDownloadsRouter);\n/**\n * Creates an IOHandler that triggers file downloads from the browser.\n *\n * The returned `IOHandler` instance can be used as model exporting methods such\n * as `tf.Model.save` and supports only saving.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * const saveResult = await model.save('downloads://mymodel');\n * // This will trigger downloading of two files:\n * //   'mymodel.json' and 'mymodel.weights.bin'.\n * console.log(saveResult);\n * ```\n *\n * @param fileNamePrefix Prefix name of the files to be downloaded. For use with\n *   `tf.Model`, `fileNamePrefix` should follow either of the following two\n *   formats:\n *   1. `null` or `undefined`, in which case the default file\n *      names will be used:\n *      - 'model.json' for the JSON file containing the model topology and\n *        weights manifest.\n *      - 'model.weights.bin' for the binary file containing the binary weight\n *        values.\n *   2. A single string or an Array of a single string, as the file name prefix.\n *      For example, if `'foo'` is provided, the downloaded JSON\n *      file and binary weights file will be named 'foo.json' and\n *      'foo.weights.bin', respectively.\n * @param config Additional configuration for triggering downloads.\n * @returns An instance of `BrowserDownloads` `IOHandler`.\n */\n\n/**\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\n\nfunction browserDownloads(fileNamePrefix) {\n  if (fileNamePrefix === void 0) {\n    fileNamePrefix = 'model';\n  }\n\n  return new BrowserDownloads(fileNamePrefix);\n}\n\nexports.browserDownloads = browserDownloads;\n/**\n * Creates an IOHandler that loads model artifacts from user-selected files.\n *\n * This method can be used for loading from files such as user-selected files\n * in the browser.\n * When used in conjunction with `tf.loadLayersModel`, an instance of\n * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.\n *\n * ```js\n * // Note: This code snippet won't run properly without the actual file input\n * //   elements in the HTML DOM.\n *\n * // Suppose there are two HTML file input (`<input type=\"file\" ...>`)\n * // elements.\n * const uploadJSONInput = document.getElementById('upload-json');\n * const uploadWeightsInput = document.getElementById('upload-weights');\n * const model = await tf.loadLayersModel(tf.io.browserFiles(\n *     [uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\n * ```\n *\n * @param files `File`s to load from. Currently, this function supports only\n *   loading from files that contain Keras-style models (i.e., `tf.Model`s), for\n *   which an `Array` of `File`s is expected (in that order):\n *   - A JSON file containing the model topology and weight manifest.\n *   - Optionally, One or more binary files containing the binary weights.\n *     These files must have names that match the paths in the `weightsManifest`\n *     contained by the aforementioned JSON file, or errors will be thrown\n *     during loading. These weights files have the same format as the ones\n *     generated by `tensorflowjs_converter` that comes with the `tensorflowjs`\n *     Python PIP package. If no weights files are provided, only the model\n *     topology will be loaded from the JSON file above.\n * @returns An instance of `Files` `IOHandler`.\n */\n\n/**\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\n\nfunction browserFiles(files) {\n  return new BrowserFiles(files);\n}\n\nexports.browserFiles = browserFiles;","map":null,"metadata":{},"sourceType":"script"}