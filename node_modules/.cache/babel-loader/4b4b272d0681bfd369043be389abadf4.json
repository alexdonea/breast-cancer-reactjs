{"ast":null,"code":"var _jsxFileName = \"/Users/acd/Documents/Projects/breast-cancer-ml/src/App.js\";\nimport React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport Console from \"./Components/Console\";\nimport Button from \"./Components/Button\";\nimport RadioButton from \"./Components/RadioButton\";\nimport Input from \"./Components/Input\";\nimport { dataset, xTest, yTest } from \"./Dataset/datasetJson\";\nimport { filterData } from \"./Dataset\";\nconst e = React.createElement;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.predictTrainedModel = async () => {\n      const xTestData = tf.tensor2d(xTest, [xTest.length, xTest[0].length]);\n      const yTestData = tf.tensor2d(yTest, [yTest.length, yTest[0].length]);\n      const modelStorage = await tf.loadLayersModel(\"localstorage://breast-cancer-model\");\n      tf.tidy(() => {\n        const output = modelStorage.predict(xTestData);\n        const predictions = output.dataSync();\n        let correct = 0;\n        let wrong = 0;\n        let total = 0;\n        const yTestValues = yTestData.dataSync();\n        predictions.forEach((value, index) => {\n          total++;\n          console.log(value, yTestValues[index]);\n\n          if (yTestValues[index] === 1) {\n            let result = \"Malignant\";\n            console.log(value < 0.5);\n\n            if (value > 0.5) {\n              result = \"Malignant\";\n              console.log(\"here????\");\n              correct++;\n            } else {\n              result = \"Benign\";\n              wrong++;\n            }\n\n            this.addConsoleValue(\"Test data [\".concat(index, \"] Predict = Malignant,  Test diagnosis = \").concat(result));\n          } else if (yTestValues[index] === 0) {\n            let result = \"Benign\";\n\n            if (value < 0.5) {\n              result = \"Benign\";\n              console.log(\"here?2???\");\n              correct++;\n            } else {\n              result = \"Malignant\";\n              wrong++;\n            }\n\n            this.addConsoleValue(\"Test data [\".concat(index, \"] Predict = Benign,  Test diagnosis = \").concat(result));\n          }\n        });\n        this.addConsoleValue(\"Correct=\".concat(correct, \", Wrong = \").concat(wrong, \" Total=\").concat(total));\n      });\n    };\n\n    this.trainModel = async () => {\n      this.addConsoleValue(\"Start training...\");\n      const data = filterData(dataset);\n      const xTensorTrain = tf.tensor2d(data.xTrain, [data.xTrain.length, data.xTrain[0].length]);\n      const yTensorTrain = tf.tensor2d(data.yTrain, [data.yTrain.length, data.yTrain[0].length]); //Create model as sequential\n\n      const model = tf.sequential(); // const learningRate = parseFloat(this.state.learningRate) || 0;\n\n      const batchSize = parseInt(this.state.batchIterations) || 0;\n      const trainEpochs = parseInt(this.state.epochs) || 0; // const optimizer = tf.train.sgd(learningRate);\n\n      const inputLayer = tf.layers.dense({\n        units: 30,\n        inputDim: 30,\n        activation: \"relu\"\n      });\n      const hiddenLayer = tf.layers.dense({\n        units: 30,\n        activation: \"relu\"\n      });\n      const hiddenLayer2 = tf.layers.dense({\n        units: 30,\n        activation: \"relu\"\n      });\n      const outputLayer = tf.layers.dense({\n        units: 1,\n        activation: \"sigmoid\"\n      });\n      model.add(inputLayer);\n      model.add(hiddenLayer);\n      model.add(hiddenLayer2);\n      model.add(outputLayer);\n      model.compile({\n        optimizer: \"rmsprop\",\n        loss: \"meanSquaredError\",\n        metrics: [\"accuracy\"]\n      });\n      let valAcc;\n      await model.fit(xTensorTrain, yTensorTrain, {\n        batchSize: batchSize,\n        epochs: trainEpochs,\n        callbacks: {\n          onEpochEnd: async (epoch, logs) => {\n            valAcc = logs.acc;\n            this.addConsoleValue(\"Epoch[\".concat(epoch, \"] Loss:\").concat(logs.loss, \"  Acc:\").concat(logs.acc));\n          }\n        }\n      }).then(async () => {\n        const testResult = model.evaluate(xTensorTrain, yTensorTrain);\n        const testAccPercent = testResult[0].dataSync()[0] * 100;\n        const finalValAccPercent = valAcc * 100;\n        this.addConsoleValue(\"Final validation accuracy: \".concat(finalValAccPercent.toFixed(1), \"%; \") + \"Final test accuracy: \".concat(testAccPercent.toFixed(1), \"%\"));\n        await model.save(\"localstorage://breast-cancer-model\");\n        this.addConsoleValue(\"Model saved to LocalStorage\");\n      });\n    };\n\n    this.clearConsole = this.clearConsole.bind(this);\n    this.addConsoleValue = this.addConsoleValue.bind(this);\n    this.trainingModeAction = this.trainingModeAction.bind(this);\n    this.updateEpochs = this.updateEpochs.bind(this); // this.updateLearningRate = this.updateLearningRate.bind(this);\n\n    this.updatebatchIterations = this.updatebatchIterations.bind(this);\n    this.predictTrainedModel = this.predictTrainedModel.bind(this);\n    this.train = this.train.bind(this);\n    this.state = {\n      console: [],\n      epochs: 50,\n      // learningRate: 1.5,\n      batchIterations: 1,\n      mode: \"default\"\n    };\n  }\n\n  clearConsole() {\n    this.setState({\n      console: []\n    });\n  }\n\n  train() {\n    const date = new Date();\n    this.setState({\n      console: [...this.state.console, \"[\" + date.toLocaleTimeString() + \"]:Epochs \" + this.state.epochs + \"Iter \" + this.state.batchIterations]\n    });\n  }\n\n  updatebatchIterations(iteration) {\n    this.setState({\n      batchIterations: iteration\n    });\n  }\n\n  updateLearningRate(learningRate) {\n    this.setState({\n      learningRate: learningRate\n    });\n  }\n\n  updateEpochs(epoch) {\n    this.setState({\n      epochs: epoch\n    });\n  }\n\n  trainingModeAction(mode) {\n    this.setState({\n      mode: mode\n    });\n  }\n\n  addConsoleValue(value) {\n    const date = new Date();\n    this.setState({\n      console: [...this.state.console, \"[\" + date.toLocaleTimeString() + \"] \" + value]\n    });\n  }\n\n  renderMode(mode) {\n    switch (mode) {\n      default:\n        return e(\"div\", {}, React.createElement(Button, {\n          label: \"Train\",\n          onClick: this.trainModel,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }), React.createElement(Button, {\n          label: \"Predict\",\n          onClick: this.predictTrainedModel,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        }));\n\n      case \"custom\":\n        return e(\"p\", {}, \"custom goest here...\");\n    }\n  }\n\n  render() {\n    return e(\"div\", {\n      className: \"container\",\n      style: {\n        position: \"relative\",\n        top: 100\n      }\n    }, e(\"div\", {\n      className: \"row\"\n    }, e(\"div\", {\n      className: \"col-md-6\"\n    }, e(\"p\", null, \"Console\"), React.createElement(Console, {\n      console: this.state.console,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }), React.createElement(Button, {\n      label: \"Clear\",\n      onClick: this.clearConsole,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    })), e(\"div\", {\n      className: \"col-md-6\"\n    }, e(\"p\", {}, \"Train\"), e(\"p\", null, \"Default Breast Cancer Dataset\"), e(\"div\", {\n      className: \"row\"\n    }, e(\"div\", {\n      className: \"col-md-6\"\n    }, e(\"p\", {}, \"Epochs\"), React.createElement(Input, {\n      placeholder: \"Enter here number of epochs\",\n      value: this.state.epochs,\n      updateValue: this.updateEpochs,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    })), e(\"div\", {\n      className: \"col-md-6\"\n    }, e(\"p\", {}, \"Batch Iterations\"), React.createElement(Input, {\n      placeholder: \"Enter here number of batchIterations\",\n      value: this.state.batchIterations,\n      updateValue: this.updatebatchIterations,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    })), // e(\n    //   \"div\",\n    //   { className: \"col-md-4\" },\n    //   e(\"p\", {}, \"Learning rate\"),\n    //   <Input\n    //     placeholder=\"Learning rate\"\n    //     value={this.state.learningRate}\n    //     updateValue={this.updateLearningRate}\n    //   />\n    // ),\n    e(\"div\", {\n      className: \"col-md-6\"\n    }, React.createElement(RadioButton, {\n      label: \"Default dataset train\",\n      value: \"default\",\n      onModeSelection: this.trainingModeAction,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    })) // e(\n    //   \"div\",\n    //   { className: \"col-md-6\" },\n    //   <RadioButton\n    //     label=\"Custom dataset train\"\n    //     value=\"custom\"\n    //     onModeSelection={this.trainingModeAction}\n    //   />\n    // )\n    ), this.renderMode(this.state.mode))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/acd/Documents/Projects/breast-cancer-ml/src/App.js"],"names":["React","tf","Console","Button","RadioButton","Input","dataset","xTest","yTest","filterData","e","createElement","App","Component","constructor","props","predictTrainedModel","xTestData","tensor2d","length","yTestData","modelStorage","loadLayersModel","tidy","output","predict","predictions","dataSync","correct","wrong","total","yTestValues","forEach","value","index","console","log","result","addConsoleValue","trainModel","data","xTensorTrain","xTrain","yTensorTrain","yTrain","model","sequential","batchSize","parseInt","state","batchIterations","trainEpochs","epochs","inputLayer","layers","dense","units","inputDim","activation","hiddenLayer","hiddenLayer2","outputLayer","add","compile","optimizer","loss","metrics","valAcc","fit","callbacks","onEpochEnd","epoch","logs","acc","then","testResult","evaluate","testAccPercent","finalValAccPercent","toFixed","save","clearConsole","bind","trainingModeAction","updateEpochs","updatebatchIterations","train","mode","setState","date","Date","toLocaleTimeString","iteration","updateLearningRate","learningRate","renderMode","render","className","style","position","top"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport Console from \"./Components/Console\";\nimport Button from \"./Components/Button\";\nimport RadioButton from \"./Components/RadioButton\";\nimport Input from \"./Components/Input\";\nimport { dataset, xTest, yTest } from \"./Dataset/datasetJson\";\nimport { filterData } from \"./Dataset\";\n\nconst e = React.createElement;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.clearConsole = this.clearConsole.bind(this);\n    this.addConsoleValue = this.addConsoleValue.bind(this);\n    this.trainingModeAction = this.trainingModeAction.bind(this);\n    this.updateEpochs = this.updateEpochs.bind(this);\n    // this.updateLearningRate = this.updateLearningRate.bind(this);\n    this.updatebatchIterations = this.updatebatchIterations.bind(this);\n    this.predictTrainedModel = this.predictTrainedModel.bind(this);\n    this.train = this.train.bind(this);\n    this.state = {\n      console: [],\n      epochs: 50,\n      // learningRate: 1.5,\n      batchIterations: 1,\n      mode: \"default\"\n    };\n  }\n\n  clearConsole() {\n    this.setState({\n      console: []\n    });\n  }\n\n  train() {\n    const date = new Date();\n    this.setState({\n      console: [\n        ...this.state.console,\n        \"[\" +\n          date.toLocaleTimeString() +\n          \"]:Epochs \" +\n          this.state.epochs +\n          \"Iter \" +\n          this.state.batchIterations\n      ]\n    });\n  }\n\n  updatebatchIterations(iteration) {\n    this.setState({\n      batchIterations: iteration\n    });\n  }\n  updateLearningRate(learningRate) {\n    this.setState({\n      learningRate: learningRate\n    });\n  }\n  updateEpochs(epoch) {\n    this.setState({\n      epochs: epoch\n    });\n  }\n\n  trainingModeAction(mode) {\n    this.setState({\n      mode: mode\n    });\n  }\n\n  addConsoleValue(value) {\n    const date = new Date();\n    this.setState({\n      console: [\n        ...this.state.console,\n        \"[\" + date.toLocaleTimeString() + \"] \" + value\n      ]\n    });\n  }\n\n  renderMode(mode) {\n    switch (mode) {\n      default:\n        return e(\n          \"div\",\n          {},\n          <Button label=\"Train\" onClick={this.trainModel} />,\n          <Button label=\"Predict\" onClick={this.predictTrainedModel} />\n        );\n      case \"custom\":\n        return e(\"p\", {}, \"custom goest here...\");\n    }\n  }\n  predictTrainedModel = async () => {\n    const xTestData = tf.tensor2d(xTest, [xTest.length, xTest[0].length]);\n    const yTestData = tf.tensor2d(yTest, [yTest.length, yTest[0].length]);\n    const modelStorage = await tf.loadLayersModel(\n      \"localstorage://breast-cancer-model\"\n    );\n    tf.tidy(() => {\n      const output = modelStorage.predict(xTestData);\n      const predictions = output.dataSync();\n      let correct = 0;\n      let wrong = 0;\n      let total = 0;\n      const yTestValues = yTestData.dataSync();\n      predictions.forEach((value, index) => {\n\n        total++;\n        console.log(value,yTestValues[index]);\n        if (yTestValues[index] === 1 ) {\n          let result = \"Malignant\";\n          console.log(value < 0.5);\n          if (value > 0.5) {\n            result = \"Malignant\";\n            console.log(\"here????\");\n            correct++;\n          } else {\n            result = \"Benign\";\n            wrong++;\n          }\n          this.addConsoleValue(\n            `Test data [${index}] Predict = Malignant,  Test diagnosis = ${result}`\n          );\n        } else if (yTestValues[index] === 0) {\n          let result = \"Benign\";\n          if (value < 0.5) {\n            result = \"Benign\";\n            console.log(\"here?2???\");\n            correct++;\n          } else {\n            result = \"Malignant\";\n            wrong++;\n          }\n          this.addConsoleValue(\n            `Test data [${index}] Predict = Benign,  Test diagnosis = ${result}`\n          );\n        }\n      });\n      this.addConsoleValue(\n        `Correct=${correct}, Wrong = ${wrong} Total=${total}`\n      );\n    });\n  };\n  trainModel = async () => {\n    this.addConsoleValue(\"Start training...\");\n\n    const data = filterData(dataset);\n\n    const xTensorTrain = tf.tensor2d(data.xTrain, [\n      data.xTrain.length,\n      data.xTrain[0].length\n    ]);\n    const yTensorTrain = tf.tensor2d(data.yTrain, [\n      data.yTrain.length,\n      data.yTrain[0].length\n    ]);\n\n    //Create model as sequential\n\n    const model = tf.sequential();\n    // const learningRate = parseFloat(this.state.learningRate) || 0;\n    const batchSize = parseInt(this.state.batchIterations) || 0;\n    const trainEpochs = parseInt(this.state.epochs) || 0;\n\n    // const optimizer = tf.train.sgd(learningRate);\n\n    const inputLayer = tf.layers.dense({\n      units: 30,\n      inputDim: 30,\n      activation: \"relu\"\n    });\n\n    const hiddenLayer = tf.layers.dense({\n      units: 30,\n      activation: \"relu\"\n    });\n\n    const hiddenLayer2 = tf.layers.dense({\n      units: 30,\n      activation: \"relu\"\n    });\n    const outputLayer = tf.layers.dense({\n      units: 1,\n      activation: \"sigmoid\"\n    });\n\n    model.add(inputLayer);\n    model.add(hiddenLayer);\n    model.add(hiddenLayer2);\n    model.add(outputLayer);\n\n    model.compile({\n      optimizer: \"rmsprop\",\n      loss: \"meanSquaredError\",\n      metrics: [\"accuracy\"]\n    });\n\n    let valAcc;\n    await model\n      .fit(xTensorTrain, yTensorTrain, {\n        batchSize: batchSize,\n        epochs: trainEpochs,\n        callbacks: {\n          onEpochEnd: async (epoch, logs) => {\n            valAcc = logs.acc;\n            this.addConsoleValue(\n              `Epoch[${epoch}] Loss:${logs.loss}  Acc:${logs.acc}`\n            );\n          }\n        }\n      })\n      .then(async () => {\n        const testResult = model.evaluate(xTensorTrain, yTensorTrain);\n        const testAccPercent = testResult[0].dataSync()[0] * 100;\n        const finalValAccPercent = valAcc * 100;\n        this.addConsoleValue(\n          `Final validation accuracy: ${finalValAccPercent.toFixed(1)}%; ` +\n            `Final test accuracy: ${testAccPercent.toFixed(1)}%`\n        );\n\n        await model.save(\"localstorage://breast-cancer-model\");\n        this.addConsoleValue(\"Model saved to LocalStorage\");\n      });\n  };\n\n  render() {\n    return e(\n      \"div\",\n      {\n        className: \"container\",\n        style: {\n          position: \"relative\",\n          top: 100\n        }\n      },\n      e(\n        \"div\",\n        { className: \"row\" },\n        e(\n          \"div\",\n          { className: \"col-md-6\" },\n          e(\"p\", null, \"Console\"),\n          <Console console={this.state.console} />,\n          <Button label=\"Clear\" onClick={this.clearConsole} />\n        ),\n        e(\n          \"div\",\n          { className: \"col-md-6\" },\n          e(\"p\", {}, \"Train\"),\n          e(\"p\", null, \"Default Breast Cancer Dataset\"),\n          e(\n            \"div\",\n            { className: \"row\" },\n            e(\n              \"div\",\n              { className: \"col-md-6\" },\n              e(\"p\", {}, \"Epochs\"),\n              <Input\n                placeholder=\"Enter here number of epochs\"\n                value={this.state.epochs}\n                updateValue={this.updateEpochs}\n              />\n            ),\n            e(\n              \"div\",\n              { className: \"col-md-6\" },\n              e(\"p\", {}, \"Batch Iterations\"),\n              <Input\n                placeholder=\"Enter here number of batchIterations\"\n                value={this.state.batchIterations}\n                updateValue={this.updatebatchIterations}\n              />\n            ),\n            // e(\n            //   \"div\",\n            //   { className: \"col-md-4\" },\n            //   e(\"p\", {}, \"Learning rate\"),\n            //   <Input\n            //     placeholder=\"Learning rate\"\n            //     value={this.state.learningRate}\n            //     updateValue={this.updateLearningRate}\n            //   />\n            // ),\n            e(\n              \"div\",\n              { className: \"col-md-6\" },\n              <RadioButton\n                label=\"Default dataset train\"\n                value=\"default\"\n                onModeSelection={this.trainingModeAction}\n              />\n            )\n            // e(\n            //   \"div\",\n            //   { className: \"col-md-6\" },\n            //   <RadioButton\n            //     label=\"Custom dataset train\"\n            //     value=\"custom\"\n            //     onModeSelection={this.trainingModeAction}\n            //   />\n            // )\n          ),\n          this.renderMode(this.state.mode)\n        )\n      )\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}