{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nvar engine_1 = require(\"../engine\");\n/**\n * Used for wrapping functions that perform math operations on\n * Tensors. The function will be wrapped in a named scope that cleans all\n * memory usage after the function is done.\n */\n\n\nfunction op(f) {\n  var keys = Object.keys(f);\n\n  if (keys.length !== 1) {\n    throw new Error(\"Please provide an object with a single key \" + \"(operation name) mapping to a function. Got an object with \" + (keys.length + \" keys.\"));\n  }\n\n  var opName = keys[0];\n  var fn = f[opName]; // Strip the underscore from the end of the function name.\n\n  if (opName.endsWith('_')) {\n    opName = opName.substring(0, opName.length - 1);\n  } // tslint:disable-next-line:no-any\n\n\n  var f2 = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    engine_1.ENGINE.startScope(opName);\n\n    try {\n      var result = fn.apply(void 0, args);\n\n      if (result instanceof Promise) {\n        console.error('Cannot return a Promise inside of tidy.');\n      }\n\n      engine_1.ENGINE.endScope(result);\n      return result;\n    } catch (ex) {\n      engine_1.ENGINE.endScope(null);\n      throw ex;\n    }\n  };\n\n  Object.defineProperty(f2, 'name', {\n    value: opName,\n    configurable: true\n  }); // tslint:disable-next-line:no-any\n\n  return f2;\n}\n\nexports.op = op;","map":null,"metadata":{},"sourceType":"script"}