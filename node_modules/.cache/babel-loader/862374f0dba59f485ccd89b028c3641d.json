{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // Expects flags from URL in the format ?tfjsflags=FLAG1:1,FLAG2:true.\n\nvar TENSORFLOWJS_FLAGS_PREFIX = 'tfjsflags';\n/**\n * The environment contains evaluated flags as well as the registered platform.\n * This is always used as a global singleton and can be retrieved with\n * `tf.env()`.\n */\n\n/** @doc {heading: 'Environment'} */\n\nvar Environment =\n/** @class */\nfunction () {\n  // tslint:disable-next-line: no-any\n  function Environment(global) {\n    this.global = global;\n    this.flags = {};\n    this.flagRegistry = {};\n    this.urlFlags = {};\n    this.populateURLFlags();\n  }\n\n  Environment.prototype.setPlatform = function (platformName, platform) {\n    if (this.platform != null) {\n      console.warn(\"Platform \" + this.platformName + \" has already been set. \" + (\"Overwriting the platform with \" + platform + \".\"));\n    }\n\n    this.platformName = platformName;\n    this.platform = platform;\n  };\n\n  Environment.prototype.registerFlag = function (flagName, evaluationFn, setHook) {\n    this.flagRegistry[flagName] = {\n      evaluationFn: evaluationFn,\n      setHook: setHook\n    }; // Override the flag value from the URL. This has to happen here because the\n    // environment is initialized before flags get registered.\n\n    if (this.urlFlags[flagName] != null) {\n      var flagValue = this.urlFlags[flagName];\n      console.warn(\"Setting feature override from URL \" + flagName + \": \" + flagValue + \".\");\n      this.set(flagName, flagValue);\n    }\n  };\n\n  Environment.prototype.get = function (flagName) {\n    if (flagName in this.flags) {\n      return this.flags[flagName];\n    }\n\n    this.flags[flagName] = this.evaluateFlag(flagName);\n    return this.flags[flagName];\n  };\n\n  Environment.prototype.getNumber = function (flagName) {\n    return this.get(flagName);\n  };\n\n  Environment.prototype.getBool = function (flagName) {\n    return this.get(flagName);\n  };\n\n  Environment.prototype.getFlags = function () {\n    return this.flags;\n  };\n\n  Object.defineProperty(Environment.prototype, \"features\", {\n    // For backwards compatibility.\n    get: function () {\n      return this.flags;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Environment.prototype.set = function (flagName, value) {\n    if (this.flagRegistry[flagName] == null) {\n      throw new Error(\"Cannot set flag \" + flagName + \" as it has not been registered.\");\n    }\n\n    this.flags[flagName] = value;\n\n    if (this.flagRegistry[flagName].setHook != null) {\n      this.flagRegistry[flagName].setHook(value);\n    }\n  };\n\n  Environment.prototype.evaluateFlag = function (flagName) {\n    if (this.flagRegistry[flagName] == null) {\n      throw new Error(\"Cannot evaluate flag '\" + flagName + \"': no evaluation function found.\");\n    }\n\n    return this.flagRegistry[flagName].evaluationFn();\n  };\n\n  Environment.prototype.setFlags = function (flags) {\n    this.flags = Object.assign({}, flags);\n  };\n\n  Environment.prototype.reset = function () {\n    this.flags = {};\n    this.urlFlags = {};\n    this.populateURLFlags();\n  };\n\n  Environment.prototype.populateURLFlags = function () {\n    var _this = this;\n\n    if (typeof this.global === 'undefined' || typeof this.global.location === 'undefined' || typeof this.global.location.search === 'undefined') {\n      return;\n    }\n\n    var urlParams = getQueryParams(this.global.location.search);\n\n    if (TENSORFLOWJS_FLAGS_PREFIX in urlParams) {\n      var keyValues = urlParams[TENSORFLOWJS_FLAGS_PREFIX].split(',');\n      keyValues.forEach(function (keyValue) {\n        var _a = keyValue.split(':'),\n            key = _a[0],\n            value = _a[1];\n\n        _this.urlFlags[key] = parseValue(key, value);\n      });\n    }\n  };\n\n  return Environment;\n}();\n\nexports.Environment = Environment;\n\nfunction getQueryParams(queryString) {\n  var params = {};\n  queryString.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, function (s) {\n    var t = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      t[_i - 1] = arguments[_i];\n    }\n\n    decodeParam(params, t[0], t[1]);\n    return t.join('=');\n  });\n  return params;\n}\n\nexports.getQueryParams = getQueryParams;\n\nfunction decodeParam(params, name, value) {\n  params[decodeURIComponent(name)] = decodeURIComponent(value || '');\n}\n\nfunction parseValue(flagName, value) {\n  value = value.toLowerCase();\n\n  if (value === 'true' || value === 'false') {\n    return value === 'true';\n  } else if (\"\" + +value === value) {\n    return +value;\n  }\n\n  throw new Error(\"Could not parse value flag value \" + value + \" for flag \" + flagName + \".\");\n}\n/**\n * Returns the current environment (a global singleton).\n *\n * The environment object contains the evaluated feature values as well as the\n * active platform.\n */\n\n/** @doc {heading: 'Environment'} */\n\n\nfunction env() {\n  return exports.ENV;\n}\n\nexports.env = env;\nexports.ENV = null;\n\nfunction setEnvironmentGlobal(environment) {\n  exports.ENV = environment;\n}\n\nexports.setEnvironmentGlobal = setEnvironmentGlobal;","map":null,"metadata":{},"sourceType":"script"}