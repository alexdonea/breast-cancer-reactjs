{"ast":null,"code":"var _jsxFileName = \"/Users/acd/Documents/Projects/breast-cancer-ml/src/App.js\";\nimport React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport Console from \"./Components/Console\";\nimport Button from \"./Components/Button\";\nimport RadioButton from \"./Components/RadioButton\";\nimport Input from \"./Components/Input\";\nimport data from \"./dataset\";\nconst e = React.createElement;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.predictTrainedModel = async () => {\n      const xTest = tf.tensor2d(data.xTest, [data.xTest.length, data.xTest[0].length]);\n      const yTest = tf.tensor2d(data.yTest, [data.yTest.length, data.yTest[0].length]);\n      const modelStorage = await tf.loadLayersModel(\"localstorage://breast-cancer-model\");\n      tf.tidy(() => {\n        const output = modelStorage.predict(xTest);\n        const predictions = output.dataSync();\n        let correct = 0;\n        let wrong = 0;\n        let total = 0;\n        const yTestData = yTest.dataSync();\n        predictions.map((value, index) => {\n          total++;\n\n          if (yTestData[index] === 1) {\n            const fromTest = value >= 0.5 ? \"Correct\" : \"Wrong\";\n\n            if (fromTest === \"Correct\") {\n              correct++;\n            } else {\n              wrong++;\n            }\n\n            this.addConsoleValue(\"[\".concat(index, \"] = Malignant, Dataset Test = \").concat(fromTest));\n          } else {\n            const fromTest = value <= 0.5 ? \"Correct\" : \"Wrong\";\n\n            if (fromTest === \"Correct\") {\n              correct++;\n            } else {\n              wrong++;\n            }\n\n            this.addConsoleValue(\"[\".concat(index, \"] = Benign, Dataset Test= \").concat(fromTest, \" \"));\n          }\n        });\n        this.addConsoleValue(\"Correct=\".concat(correct, \", Wrong = \").concat(wrong, \" Total=\").concat(total));\n      });\n    };\n\n    this.test = async () => {\n      this.addConsoleValue(\"Training...\");\n      const dataset = data.dataset;\n      const yTrain = [];\n      dataset.map(row => {\n        //We do not need ID so we will delete ID from array\n        delete row.id; //test data using target M=1, B =0;\n\n        yTrain.push([row.diagnosis === \"M\" ? 1 : 0]);\n        delete row.diagnosis;\n        return row;\n      });\n      const xTrain = dataset.map(row => [row.radius_mean, row.texture_mean, row.perimeter_mean, row.area_mean, row.smoothness_mean, row.compactness_mean, row.concavity_mean, row.concave_points_mean, row.symmetry_mean, row.fractal_dimension_mean, row.radius_se, row.texture_se, row.perimeter_se, row.area_se, row.smoothness_se, row.compactness_se, row.concavity_se, row.concave_points_se, row.symmetry_se, row.fractal_dimension_se, row.radius_worst, row.texture_worst, row.perimeter_worst, row.area_worst, row.smoothness_worst, row.compactness_worst, row.concavity_worst, row.concave_points_worst, row.symmetry_worst, row.fractal_dimension_worst]);\n      console.log(xTrain);\n      const xTensorTrain = tf.tensor2d(xTrain, [xTrain.length, xTrain[0].length]);\n      const yTensorTrain = tf.tensor2d(yTrain, [yTrain.length, yTrain[0].length]); //Create model as sequential\n\n      const model = tf.sequential();\n      const learningRate = this.state.learningRate; // const optimizer = tf.train.sgd(learningRate);\n\n      const inputLayer = tf.layers.dense({\n        units: 16,\n        inputDim: 30,\n        activation: \"relu\"\n      });\n      const hiddenLayer = tf.layers.dense({\n        units: 8,\n        activation: \"relu\"\n      });\n      const hiddenLayer2 = tf.layers.dense({\n        units: 8,\n        activation: \"relu\"\n      });\n      const outputLayer = tf.layers.dense({\n        units: 1,\n        activation: \"sigmoid\"\n      });\n      model.add(inputLayer);\n      model.add(hiddenLayer);\n      model.add(hiddenLayer2); // model.add(hiddenLayer3);\n\n      model.add(outputLayer);\n      model.compile({\n        optimizer: \"rmsprop\",\n        //learning rate\n        loss: \"meanSquaredError\",\n        metrics: [\"accuracy\"]\n      });\n      const xTest = tf.tensor2d(data.xTest, [data.xTest.length, 30]);\n      const yTest = tf.tensor2d(data.yTest, [data.yTest.length, 1]);\n      const batchSize = this.state.batchIterations || 0;\n      const trainEpochs = this.state.epochs || 0;\n      const validationSplit = 0.15; //learning rate\n      // const totalNumBatches = Math.ceil(xTensorTrain.shape[0] * (1 - validationSplit) / batchSize) *trainEpochs;\n\n      let valAcc;\n      await model.fit(xTensorTrain, yTensorTrain, {\n        batchSize: batchSize,\n        epochs: trainEpochs,\n        validationData: [xTest, yTest],\n        callbacks: {\n          onEpochEnd: async (epoch, logs) => {\n            valAcc = logs.acc;\n            this.addConsoleValue(\"Epoch =\".concat(epoch, \" Loss=\").concat(logs.loss, \"  Acc=\").concat(logs.acc));\n          }\n        }\n      }).then(async () => {\n        const testResult = model.evaluate(xTensorTrain, yTensorTrain);\n        const testAccPercent = testResult[0].dataSync()[0] * 100;\n        const finalValAccPercent = valAcc * 100;\n        this.addConsoleValue(\"Final validation accuracy: \".concat(finalValAccPercent.toFixed(1), \"%; \") + \"Final test accuracy: \".concat(testAccPercent.toFixed(1), \"%\"));\n        await model.save(\"localstorage://breast-cancer-model\");\n        this.addConsoleValue(\"Model savet to localStorage\");\n      });\n    };\n\n    this.clearConsole = this.clearConsole.bind(this);\n    this.addConsoleValue = this.addConsoleValue.bind(this);\n    this.trainingModeAction = this.trainingModeAction.bind(this);\n    this.updateEpochs = this.updateEpochs.bind(this);\n    this.updateLearningRate = this.updateLearningRate.bind(this);\n    this.updatebatchIterations = this.updatebatchIterations.bind(this);\n    this.predictTrainedModel = this.predictTrainedModel.bind(this);\n    this.train = this.train.bind(this);\n    this.state = {\n      console: [],\n      epochs: 100,\n      learningRate: 1.5,\n      batchIterations: 1,\n      mode: \"default\"\n    };\n  }\n\n  clearConsole() {\n    this.setState({\n      console: []\n    });\n  }\n\n  train() {\n    const date = new Date();\n    this.setState({\n      console: [...this.state.console, \"[\" + date.toLocaleTimeString() + \"]:Epochs \" + this.state.epochs + \"Iter \" + this.state.batchIterations]\n    });\n  }\n\n  updatebatchIterations(iteration) {\n    this.setState({\n      batchIterations: iteration\n    });\n  }\n\n  updateLearningRate(learningRate) {\n    this.setState({\n      learningRate: learningRate\n    });\n  }\n\n  updateEpochs(epoch) {\n    this.setState({\n      epochs: epoch\n    });\n  }\n\n  trainingModeAction(mode) {\n    this.setState({\n      mode: mode\n    });\n  }\n\n  addConsoleValue(value) {\n    const date = new Date();\n    this.setState({\n      console: [...this.state.console, \"[\" + date.toLocaleTimeString() + \"] \" + value]\n    });\n  }\n\n  renderMode(mode) {\n    switch (mode) {\n      default:\n        return e(\"div\", {}, React.createElement(Button, {\n          label: \"Train with default dataset\",\n          onClick: this.test,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        }), React.createElement(Button, {\n          label: \"Predict with test dataset\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }), React.createElement(Button, {\n          label: \"Predict with pre trained model\",\n          onClick: this.predictTrainedModel,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        }), React.createElement(Button, {\n          label: \"Download model\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }));\n\n      case \"custom\":\n        return e(\"p\", {}, \"custom goest here...\");\n    }\n  }\n\n  render() {\n    return e(\"div\", {\n      className: \"container\",\n      style: {\n        position: \"relative\",\n        top: 100\n      }\n    }, e(\"div\", {\n      className: \"row\"\n    }, e(\"div\", {\n      className: \"col-md-6\"\n    }, e(\"p\", null, \"Console\"), React.createElement(Console, {\n      console: this.state.console,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }), React.createElement(Button, {\n      label: \"Clear\",\n      onClick: this.clearConsole,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    })), e(\"div\", {\n      className: \"col-md-6\"\n    }, e(\"p\", {}, \"Train\"), e(\"p\", null, \"Default Breast Cancer Dataset\"), e(\"div\", {\n      className: \"row\"\n    }, e(\"div\", {\n      className: \"col-md-4\"\n    }, e(\"p\", {}, \"Epochs\"), React.createElement(Input, {\n      placeholder: \"Enter here number of epochs\",\n      value: this.state.epochs,\n      updateValue: this.updateEpochs,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    })), e(\"div\", {\n      className: \"col-md-4\"\n    }, e(\"p\", {}, \"Batch Iterations\"), React.createElement(Input, {\n      placeholder: \"Enter here number of batchIterations\",\n      value: this.state.batchIterations,\n      updateValue: this.updatebatchIterations,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    })), e(\"div\", {\n      className: \"col-md-4\"\n    }, e(\"p\", {}, \"Learning rate\"), React.createElement(Input, {\n      placeholder: \"Learning rate\",\n      value: this.state.learningRate,\n      updateValue: this.updateLearningRate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    })), e(\"div\", {\n      className: \"col-md-6\"\n    }, React.createElement(RadioButton, {\n      label: \"Default dataset train\",\n      value: \"default\",\n      onModeSelection: this.trainingModeAction,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    })), e(\"div\", {\n      className: \"col-md-6\"\n    }, React.createElement(RadioButton, {\n      label: \"Custom dataset train\",\n      value: \"custom\",\n      onModeSelection: this.trainingModeAction,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339\n      },\n      __self: this\n    }))), this.renderMode(this.state.mode))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/acd/Documents/Projects/breast-cancer-ml/src/App.js"],"names":["React","tf","Console","Button","RadioButton","Input","data","e","createElement","App","Component","constructor","props","predictTrainedModel","xTest","tensor2d","length","yTest","modelStorage","loadLayersModel","tidy","output","predict","predictions","dataSync","correct","wrong","total","yTestData","map","value","index","fromTest","addConsoleValue","test","dataset","yTrain","row","id","push","diagnosis","xTrain","radius_mean","texture_mean","perimeter_mean","area_mean","smoothness_mean","compactness_mean","concavity_mean","concave_points_mean","symmetry_mean","fractal_dimension_mean","radius_se","texture_se","perimeter_se","area_se","smoothness_se","compactness_se","concavity_se","concave_points_se","symmetry_se","fractal_dimension_se","radius_worst","texture_worst","perimeter_worst","area_worst","smoothness_worst","compactness_worst","concavity_worst","concave_points_worst","symmetry_worst","fractal_dimension_worst","console","log","xTensorTrain","yTensorTrain","model","sequential","learningRate","state","inputLayer","layers","dense","units","inputDim","activation","hiddenLayer","hiddenLayer2","outputLayer","add","compile","optimizer","loss","metrics","batchSize","batchIterations","trainEpochs","epochs","validationSplit","valAcc","fit","validationData","callbacks","onEpochEnd","epoch","logs","acc","then","testResult","evaluate","testAccPercent","finalValAccPercent","toFixed","save","clearConsole","bind","trainingModeAction","updateEpochs","updateLearningRate","updatebatchIterations","train","mode","setState","date","Date","toLocaleTimeString","iteration","renderMode","render","className","style","position","top"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport Console from \"./Components/Console\";\nimport Button from \"./Components/Button\";\nimport RadioButton from \"./Components/RadioButton\";\nimport Input from \"./Components/Input\";\nimport data from \"./dataset\";\n\nconst e = React.createElement;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.clearConsole = this.clearConsole.bind(this);\n    this.addConsoleValue = this.addConsoleValue.bind(this);\n    this.trainingModeAction = this.trainingModeAction.bind(this);\n    this.updateEpochs = this.updateEpochs.bind(this);\n    this.updateLearningRate = this.updateLearningRate.bind(this);\n    this.updatebatchIterations = this.updatebatchIterations.bind(this);\n    this.predictTrainedModel = this.predictTrainedModel.bind(this);\n    this.train = this.train.bind(this);\n    this.state = {\n      console: [],\n      epochs: 100,\n      learningRate: 1.5,\n      batchIterations: 1,\n      mode: \"default\"\n    };\n  }\n\n  clearConsole() {\n    this.setState({\n      console: []\n    });\n  }\n\n  train() {\n    const date = new Date();\n    this.setState({\n      console: [\n        ...this.state.console,\n        \"[\" +\n          date.toLocaleTimeString() +\n          \"]:Epochs \" +\n          this.state.epochs +\n          \"Iter \" +\n          this.state.batchIterations\n      ]\n    });\n  }\n\n  updatebatchIterations(iteration) {\n    this.setState({\n      batchIterations: iteration\n    });\n  }\n  updateLearningRate(learningRate) {\n    this.setState({\n      learningRate: learningRate\n    });\n  }\n  updateEpochs(epoch) {\n    this.setState({\n      epochs: epoch\n    });\n  }\n\n  trainingModeAction(mode) {\n    this.setState({\n      mode: mode\n    });\n  }\n\n  addConsoleValue(value) {\n    const date = new Date();\n    this.setState({\n      console: [\n        ...this.state.console,\n        \"[\" + date.toLocaleTimeString() + \"] \" + value\n      ]\n    });\n  }\n\n  renderMode(mode) {\n    switch (mode) {\n      default:\n        return e(\n          \"div\",\n          {},\n          <Button label=\"Train with default dataset\" onClick={this.test} />,\n          <Button label=\"Predict with test dataset\" />,\n          <Button\n            label=\"Predict with pre trained model\"\n            onClick={this.predictTrainedModel}\n          />,\n          <Button label=\"Download model\" />\n        );\n      case \"custom\":\n        return e(\"p\", {}, \"custom goest here...\");\n    }\n  }\n  predictTrainedModel = async () => {\n    const xTest = tf.tensor2d(data.xTest, [data.xTest.length, data.xTest[0].length]);\n    const yTest = tf.tensor2d(data.yTest, [data.yTest.length, data.yTest[0].length]);\n    const modelStorage = await tf.loadLayersModel(\n      \"localstorage://breast-cancer-model\"\n    );\n    tf.tidy(() => {\n      const output = modelStorage.predict(xTest);\n      const predictions = output.dataSync();\n      let correct = 0;\n      let wrong = 0;\n      let total = 0;\n      const yTestData = yTest.dataSync();\n      predictions.map((value, index) => {\n        total++;\n        if (yTestData[index] === 1) {\n          const fromTest = value >= 0.5 ? \"Correct\" : \"Wrong\";\n          if (fromTest === \"Correct\") {\n            correct++;\n          } else {\n            wrong++;\n          }\n          this.addConsoleValue(\n            `[${index}] = Malignant, Dataset Test = ${fromTest}`\n          );\n        } else {\n          const fromTest = value <= 0.5 ? \"Correct\" : \"Wrong\";\n          if (fromTest === \"Correct\") {\n            correct++;\n          } else {\n            wrong++;\n          }\n          this.addConsoleValue(\n            `[${index}] = Benign, Dataset Test= ${fromTest} `\n          );\n        }\n      });\n\n      this.addConsoleValue(\n        `Correct=${correct}, Wrong = ${wrong} Total=${total}`\n      );\n    });\n  };\n  test = async () => {\n    this.addConsoleValue(\"Training...\");\n\n    const dataset = data.dataset;\n    const yTrain = [];\n    dataset.map(row => {\n      //We do not need ID so we will delete ID from array\n      delete row.id;\n      //test data using target M=1, B =0;\n      yTrain.push([row.diagnosis === \"M\" ? 1 : 0]);\n      delete row.diagnosis;\n      return row;\n    });\n    const xTrain = dataset.map(row => [\n      row.radius_mean,\n      row.texture_mean,\n      row.perimeter_mean,\n      row.area_mean,\n      row.smoothness_mean,\n      row.compactness_mean,\n      row.concavity_mean,\n      row.concave_points_mean,\n      row.symmetry_mean,\n      row.fractal_dimension_mean,\n      row.radius_se,\n      row.texture_se,\n      row.perimeter_se,\n      row.area_se,\n      row.smoothness_se,\n      row.compactness_se,\n      row.concavity_se,\n      row.concave_points_se,\n      row.symmetry_se,\n      row.fractal_dimension_se,\n      row.radius_worst,\n      row.texture_worst,\n      row.perimeter_worst,\n      row.area_worst,\n      row.smoothness_worst,\n      row.compactness_worst,\n      row.concavity_worst,\n      row.concave_points_worst,\n      row.symmetry_worst,\n      row.fractal_dimension_worst\n    ]);\n\n    console.log(xTrain);\n    const xTensorTrain = tf.tensor2d(xTrain, [xTrain.length, xTrain[0].length]);\n    const yTensorTrain = tf.tensor2d(yTrain, [yTrain.length, yTrain[0].length]);\n\n\n    //Create model as sequential\n\n    const model = tf.sequential();\n    const learningRate = this.state.learningRate;\n    // const optimizer = tf.train.sgd(learningRate);\n    const inputLayer = tf.layers.dense({\n      units: 16,\n      inputDim: 30,\n      activation: \"relu\"\n    });\n\n    const hiddenLayer = tf.layers.dense({\n      units: 8,\n      activation: \"relu\"\n    });\n\n    const hiddenLayer2 = tf.layers.dense({\n      units: 8,\n      activation: \"relu\"\n    });\n    const outputLayer = tf.layers.dense({\n      units: 1,\n      activation: \"sigmoid\"\n    });\n\n    model.add(inputLayer);\n    model.add(hiddenLayer);\n    model.add(hiddenLayer2);\n    // model.add(hiddenLayer3);\n    model.add(outputLayer);\n\n    model.compile({\n      optimizer: \"rmsprop\", //learning rate\n      loss: \"meanSquaredError\",\n      metrics: [\"accuracy\"]\n    });\n\n    const xTest = tf.tensor2d(data.xTest, [data.xTest.length, 30]);\n    const yTest = tf.tensor2d(data.yTest, [data.yTest.length, 1]);\n    const batchSize = this.state.batchIterations || 0;\n    const trainEpochs = this.state.epochs || 0;\n    const validationSplit = 0.15; //learning rate\n    // const totalNumBatches = Math.ceil(xTensorTrain.shape[0] * (1 - validationSplit) / batchSize) *trainEpochs;\n    let valAcc;\n    await model\n      .fit(xTensorTrain, yTensorTrain, {\n        batchSize: batchSize,\n        epochs: trainEpochs,\n        validationData: [xTest, yTest],\n        callbacks: {\n          onEpochEnd: async (epoch, logs) => {\n            valAcc = logs.acc;\n            this.addConsoleValue(\n              `Epoch =${epoch} Loss=${logs.loss}  Acc=${logs.acc}`\n            );\n          }\n        }\n      })\n      .then(async () => {\n        const testResult = model.evaluate(xTensorTrain, yTensorTrain);\n        const testAccPercent = testResult[0].dataSync()[0] * 100;\n        const finalValAccPercent = valAcc * 100;\n        this.addConsoleValue(\n          `Final validation accuracy: ${finalValAccPercent.toFixed(1)}%; ` +\n            `Final test accuracy: ${testAccPercent.toFixed(1)}%`\n        );\n\n        await model.save(\"localstorage://breast-cancer-model\");\n        this.addConsoleValue(\"Model savet to localStorage\");\n      });\n  };\n\n  render() {\n    return e(\n      \"div\",\n      {\n        className: \"container\",\n        style: {\n          position: \"relative\",\n          top: 100\n        }\n      },\n      e(\n        \"div\",\n        { className: \"row\" },\n        e(\n          \"div\",\n          { className: \"col-md-6\" },\n          e(\"p\", null, \"Console\"),\n          <Console console={this.state.console} />,\n          <Button label=\"Clear\" onClick={this.clearConsole} />\n        ),\n        e(\n          \"div\",\n          { className: \"col-md-6\" },\n          e(\"p\", {}, \"Train\"),\n          e(\"p\", null, \"Default Breast Cancer Dataset\"),\n          e(\n            \"div\",\n            { className: \"row\" },\n            e(\n              \"div\",\n              { className: \"col-md-4\" },\n              e(\"p\", {}, \"Epochs\"),\n              <Input\n                placeholder=\"Enter here number of epochs\"\n                value={this.state.epochs}\n                updateValue={this.updateEpochs}\n              />\n            ),\n            e(\n              \"div\",\n              { className: \"col-md-4\" },\n              e(\"p\", {}, \"Batch Iterations\"),\n              <Input\n                placeholder=\"Enter here number of batchIterations\"\n                value={this.state.batchIterations}\n                updateValue={this.updatebatchIterations}\n              />\n            ),\n            e(\n              \"div\",\n              { className: \"col-md-4\" },\n              e(\"p\", {}, \"Learning rate\"),\n              <Input\n                placeholder=\"Learning rate\"\n                value={this.state.learningRate}\n                updateValue={this.updateLearningRate}\n              />\n            ),\n            e(\n              \"div\",\n              { className: \"col-md-6\" },\n              <RadioButton\n                label=\"Default dataset train\"\n                value=\"default\"\n                onModeSelection={this.trainingModeAction}\n              />\n            ),\n            e(\n              \"div\",\n              { className: \"col-md-6\" },\n              <RadioButton\n                label=\"Custom dataset train\"\n                value=\"custom\"\n                onModeSelection={this.trainingModeAction}\n              />\n            )\n          ),\n          this.renderMode(this.state.mode)\n        )\n      )\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}