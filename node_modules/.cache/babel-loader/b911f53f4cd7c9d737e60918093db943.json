{"ast":null,"code":"var _jsxFileName = \"/Users/acd/Documents/Projects/breast-cancer-ml/src/App.js\";\nimport React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport Console from \"./Components/Console\";\nimport Button from \"./Components/Button\";\nimport RadioButton from \"./Components/RadioButton\";\nimport Input from \"./Components/Input\";\nimport { dataset, xTest, yTest } from \"./Dataset/datasetJson\";\nimport { filterData } from \"./Dataset\";\nconst e = React.createElement;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.predictTrainedModel = async () => {\n      const xTest1 = tf.tensor2d(xTest, [xTest.length, xTest[0].length]);\n      const yTest1 = tf.tensor2d(yTest, [yTest.length, yTest[0].length]);\n      const modelStorage = await tf.loadLayersModel(\"localstorage://breast-cancer-model\");\n      tf.tidy(() => {\n        const output = modelStorage.predict(xTest1);\n        const predictions = output.dataSync();\n        let correct = 0;\n        let wrong = 0;\n        let total = 0;\n        const yTestData = yTest.dataSync();\n        predictions.forEach((value, index) => {\n          console.log(yTest[index], value);\n          total++;\n\n          if (yTestData[index] === 1) {\n            const fromTest = value >= 0.5 ? \"Correct\" : \"Wrong\";\n\n            if (fromTest === \"Correct\") {\n              correct++;\n            } else {\n              wrong++;\n            }\n\n            this.addConsoleValue(\"[\".concat(index, \"] = Malignant, Dataset Test = \").concat(fromTest));\n          } else {\n            const fromTest = value <= 0.5 ? \"Correct\" : \"Wrong\";\n\n            if (fromTest === \"Correct\") {\n              correct++;\n            } else {\n              wrong++;\n            }\n\n            this.addConsoleValue(\"[\".concat(index, \"] = Benign, Dataset Test= \").concat(fromTest, \" \"));\n          }\n        });\n        this.addConsoleValue(\"Correct=\".concat(correct, \", Wrong = \").concat(wrong, \" Total=\").concat(total));\n      });\n    };\n\n    this.trainModel = async () => {\n      this.addConsoleValue(\"Training...\");\n      const data = filterData(dataset);\n      tf.util.shuffle(data);\n      const xTensorTrain = tf.tensor2d(data.xTrain, [data.xTrain.length, data.xTrain[0].length]);\n      const yTensorTrain = tf.tensor2d(data.yTrain, [data.yTrain.length, data.yTrain[0].length]);\n      const xTrainMax = xTensorTrain.max();\n      const xTrainMin = xTensorTrain.min();\n      const yTrainMax = yTensorTrain.max();\n      const yTrainMin = yTensorTrain.min();\n      const normalizedInputs = xTensorTrain.sub(xTrainMin).div(xTrainMax.sub(xTrainMin));\n      const normalizedTargets = yTensorTrain.sub(yTrainMin).div(yTrainMax.sub(yTrainMin)); //Create model as sequential\n\n      const model = tf.sequential();\n      const learningRate = parseFloat(this.state.learningRate) || 0;\n      const batchSize = parseInt(this.state.batchIterations) || 0;\n      const trainEpochs = parseInt(this.state.epochs) || 0;\n      const optimizer = tf.train.sgd(learningRate);\n      const inputLayer = tf.layers.dense({\n        units: 16,\n        inputDim: 30,\n        activation: \"relu\"\n      });\n      const hiddenLayer = tf.layers.dense({\n        units: 8,\n        activation: \"relu\"\n      });\n      const hiddenLayer2 = tf.layers.dense({\n        units: 8,\n        activation: \"relu\"\n      });\n      const outputLayer = tf.layers.dense({\n        units: 1,\n        activation: \"sigmoid\"\n      });\n      model.add(inputLayer);\n      model.add(hiddenLayer);\n      model.add(hiddenLayer2); // model.add(hiddenLayer3);\n\n      model.add(outputLayer);\n      model.compile({\n        optimizer: \"rmsprop\",\n        //learning rate\n        // optimizer:optimizer,\n        loss: \"meanSquaredError\",\n        metrics: [\"accuracy\"]\n      }); // const xTest = tf.tensor2d(dataset.xTest, [dataset.xTest.length, 30]);\n      // const yTest = tf.tensor2d(dataset.yTest, [dataset.yTest.length, 1]);\n      // const totalNumBatches = Math.ceil(xTensorTrain.shape[0] * (1 - validationSplit) / batchSize) *trainEpochs;\n\n      let valAcc;\n      await model.fit(normalizedInputs, normalizedTargets, {\n        batchSize: batchSize,\n        epochs: trainEpochs,\n        // validationData: [xTest, yTest],\n        callbacks: {\n          onEpochEnd: async (epoch, logs) => {\n            valAcc = logs.acc;\n            this.addConsoleValue(\"Epoch =\".concat(epoch, \" Loss=\").concat(logs.loss, \"  Acc=\").concat(logs.acc));\n          }\n        }\n      }).then(async () => {\n        const testResult = model.evaluate(xTensorTrain, yTensorTrain);\n        const testAccPercent = testResult[0].dataSync()[0] * 100;\n        const finalValAccPercent = valAcc * 100;\n        this.addConsoleValue(\"Final validation accuracy: \".concat(finalValAccPercent.toFixed(1), \"%; \") + \"Final test accuracy: \".concat(testAccPercent.toFixed(1), \"%\"));\n        await model.save(\"localstorage://breast-cancer-model\");\n        this.addConsoleValue(\"Model savet to localStorage\");\n      });\n    };\n\n    this.clearConsole = this.clearConsole.bind(this);\n    this.addConsoleValue = this.addConsoleValue.bind(this);\n    this.trainingModeAction = this.trainingModeAction.bind(this);\n    this.updateEpochs = this.updateEpochs.bind(this);\n    this.updateLearningRate = this.updateLearningRate.bind(this);\n    this.updatebatchIterations = this.updatebatchIterations.bind(this);\n    this.predictTrainedModel = this.predictTrainedModel.bind(this);\n    this.train = this.train.bind(this);\n    this.state = {\n      console: [],\n      epochs: 50,\n      learningRate: 1.5,\n      batchIterations: 1,\n      mode: \"default\"\n    };\n  }\n\n  clearConsole() {\n    this.setState({\n      console: []\n    });\n  }\n\n  train() {\n    const date = new Date();\n    this.setState({\n      console: [...this.state.console, \"[\" + date.toLocaleTimeString() + \"]:Epochs \" + this.state.epochs + \"Iter \" + this.state.batchIterations]\n    });\n  }\n\n  updatebatchIterations(iteration) {\n    this.setState({\n      batchIterations: iteration\n    });\n  }\n\n  updateLearningRate(learningRate) {\n    this.setState({\n      learningRate: learningRate\n    });\n  }\n\n  updateEpochs(epoch) {\n    this.setState({\n      epochs: epoch\n    });\n  }\n\n  trainingModeAction(mode) {\n    this.setState({\n      mode: mode\n    });\n  }\n\n  addConsoleValue(value) {\n    const date = new Date();\n    this.setState({\n      console: [...this.state.console, \"[\" + date.toLocaleTimeString() + \"] \" + value]\n    });\n  }\n\n  renderMode(mode) {\n    switch (mode) {\n      default:\n        return e(\"div\", {}, React.createElement(Button, {\n          label: \"Train with default dataset\",\n          onClick: this.trainModel,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }), // <Button label=\"Predict with test dataset\" />,\n        React.createElement(Button, {\n          label: \"Predict with pre trained model\",\n          onClick: this.predictTrainedModel,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }) // <Button label=\"Download model\" />\n        );\n\n      case \"custom\":\n        return e(\"p\", {}, \"custom goest here...\");\n    }\n  }\n\n  render() {\n    return e(\"div\", {\n      className: \"container\",\n      style: {\n        position: \"relative\",\n        top: 100\n      }\n    }, e(\"div\", {\n      className: \"row\"\n    }, e(\"div\", {\n      className: \"col-md-6\"\n    }, e(\"p\", null, \"Console\"), React.createElement(Console, {\n      console: this.state.console,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }), React.createElement(Button, {\n      label: \"Clear\",\n      onClick: this.clearConsole,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    })), e(\"div\", {\n      className: \"col-md-6\"\n    }, e(\"p\", {}, \"Train\"), e(\"p\", null, \"Default Breast Cancer Dataset\"), e(\"div\", {\n      className: \"row\"\n    }, e(\"div\", {\n      className: \"col-md-4\"\n    }, e(\"p\", {}, \"Epochs\"), React.createElement(Input, {\n      placeholder: \"Enter here number of epochs\",\n      value: this.state.epochs,\n      updateValue: this.updateEpochs,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    })), e(\"div\", {\n      className: \"col-md-4\"\n    }, e(\"p\", {}, \"Batch Iterations\"), React.createElement(Input, {\n      placeholder: \"Enter here number of batchIterations\",\n      value: this.state.batchIterations,\n      updateValue: this.updatebatchIterations,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    })), e(\"div\", {\n      className: \"col-md-4\"\n    }, e(\"p\", {}, \"Learning rate\"), React.createElement(Input, {\n      placeholder: \"Learning rate\",\n      value: this.state.learningRate,\n      updateValue: this.updateLearningRate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    })), e(\"div\", {\n      className: \"col-md-6\"\n    }, React.createElement(RadioButton, {\n      label: \"Default dataset train\",\n      value: \"default\",\n      onModeSelection: this.trainingModeAction,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    })), e(\"div\", {\n      className: \"col-md-6\"\n    }, React.createElement(RadioButton, {\n      label: \"Custom dataset train\",\n      value: \"custom\",\n      onModeSelection: this.trainingModeAction,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }))), this.renderMode(this.state.mode))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/acd/Documents/Projects/breast-cancer-ml/src/App.js"],"names":["React","tf","Console","Button","RadioButton","Input","dataset","xTest","yTest","filterData","e","createElement","App","Component","constructor","props","predictTrainedModel","xTest1","tensor2d","length","yTest1","modelStorage","loadLayersModel","tidy","output","predict","predictions","dataSync","correct","wrong","total","yTestData","forEach","value","index","console","log","fromTest","addConsoleValue","trainModel","data","util","shuffle","xTensorTrain","xTrain","yTensorTrain","yTrain","xTrainMax","max","xTrainMin","min","yTrainMax","yTrainMin","normalizedInputs","sub","div","normalizedTargets","model","sequential","learningRate","parseFloat","state","batchSize","parseInt","batchIterations","trainEpochs","epochs","optimizer","train","sgd","inputLayer","layers","dense","units","inputDim","activation","hiddenLayer","hiddenLayer2","outputLayer","add","compile","loss","metrics","valAcc","fit","callbacks","onEpochEnd","epoch","logs","acc","then","testResult","evaluate","testAccPercent","finalValAccPercent","toFixed","save","clearConsole","bind","trainingModeAction","updateEpochs","updateLearningRate","updatebatchIterations","mode","setState","date","Date","toLocaleTimeString","iteration","renderMode","render","className","style","position","top"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport Console from \"./Components/Console\";\nimport Button from \"./Components/Button\";\nimport RadioButton from \"./Components/RadioButton\";\nimport Input from \"./Components/Input\";\nimport {dataset,xTest,yTest} from \"./Dataset/datasetJson\";\nimport {filterData} from \"./Dataset\";\n\nconst e = React.createElement;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.clearConsole = this.clearConsole.bind(this);\n    this.addConsoleValue = this.addConsoleValue.bind(this);\n    this.trainingModeAction = this.trainingModeAction.bind(this);\n    this.updateEpochs = this.updateEpochs.bind(this);\n    this.updateLearningRate = this.updateLearningRate.bind(this);\n    this.updatebatchIterations = this.updatebatchIterations.bind(this);\n    this.predictTrainedModel = this.predictTrainedModel.bind(this);\n    this.train = this.train.bind(this);\n    this.state = {\n      console: [],\n      epochs: 50,\n      learningRate: 1.5,\n      batchIterations: 1,\n      mode: \"default\"\n    };\n  }\n\n  clearConsole() {\n    this.setState({\n      console: []\n    });\n  }\n\n  train() {\n    const date = new Date();\n    this.setState({\n      console: [\n        ...this.state.console,\n        \"[\" +\n          date.toLocaleTimeString() +\n          \"]:Epochs \" +\n          this.state.epochs +\n          \"Iter \" +\n          this.state.batchIterations\n      ]\n    });\n  }\n\n  updatebatchIterations(iteration) {\n    this.setState({\n      batchIterations: iteration\n    });\n  }\n  updateLearningRate(learningRate) {\n    this.setState({\n      learningRate: learningRate\n    });\n  }\n  updateEpochs(epoch) {\n    this.setState({\n      epochs: epoch\n    });\n  }\n\n  trainingModeAction(mode) {\n    this.setState({\n      mode: mode\n    });\n  }\n\n  addConsoleValue(value) {\n    const date = new Date();\n    this.setState({\n      console: [\n        ...this.state.console,\n        \"[\" + date.toLocaleTimeString() + \"] \" + value\n      ]\n    });\n  }\n\n  renderMode(mode) {\n    switch (mode) {\n      default:\n        return e(\n          \"div\",\n          {},\n          <Button label=\"Train with default dataset\" onClick={this.trainModel} />,\n          // <Button label=\"Predict with test dataset\" />,\n          <Button\n            label=\"Predict with pre trained model\"\n            onClick={this.predictTrainedModel}\n          />,\n          // <Button label=\"Download model\" />\n        );\n      case \"custom\":\n        return e(\"p\", {}, \"custom goest here...\");\n    }\n  }\n  predictTrainedModel = async () => {\n\n\n    \n    \n    const xTest1 = tf.tensor2d(xTest, [xTest.length, xTest[0].length]);\n    const yTest1 = tf.tensor2d(yTest, [yTest.length, yTest[0].length]);\n    const modelStorage = await tf.loadLayersModel(\n      \"localstorage://breast-cancer-model\"\n    );\n    tf.tidy(() => {\n      const output = modelStorage.predict(xTest1);\n      const predictions = output.dataSync();\n      let correct = 0;\n      let wrong = 0;\n      let total = 0;\n      const yTestData = yTest.dataSync();\n      predictions.forEach((value, index) => {\n        console.log(yTest[index],value);\n        total++;\n        if (yTestData[index] === 1) {\n          const fromTest = value >= 0.5 ? \"Correct\" : \"Wrong\";\n          if (fromTest === \"Correct\") {\n            correct++;\n          } else {\n            wrong++;\n          }\n          this.addConsoleValue(\n            `[${index}] = Malignant, Dataset Test = ${fromTest}`\n          );\n        } else {\n          const fromTest = value <= 0.5 ? \"Correct\" : \"Wrong\";\n          if (fromTest === \"Correct\") {\n            correct++;\n          } else {\n            wrong++;\n          }\n          this.addConsoleValue(\n            `[${index}] = Benign, Dataset Test= ${fromTest} `\n          );\n        }\n      });\n      this.addConsoleValue(\n        `Correct=${correct}, Wrong = ${wrong} Total=${total}`\n      );\n    });\n  };\n  trainModel = async () => {\n    this.addConsoleValue(\"Training...\");\n  \n    const data = filterData(dataset);\n\n    tf.util.shuffle(data);\n    \n    const xTensorTrain = tf.tensor2d(data.xTrain, [\n      data.xTrain.length,\n      data.xTrain[0].length\n    ]);\n    const yTensorTrain = tf.tensor2d(data.yTrain, [\n      data.yTrain.length,\n      data.yTrain[0].length\n    ]);\n\n\n    const xTrainMax= xTensorTrain.max();\n    const xTrainMin = xTensorTrain.min();\n\n    const yTrainMax= yTensorTrain.max();\n    const yTrainMin = yTensorTrain.min();\n\n    const normalizedInputs = xTensorTrain.sub(xTrainMin).div(xTrainMax.sub(xTrainMin));\n    const normalizedTargets = yTensorTrain.sub(yTrainMin).div(yTrainMax.sub(yTrainMin));\n\n    //Create model as sequential\n\n    const model = tf.sequential();\n    const learningRate = parseFloat(this.state.learningRate) || 0;\n    const batchSize = parseInt(this.state.batchIterations) || 0;\n    const trainEpochs = parseInt(this.state.epochs) || 0;\n\n    const optimizer = tf.train.sgd(learningRate);\n\n    const inputLayer = tf.layers.dense({\n      units: 16,\n      inputDim: 30,\n      activation: \"relu\"\n    });\n\n    const hiddenLayer = tf.layers.dense({\n      units: 8,\n      activation: \"relu\"\n    });\n\n    const hiddenLayer2 = tf.layers.dense({\n      units: 8,\n      activation: \"relu\"\n    });\n    const outputLayer = tf.layers.dense({\n      units: 1,\n      activation: \"sigmoid\"\n    });\n\n    model.add(inputLayer);\n    model.add(hiddenLayer);\n    model.add(hiddenLayer2);\n    // model.add(hiddenLayer3);\n    model.add(outputLayer);\n\n    model.compile({\n      optimizer: \"rmsprop\", //learning rate\n      // optimizer:optimizer,\n      loss: \"meanSquaredError\",\n      metrics: [\"accuracy\"]\n    });\n\n    // const xTest = tf.tensor2d(dataset.xTest, [dataset.xTest.length, 30]);\n    // const yTest = tf.tensor2d(dataset.yTest, [dataset.yTest.length, 1]);\n    \n    // const totalNumBatches = Math.ceil(xTensorTrain.shape[0] * (1 - validationSplit) / batchSize) *trainEpochs;\n    let valAcc;\n    await model\n      .fit(normalizedInputs, normalizedTargets, {\n        batchSize: batchSize,\n        epochs: trainEpochs,\n        // validationData: [xTest, yTest],\n        callbacks: {\n          onEpochEnd: async (epoch, logs) => {\n            valAcc = logs.acc;\n            this.addConsoleValue(\n              `Epoch =${epoch} Loss=${logs.loss}  Acc=${logs.acc}`\n            );\n          }\n        }\n      })\n      .then(async () => {\n        const testResult = model.evaluate(xTensorTrain, yTensorTrain);\n        const testAccPercent = testResult[0].dataSync()[0] * 100;\n        const finalValAccPercent = valAcc * 100;\n        this.addConsoleValue(\n          `Final validation accuracy: ${finalValAccPercent.toFixed(1)}%; ` +\n            `Final test accuracy: ${testAccPercent.toFixed(1)}%`\n        );\n\n        await model.save(\"localstorage://breast-cancer-model\");\n        this.addConsoleValue(\"Model savet to localStorage\");\n      });\n  };\n\n  render() {\n    return e(\n      \"div\",\n      {\n        className: \"container\",\n        style: {\n          position: \"relative\",\n          top: 100\n        }\n      },\n      e(\n        \"div\",\n        { className: \"row\" },\n        e(\n          \"div\",\n          { className: \"col-md-6\" },\n          e(\"p\", null, \"Console\"),\n          <Console console={this.state.console} />,\n          <Button label=\"Clear\" onClick={this.clearConsole} />\n        ),\n        e(\n          \"div\",\n          { className: \"col-md-6\" },\n          e(\"p\", {}, \"Train\"),\n          e(\"p\", null, \"Default Breast Cancer Dataset\"),\n          e(\n            \"div\",\n            { className: \"row\" },\n            e(\n              \"div\",\n              { className: \"col-md-4\" },\n              e(\"p\", {}, \"Epochs\"),\n              <Input\n                placeholder=\"Enter here number of epochs\"\n                value={this.state.epochs}\n                updateValue={this.updateEpochs}\n              />\n            ),\n            e(\n              \"div\",\n              { className: \"col-md-4\" },\n              e(\"p\", {}, \"Batch Iterations\"),\n              <Input\n                placeholder=\"Enter here number of batchIterations\"\n                value={this.state.batchIterations}\n                updateValue={this.updatebatchIterations}\n              />\n            ),\n            e(\n              \"div\",\n              { className: \"col-md-4\" },\n              e(\"p\", {}, \"Learning rate\"),\n              <Input\n                placeholder=\"Learning rate\"\n                value={this.state.learningRate}\n                updateValue={this.updateLearningRate}\n              />\n            ),\n            e(\n              \"div\",\n              { className: \"col-md-6\" },\n              <RadioButton\n                label=\"Default dataset train\"\n                value=\"default\"\n                onModeSelection={this.trainingModeAction}\n              />\n            ),\n            e(\n              \"div\",\n              { className: \"col-md-6\" },\n              <RadioButton\n                label=\"Custom dataset train\"\n                value=\"custom\"\n                onModeSelection={this.trainingModeAction}\n              />\n            )\n          ),\n          this.renderMode(this.state.mode)\n        )\n      )\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}