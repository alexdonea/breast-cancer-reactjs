{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Classes and functions for model management across multiple storage mediums.\n *\n * Supported client actions:\n * - Listing models on all registered storage mediums.\n * - Remove model by URL from any registered storage mediums, by using URL\n *   string.\n * - Moving or copying model from one path to another in the same medium or from\n *   one medium to another, by using URL strings.\n */\n\nvar util_1 = require(\"../util\");\n\nvar router_registry_1 = require(\"./router_registry\");\n\nvar URL_SCHEME_SUFFIX = '://';\n\nvar ModelStoreManagerRegistry =\n/** @class */\nfunction () {\n  function ModelStoreManagerRegistry() {\n    this.managers = {};\n  }\n\n  ModelStoreManagerRegistry.getInstance = function () {\n    if (ModelStoreManagerRegistry.instance == null) {\n      ModelStoreManagerRegistry.instance = new ModelStoreManagerRegistry();\n    }\n\n    return ModelStoreManagerRegistry.instance;\n  };\n  /**\n   * Register a save-handler router.\n   *\n   * @param saveRouter A function that maps a URL-like string onto an instance\n   * of `IOHandler` with the `save` method defined or `null`.\n   */\n\n\n  ModelStoreManagerRegistry.registerManager = function (scheme, manager) {\n    util_1.assert(scheme != null, function () {\n      return 'scheme must not be undefined or null.';\n    });\n\n    if (scheme.endsWith(URL_SCHEME_SUFFIX)) {\n      scheme = scheme.slice(0, scheme.indexOf(URL_SCHEME_SUFFIX));\n    }\n\n    util_1.assert(scheme.length > 0, function () {\n      return 'scheme must not be an empty string.';\n    });\n    var registry = ModelStoreManagerRegistry.getInstance();\n    util_1.assert(registry.managers[scheme] == null, function () {\n      return \"A model store manager is already registered for scheme '\" + scheme + \"'.\";\n    });\n    registry.managers[scheme] = manager;\n  };\n\n  ModelStoreManagerRegistry.getManager = function (scheme) {\n    var manager = this.getInstance().managers[scheme];\n\n    if (manager == null) {\n      throw new Error(\"Cannot find model manager for scheme '\" + scheme + \"'\");\n    }\n\n    return manager;\n  };\n\n  ModelStoreManagerRegistry.getSchemes = function () {\n    return Object.keys(this.getInstance().managers);\n  };\n\n  return ModelStoreManagerRegistry;\n}();\n\nexports.ModelStoreManagerRegistry = ModelStoreManagerRegistry;\n/**\n * Helper method for parsing a URL string into a scheme and a path.\n *\n * @param url E.g., 'localstorage://my-model'\n * @returns A dictionary with two fields: scheme and path.\n *   Scheme: e.g., 'localstorage' in the example above.\n *   Path: e.g., 'my-model' in the example above.\n */\n\nfunction parseURL(url) {\n  if (url.indexOf(URL_SCHEME_SUFFIX) === -1) {\n    throw new Error(\"The url string provided does not contain a scheme. \" + \"Supported schemes are: \" + (\"\" + ModelStoreManagerRegistry.getSchemes().join(',')));\n  }\n\n  return {\n    scheme: url.split(URL_SCHEME_SUFFIX)[0],\n    path: url.split(URL_SCHEME_SUFFIX)[1]\n  };\n}\n\nfunction cloneModelInternal(sourceURL, destURL, deleteSource) {\n  if (deleteSource === void 0) {\n    deleteSource = false;\n  }\n\n  return __awaiter(this, void 0, void 0, function () {\n    var loadHandlers, loadHandler, saveHandlers, saveHandler, sourceScheme, sourcePath, sameMedium, modelArtifacts, saveResult;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          util_1.assert(sourceURL !== destURL, function () {\n            return \"Old path and new path are the same: '\" + sourceURL + \"'\";\n          });\n          loadHandlers = router_registry_1.IORouterRegistry.getLoadHandlers(sourceURL);\n          util_1.assert(loadHandlers.length > 0, function () {\n            return \"Copying failed because no load handler is found for source URL \" + sourceURL + \".\";\n          });\n          util_1.assert(loadHandlers.length < 2, function () {\n            return \"Copying failed because more than one (\" + loadHandlers.length + \") \" + (\"load handlers for source URL \" + sourceURL + \".\");\n          });\n          loadHandler = loadHandlers[0];\n          saveHandlers = router_registry_1.IORouterRegistry.getSaveHandlers(destURL);\n          util_1.assert(saveHandlers.length > 0, function () {\n            return \"Copying failed because no save handler is found for destination \" + (\"URL \" + destURL + \".\");\n          });\n          util_1.assert(saveHandlers.length < 2, function () {\n            return \"Copying failed because more than one (\" + loadHandlers.length + \") \" + (\"save handlers for destination URL \" + destURL + \".\");\n          });\n          saveHandler = saveHandlers[0];\n          sourceScheme = parseURL(sourceURL).scheme;\n          sourcePath = parseURL(sourceURL).path;\n          sameMedium = sourceScheme === parseURL(sourceURL).scheme;\n          return [4\n          /*yield*/\n          , loadHandler.load()];\n\n        case 1:\n          modelArtifacts = _a.sent();\n          if (!(deleteSource && sameMedium)) return [3\n          /*break*/\n          , 3];\n          return [4\n          /*yield*/\n          , ModelStoreManagerRegistry.getManager(sourceScheme).removeModel(sourcePath)];\n\n        case 2:\n          _a.sent();\n\n          _a.label = 3;\n\n        case 3:\n          return [4\n          /*yield*/\n          , saveHandler.save(modelArtifacts)];\n\n        case 4:\n          saveResult = _a.sent();\n          if (!(deleteSource && !sameMedium)) return [3\n          /*break*/\n          , 6];\n          return [4\n          /*yield*/\n          , ModelStoreManagerRegistry.getManager(sourceScheme).removeModel(sourcePath)];\n\n        case 5:\n          _a.sent();\n\n          _a.label = 6;\n\n        case 6:\n          return [2\n          /*return*/\n          , saveResult.modelArtifactsInfo];\n      }\n    });\n  });\n}\n/**\n * List all models stored in registered storage mediums.\n *\n * For a web browser environment, the registered mediums are Local Storage and\n * IndexedDB.\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Delete the model.\n * await tf.io.removeModel('localstorage://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n * ```\n *\n * @returns A `Promise` of a dictionary mapping URLs of existing models to\n * their model artifacts info. URLs include medium-specific schemes, e.g.,\n *   'indexeddb://my/model/1'. Model artifacts info include type of the\n * model's topology, byte sizes of the topology, weights, etc.\n */\n\n/**\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\n\n\nfunction listModels() {\n  return __awaiter(this, void 0, void 0, function () {\n    var schemes, out, _i, schemes_1, scheme, schemeOut, path, url;\n\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          schemes = ModelStoreManagerRegistry.getSchemes();\n          out = {};\n          _i = 0, schemes_1 = schemes;\n          _a.label = 1;\n\n        case 1:\n          if (!(_i < schemes_1.length)) return [3\n          /*break*/\n          , 4];\n          scheme = schemes_1[_i];\n          return [4\n          /*yield*/\n          , ModelStoreManagerRegistry.getManager(scheme).listModels()];\n\n        case 2:\n          schemeOut = _a.sent();\n\n          for (path in schemeOut) {\n            url = scheme + URL_SCHEME_SUFFIX + path;\n            out[url] = schemeOut[path];\n          }\n\n          _a.label = 3;\n\n        case 3:\n          _i++;\n          return [3\n          /*break*/\n          , 1];\n\n        case 4:\n          return [2\n          /*return*/\n          , out];\n      }\n    });\n  });\n}\n\nexports.listModels = listModels;\n/**\n * Remove a model specified by URL from a reigstered storage medium.\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Delete the model.\n * await tf.io.removeModel('localstorage://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n * ```\n *\n * @param url A URL to a stored model, with a scheme prefix, e.g.,\n *   'localstorage://my-model-1', 'indexeddb://my/model/2'.\n * @returns ModelArtifactsInfo of the deleted model (if and only if deletion\n *   is successful).\n * @throws Error if deletion fails, e.g., if no model exists at `path`.\n */\n\n/**\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\n\nfunction removeModel(url) {\n  return __awaiter(this, void 0, void 0, function () {\n    var schemeAndPath, manager;\n    return __generator(this, function (_a) {\n      schemeAndPath = parseURL(url);\n      manager = ModelStoreManagerRegistry.getManager(schemeAndPath.scheme);\n      return [2\n      /*return*/\n      , manager.removeModel(schemeAndPath.path)];\n    });\n  });\n}\n\nexports.removeModel = removeModel;\n/**\n * Copy a model from one URL to another.\n *\n * This function supports:\n *\n * 1. Copying within a storage medium, e.g.,\n *    `tf.io.copyModel('localstorage://model-1', 'localstorage://model-2')`\n * 2. Copying between two storage mediums, e.g.,\n *    `tf.io.copyModel('localstorage://model-1', 'indexeddb://model-1')`\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Copy the model, from Local Storage to IndexedDB.\n * await tf.io.copyModel(\n *     'localstorage://demo/management/model1',\n *     'indexeddb://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Remove both models.\n * await tf.io.removeModel('localstorage://demo/management/model1');\n * await tf.io.removeModel('indexeddb://demo/management/model1');\n * ```\n *\n * @param sourceURL Source URL of copying.\n * @param destURL Destination URL of copying.\n * @returns ModelArtifactsInfo of the copied model (if and only if copying\n *   is successful).\n * @throws Error if copying fails, e.g., if no model exists at `sourceURL`, or\n *   if `oldPath` and `newPath` are identical.\n */\n\n/**\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\n\nfunction copyModel(sourceURL, destURL) {\n  return __awaiter(this, void 0, void 0, function () {\n    var deleteSource;\n    return __generator(this, function (_a) {\n      deleteSource = false;\n      return [2\n      /*return*/\n      , cloneModelInternal(sourceURL, destURL, deleteSource)];\n    });\n  });\n}\n\nexports.copyModel = copyModel;\n/**\n * Move a model from one URL to another.\n *\n * This function supports:\n *\n * 1. Moving within a storage medium, e.g.,\n *    `tf.io.moveModel('localstorage://model-1', 'localstorage://model-2')`\n * 2. Moving between two storage mediums, e.g.,\n *    `tf.io.moveModel('localstorage://model-1', 'indexeddb://model-1')`\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Move the model, from Local Storage to IndexedDB.\n * await tf.io.moveModel(\n *     'localstorage://demo/management/model1',\n *     'indexeddb://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Remove the moved model.\n * await tf.io.removeModel('indexeddb://demo/management/model1');\n * ```\n *\n * @param sourceURL Source URL of moving.\n * @param destURL Destination URL of moving.\n * @returns ModelArtifactsInfo of the copied model (if and only if copying\n *   is successful).\n * @throws Error if moving fails, e.g., if no model exists at `sourceURL`, or\n *   if `oldPath` and `newPath` are identical.\n */\n\n/**\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\n\nfunction moveModel(sourceURL, destURL) {\n  return __awaiter(this, void 0, void 0, function () {\n    var deleteSource;\n    return __generator(this, function (_a) {\n      deleteSource = true;\n      return [2\n      /*return*/\n      , cloneModelInternal(sourceURL, destURL, deleteSource)];\n    });\n  });\n}\n\nexports.moveModel = moveModel;","map":null,"metadata":{},"sourceType":"script"}