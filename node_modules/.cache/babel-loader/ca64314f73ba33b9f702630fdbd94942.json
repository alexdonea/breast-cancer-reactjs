{"ast":null,"code":"var _jsxFileName = \"/Users/acd/Documents/Projects/breast-cancer-ml/src/App.js\";\nimport React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as tf from '@tensorflow/tfjs';\nimport dataset from './Dataset';\nimport Console from \"./Components/Console\";\nimport Button from \"./Components/Button\";\nimport RadioButton from \"./Components/RadioButton\";\nimport Input from \"./Components/Input\";\nconst e = React.createElement;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.test = async () => {\n      this.addConsoleValue('Training...');\n      const model = tf.sequential();\n      const layer1 = tf.layers.dense({\n        units: 16,\n        inputDim: 30,\n        activation: 'relu'\n      });\n      const layer2 = tf.layers.dense({\n        units: 8,\n        activation: 'relu'\n      });\n      const layer3 = tf.layers.dense({\n        units: 1,\n        activation: 'sigmoid'\n      });\n      model.add(layer1);\n      model.add(layer2);\n      model.add(layer3);\n      model.compile({\n        optimizer: 'rmsprop',\n        loss: 'meanSquaredError'\n      }); // console.log('datasets',dataset);\n\n      const xTrain = tf.tensor2d(dataset.xTrain.map(item => [item[0], item[1], item[2], item[3], item[4], item[5], item[6], item[7], item[8], item[9], item[10], item[11], item[12], item[13], item[14], item[15], item[16], item[17], item[18], item[19], item[20], item[21], item[22], item[23], item[24], item[25], item[26], item[27], item[28], item[29]]), [454, 30]);\n      const yTrain = tf.tensor2d(dataset.yTrain.map(item => [item[0]]), [454, 1]);\n      const xTest = tf.tensor2d(dataset.xTest.map(item => [item[0], item[1], item[2], item[3], item[4], item[5], item[6], item[7], item[8], item[9], item[10], item[11], item[12], item[13], item[14], item[15], item[16], item[17], item[18], item[19], item[20], item[21], item[22], item[23], item[24], item[25], item[26], item[27], item[28], item[29]]), [114, 30]);\n      const yTest = tf.tensor2d(dataset.yTest.map(item => [item[0]]), [114, 1]); // model.fit(xTrain,yTrain,{\n      //     batchSize:1,\n      //     epochs:2,\n      // }).then(()=>{\n      //   console.log('done');\n      // });\n      // eppoch\n      // /10 eppochs\n      // for (let i=0;i<this.state.eppoch;i++){\n\n      await model.fit(xTrain, yTrain, {\n        batchSize: 10,\n        epochs: 3,\n        callbacks: {}\n      }).then(info => {\n        // console.log('Final accuracy', info.history.acc);\n        this.addConsoleValue(info);\n      }); // console.log(`Iteration ${i}: ${res.history.loss}`);\n      // }\n      // console.log('finisheeeed,predicting');\n      // model.predict(xTest,yTest).print();\n      // await model.save('downloads://my-model');\n      // const json = fetch('./trained_alex.json');\n      // // const model2 = await tf.loadLayersModel('file:trained_alex.json');\n      // console.log('model2',json);\n    };\n\n    this.clearConsole = this.clearConsole.bind(this);\n    this.addConsoleValue = this.addConsoleValue.bind(this);\n    this.trainingModeAction = this.trainingModeAction.bind(this);\n    this.updateEpochs = this.updateEpochs.bind(this);\n    this.updateIterations = this.updateIterations.bind(this);\n    this.train = this.train.bind(this);\n    this.state = {\n      console: [\"Nothing on console...\"],\n      epochs: 10,\n      iterations: 300,\n      mode: \"default\",\n      trainedModel: []\n    };\n  }\n\n  componentDidMount() {}\n\n  clearConsole() {\n    this.setState({\n      console: []\n    });\n  }\n\n  train() {\n    const date = new Date();\n    this.setState({\n      console: [...this.state.console, \"[\" + date.toLocaleTimeString() + \"]:Epochs \" + this.state.epochs + \"Iter \" + this.state.iterations]\n    });\n  }\n\n  updateIterations(iteration) {\n    this.setState({\n      iterations: iteration\n    });\n  }\n\n  updateEpochs(epoch) {\n    this.setState({\n      epochs: epoch\n    });\n  }\n\n  trainingModeAction(mode) {\n    this.setState({\n      mode: mode\n    });\n  }\n\n  addConsoleValue(value) {\n    const date = new Date();\n    this.setState({\n      console: [...this.state.console, \"[\" + date.toLocaleTimeString() + \"] \" + value]\n    });\n  }\n\n  renderMode(mode) {\n    switch (mode) {\n      default:\n        return e(\"div\", {}, React.createElement(Button, {\n          label: \"Train with default dataset\",\n          onClick: this.test,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        }), React.createElement(Button, {\n          label: \"Predict with test dataset\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85\n          },\n          __self: this\n        }));\n\n      case \"custom\":\n        return e(\"p\", {}, \"custom goest here...\");\n    }\n  }\n\n  render() {\n    return e(\"div\", {\n      className: \"container\",\n      style: {\n        position: \"relative\",\n        top: 100\n      }\n    }, e(\"div\", {\n      className: \"row\"\n    }, e(\"div\", {\n      className: \"col-md-6\"\n    }, e(\"p\", null, \"Console\"), React.createElement(Console, {\n      console: this.state.console,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }), React.createElement(Button, {\n      label: \"Add\",\n      onClick: this.train,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }), React.createElement(Button, {\n      label: \"Clear\",\n      onClick: this.clearConsole,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    })), e(\"div\", {\n      className: \"col-md-6\"\n    }, e(\"p\", {}, \"Train\"), e(\"p\", null, \"Default Breast Cancer Dataset\"), e(\"div\", {\n      className: \"row\"\n    }, e(\"div\", {\n      className: \"col-md-6\"\n    }, e(\"p\", {}, \"Epochs\"), React.createElement(Input, {\n      placeholder: \"Enter here number of epochs\",\n      value: this.state.epochs,\n      updateValue: this.updateEpochs,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    })), e(\"div\", {\n      className: \"col-md-6\"\n    }, e(\"p\", {}, \"Iterations\"), React.createElement(Input, {\n      placeholder: \"Enter here number of iterations\",\n      value: this.state.iterations,\n      updateValue: this.updateIterations,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    })), e(\"div\", {\n      className: \"col-md-6\"\n    }, React.createElement(RadioButton, {\n      label: \"Default dataset train\",\n      value: \"default\",\n      onModeSelection: this.trainingModeAction,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    })), e(\"div\", {\n      className: \"col-md-6\"\n    }, React.createElement(RadioButton, {\n      label: \"Custom dataset train\",\n      value: \"custom\",\n      onModeSelection: this.trainingModeAction,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }))), this.renderMode(this.state.mode))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/acd/Documents/Projects/breast-cancer-ml/src/App.js"],"names":["React","tf","dataset","Console","Button","RadioButton","Input","e","createElement","App","Component","constructor","props","test","addConsoleValue","model","sequential","layer1","layers","dense","units","inputDim","activation","layer2","layer3","add","compile","optimizer","loss","xTrain","tensor2d","map","item","yTrain","xTest","yTest","fit","batchSize","epochs","callbacks","then","info","clearConsole","bind","trainingModeAction","updateEpochs","updateIterations","train","state","console","iterations","mode","trainedModel","componentDidMount","setState","date","Date","toLocaleTimeString","iteration","epoch","value","renderMode","render","className","style","position","top"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as tf from '@tensorflow/tfjs';\nimport dataset from './Dataset';\nimport Console from \"./Components/Console\";\nimport Button from \"./Components/Button\";\nimport RadioButton from \"./Components/RadioButton\";\nimport Input from \"./Components/Input\";\n\nconst e = React.createElement;\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.clearConsole = this.clearConsole.bind(this);\n    this.addConsoleValue = this.addConsoleValue.bind(this);\n    this.trainingModeAction = this.trainingModeAction.bind(this);\n    this.updateEpochs = this.updateEpochs.bind(this);\n    this.updateIterations = this.updateIterations.bind(this);\n    this.train = this.train.bind(this);\n    this.state = {\n      console: [\"Nothing on console...\"],\n      epochs: 10,\n      iterations: 300,\n      mode: \"default\",\n      trainedModel: []\n    };\n  }\n\n  componentDidMount() {}\n\n  clearConsole() {\n    this.setState({\n      console: []\n    });\n  }\n\n  train() {\n    const date = new Date();\n    this.setState({\n      console: [\n        ...this.state.console,\n        \"[\" + date.toLocaleTimeString() + \"]:Epochs \"+this.state.epochs + \"Iter \"+this.state.iterations\n      ]\n    });\n  }\n\n  updateIterations(iteration) {\n    this.setState({\n      iterations: iteration\n    });\n    \n  }\n  updateEpochs(epoch) {\n    this.setState({\n      epochs: epoch\n    });\n\n    \n  }\n\n  trainingModeAction(mode) {\n    this.setState({\n      mode: mode\n    });\n  }\n\n  addConsoleValue(value) {\n    const date = new Date();\n    this.setState({\n      console: [\n        ...this.state.console,\"[\"+date.toLocaleTimeString()+\"] \"+value\n      ]\n    });\n  }\n\n  renderMode(mode) {\n    switch (mode) {\n      default:\n        return e(\n          \"div\",\n          {},\n          <Button label=\"Train with default dataset\"\n          onClick={this.test}\n          />,\n          <Button label=\"Predict with test dataset\" \n          />\n        );\n      case \"custom\":\n        return e(\"p\", {}, \"custom goest here...\");\n    }\n  }\n\n  test = async () =>{\n\n    this.addConsoleValue('Training...')\n    const model = tf.sequential();\n\n    const layer1 = tf.layers.dense({\n        units:16,\n        inputDim:30,\n        activation:'relu'\n    })\n\n    const layer2 = tf.layers.dense({\n        units:8,\n        activation:'relu'\n    })\n\n    const layer3 = tf.layers.dense({\n        units:1,\n        activation:'sigmoid'\n\n    })\n    model.add(layer1);\n    model.add(layer2);\n    model.add(layer3);\n    \n    model.compile({\n        optimizer:'rmsprop',\n        loss:'meanSquaredError'\n    });\n\n    // console.log('datasets',dataset);\n\n     const xTrain = tf.tensor2d(dataset.xTrain.map(item=> [\n      item[0],item[1],item[2],item[3],item[4],item[5],item[6],item[7],item[8],item[9],item[10],item[11],item[12],item[13],item[14],item[15],item[16],item[17],item[18],item[19],item[20],item[21],item[22],item[23],item[24],item[25],item[26],item[27],item[28],item[29]\n  ]),[454,30]);\n\n  const yTrain = tf.tensor2d(dataset.yTrain.map(item=> [\n   item[0]\n]),[454,1]);\n\n\n\nconst xTest = tf.tensor2d(dataset.xTest.map(item=> [\n  item[0],item[1],item[2],item[3],item[4],item[5],item[6],item[7],item[8],item[9],item[10],item[11],item[12],item[13],item[14],item[15],item[16],item[17],item[18],item[19],item[20],item[21],item[22],item[23],item[24],item[25],item[26],item[27],item[28],item[29]\n]),[114,30]);\n\nconst yTest = tf.tensor2d(dataset.yTest.map(item=> [\n  item[0]\n]),[114,1]);\n\n\n    // model.fit(xTrain,yTrain,{\n    //     batchSize:1,\n    //     epochs:2,\n    // }).then(()=>{\n    //   console.log('done');\n\n         \n    // });\n    // eppoch\n\n    // /10 eppochs\n    // for (let i=0;i<this.state.eppoch;i++){\n     await model.fit(xTrain,yTrain,{\n        batchSize:10,\n        epochs:3,\n        callbacks: {}\n    }).then(info => {\n        // console.log('Final accuracy', info.history.acc);\n        this.addConsoleValue(info);\n      })\n    // console.log(`Iteration ${i}: ${res.history.loss}`);\n    // }\n\n    // console.log('finisheeeed,predicting');\n    // model.predict(xTest,yTest).print();\n    // await model.save('downloads://my-model');\n\n    // const json = fetch('./trained_alex.json');\n    // // const model2 = await tf.loadLayersModel('file:trained_alex.json');\n    // console.log('model2',json);\n}\n\n  render() {\n    return e(\n      \"div\",\n      {\n        className: \"container\",\n        style: {\n          position: \"relative\",\n          top: 100\n        }\n      },\n      e(\n        \"div\",\n        { className: \"row\" },\n        e(\n          \"div\",\n          { className: \"col-md-6\" },\n          e(\"p\", null, \"Console\"),\n          <Console console={this.state.console} />,\n          <Button label=\"Add\" onClick={this.train} />,\n          <Button label=\"Clear\" onClick={this.clearConsole} />\n        ),\n        e(\n          \"div\",\n          { className: \"col-md-6\" },\n          e(\"p\", {}, \"Train\"),\n          e(\"p\", null, \"Default Breast Cancer Dataset\"),\n          e(\n            \"div\",\n            { className: \"row\" },\n            e(\n              \"div\",\n              { className: \"col-md-6\" },\n              e(\"p\", {}, \"Epochs\"),\n              <Input\n                placeholder=\"Enter here number of epochs\"\n                value={this.state.epochs}\n                updateValue = {this.updateEpochs}\n\n              />\n            ),\n            e(\n              \"div\",\n              { className: \"col-md-6\" },\n              e(\"p\", {}, \"Iterations\"),\n              <Input\n                placeholder=\"Enter here number of iterations\"\n                value={this.state.iterations}\n                updateValue = {this.updateIterations}\n              />\n            ),\n            e(\n              \"div\",\n              { className: \"col-md-6\" },\n              <RadioButton\n                label=\"Default dataset train\"\n                value=\"default\"\n                onModeSelection={this.trainingModeAction}\n              />\n            ),\n            e(\n              \"div\",\n              { className: \"col-md-6\" },\n              <RadioButton\n                label=\"Custom dataset train\"\n                value=\"custom\"\n                onModeSelection={this.trainingModeAction}\n              />\n            )\n          ),\n          this.renderMode(this.state.mode)\n        )\n      )\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}