{"ast":null,"code":"var _jsxFileName = \"/Users/acd/Documents/Projects/breast-cancer-ml/src/App.js\";\nimport React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport Console from \"./Components/Console\";\nimport Button from \"./Components/Button\";\nimport RadioButton from \"./Components/RadioButton\";\nimport Input from \"./Components/Input\";\nimport { xTrain, yTrain } from './Dataset';\nconst e = React.createElement;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.predictTrainedModel = async () => {\n      const xTest = tf.tensor2d(data.xTest, [data.xTest.length, data.xTest[0].length]);\n      const yTest = tf.tensor2d(data.yTest, [data.yTest.length, data.yTest[0].length]);\n      const modelStorage = await tf.loadLayersModel(\"localstorage://breast-cancer-model\");\n      tf.tidy(() => {\n        const output = modelStorage.predict(xTest);\n        const predictions = output.dataSync();\n        let correct = 0;\n        let wrong = 0;\n        let total = 0;\n        const yTestData = yTest.dataSync();\n        predictions.forEach((value, index) => {\n          total++;\n\n          if (yTestData[index] === 1) {\n            const fromTest = value >= 0.5 ? \"Correct\" : \"Wrong\";\n\n            if (fromTest === \"Correct\") {\n              correct++;\n            } else {\n              wrong++;\n            }\n\n            this.addConsoleValue(\"[\".concat(index, \"] = Malignant, Dataset Test = \").concat(fromTest));\n          } else {\n            const fromTest = value <= 0.5 ? \"Correct\" : \"Wrong\";\n\n            if (fromTest === \"Correct\") {\n              correct++;\n            } else {\n              wrong++;\n            }\n\n            this.addConsoleValue(\"[\".concat(index, \"] = Benign, Dataset Test= \").concat(fromTest, \" \"));\n          }\n        });\n        this.addConsoleValue(\"Correct=\".concat(correct, \", Wrong = \").concat(wrong, \" Total=\").concat(total));\n      });\n    };\n\n    this.test = async () => {\n      this.addConsoleValue(\"Training...\");\n      const dataset = data.dataset;\n      const yTrain = [];\n      dataset.map(row => {\n        //We do not need ID so we will delete ID from array\n        delete row.id; //test data using target M=1, B =0;\n\n        yTrain.push([row.diagnosis === \"M\" ? 1 : 0]);\n        delete row.diagnosis;\n        return row;\n      });\n      const xTrain = dataset.map(row => [row.radius_mean, row.texture_mean, row.perimeter_mean, row.area_mean, row.smoothness_mean, row.compactness_mean, row.concavity_mean, row.concave_points_mean, row.symmetry_mean, row.fractal_dimension_mean, row.radius_se, row.texture_se, row.perimeter_se, row.area_se, row.smoothness_se, row.compactness_se, row.concavity_se, row.concave_points_se, row.symmetry_se, row.fractal_dimension_se, row.radius_worst, row.texture_worst, row.perimeter_worst, row.area_worst, row.smoothness_worst, row.compactness_worst, row.concavity_worst, row.concave_points_worst, row.symmetry_worst, row.fractal_dimension_worst]);\n      const xTensorTrain = tf.tensor2d(xTrain, [xTrain.length, xTrain[0].length]);\n      const yTensorTrain = tf.tensor2d(yTrain, [yTrain.length, yTrain[0].length]); //Create model as sequential\n\n      const model = tf.sequential(); // const learningRate = this.state.learningRate;\n      // const optimizer = tf.train.sgd(learningRate);\n\n      const inputLayer = tf.layers.dense({\n        units: 16,\n        inputDim: 30,\n        activation: \"relu\"\n      });\n      const hiddenLayer = tf.layers.dense({\n        units: 8,\n        activation: \"relu\"\n      });\n      const hiddenLayer2 = tf.layers.dense({\n        units: 8,\n        activation: \"relu\"\n      });\n      const outputLayer = tf.layers.dense({\n        units: 1,\n        activation: \"sigmoid\"\n      });\n      model.add(inputLayer);\n      model.add(hiddenLayer);\n      model.add(hiddenLayer2); // model.add(hiddenLayer3);\n\n      model.add(outputLayer);\n      model.compile({\n        optimizer: \"rmsprop\",\n        //learning rate\n        loss: \"meanSquaredError\",\n        metrics: [\"accuracy\"]\n      });\n      const xTest = tf.tensor2d(data.xTest, [data.xTest.length, 30]);\n      const yTest = tf.tensor2d(data.yTest, [data.yTest.length, 1]);\n      const batchSize = this.state.batchIterations || 0;\n      const trainEpochs = this.state.epochs || 0; // const totalNumBatches = Math.ceil(xTensorTrain.shape[0] * (1 - validationSplit) / batchSize) *trainEpochs;\n\n      let valAcc;\n      await model.fit(xTensorTrain, yTensorTrain, {\n        batchSize: batchSize,\n        epochs: trainEpochs,\n        validationData: [xTest, yTest],\n        callbacks: {\n          onEpochEnd: async (epoch, logs) => {\n            valAcc = logs.acc;\n            this.addConsoleValue(\"Epoch =\".concat(epoch, \" Loss=\").concat(logs.loss, \"  Acc=\").concat(logs.acc));\n          }\n        }\n      }).then(async () => {\n        const testResult = model.evaluate(xTensorTrain, yTensorTrain);\n        const testAccPercent = testResult[0].dataSync()[0] * 100;\n        const finalValAccPercent = valAcc * 100;\n        this.addConsoleValue(\"Final validation accuracy: \".concat(finalValAccPercent.toFixed(1), \"%; \") + \"Final test accuracy: \".concat(testAccPercent.toFixed(1), \"%\"));\n        await model.save(\"localstorage://breast-cancer-model\");\n        this.addConsoleValue(\"Model savet to localStorage\");\n      });\n    };\n\n    this.clearConsole = this.clearConsole.bind(this);\n    this.addConsoleValue = this.addConsoleValue.bind(this);\n    this.trainingModeAction = this.trainingModeAction.bind(this);\n    this.updateEpochs = this.updateEpochs.bind(this);\n    this.updateLearningRate = this.updateLearningRate.bind(this);\n    this.updatebatchIterations = this.updatebatchIterations.bind(this);\n    this.predictTrainedModel = this.predictTrainedModel.bind(this);\n    this.train = this.train.bind(this);\n    this.state = {\n      console: [],\n      epochs: 50,\n      learningRate: 1.5,\n      batchIterations: 1,\n      mode: \"default\"\n    };\n  }\n\n  clearConsole() {\n    this.setState({\n      console: []\n    });\n  }\n\n  train() {\n    const date = new Date();\n    this.setState({\n      console: [...this.state.console, \"[\" + date.toLocaleTimeString() + \"]:Epochs \" + this.state.epochs + \"Iter \" + this.state.batchIterations]\n    });\n  }\n\n  updatebatchIterations(iteration) {\n    this.setState({\n      batchIterations: iteration\n    });\n  }\n\n  updateLearningRate(learningRate) {\n    this.setState({\n      learningRate: learningRate\n    });\n  }\n\n  updateEpochs(epoch) {\n    this.setState({\n      epochs: epoch\n    });\n  }\n\n  trainingModeAction(mode) {\n    this.setState({\n      mode: mode\n    });\n  }\n\n  addConsoleValue(value) {\n    const date = new Date();\n    this.setState({\n      console: [...this.state.console, \"[\" + date.toLocaleTimeString() + \"] \" + value]\n    });\n  }\n\n  renderMode(mode) {\n    switch (mode) {\n      default:\n        return e(\"div\", {}, React.createElement(Button, {\n          label: \"Train with default dataset\",\n          onClick: this.test,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        }), React.createElement(Button, {\n          label: \"Predict with test dataset\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }), React.createElement(Button, {\n          label: \"Predict with pre trained model\",\n          onClick: this.predictTrainedModel,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        }), React.createElement(Button, {\n          label: \"Download model\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }));\n\n      case \"custom\":\n        return e(\"p\", {}, \"custom goest here...\");\n    }\n  }\n\n  render() {\n    return e(\"div\", {\n      className: \"container\",\n      style: {\n        position: \"relative\",\n        top: 100\n      }\n    }, e(\"div\", {\n      className: \"row\"\n    }, e(\"div\", {\n      className: \"col-md-6\"\n    }, e(\"p\", null, \"Console\"), React.createElement(Console, {\n      console: this.state.console,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }), React.createElement(Button, {\n      label: \"Clear\",\n      onClick: this.clearConsole,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    })), e(\"div\", {\n      className: \"col-md-6\"\n    }, e(\"p\", {}, \"Train\"), e(\"p\", null, \"Default Breast Cancer Dataset\"), e(\"div\", {\n      className: \"row\"\n    }, e(\"div\", {\n      className: \"col-md-4\"\n    }, e(\"p\", {}, \"Epochs\"), React.createElement(Input, {\n      placeholder: \"Enter here number of epochs\",\n      value: this.state.epochs,\n      updateValue: this.updateEpochs,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    })), e(\"div\", {\n      className: \"col-md-4\"\n    }, e(\"p\", {}, \"Batch Iterations\"), React.createElement(Input, {\n      placeholder: \"Enter here number of batchIterations\",\n      value: this.state.batchIterations,\n      updateValue: this.updatebatchIterations,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    })), e(\"div\", {\n      className: \"col-md-4\"\n    }, e(\"p\", {}, \"Learning rate\"), React.createElement(Input, {\n      placeholder: \"Learning rate\",\n      value: this.state.learningRate,\n      updateValue: this.updateLearningRate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    })), e(\"div\", {\n      className: \"col-md-6\"\n    }, React.createElement(RadioButton, {\n      label: \"Default dataset train\",\n      value: \"default\",\n      onModeSelection: this.trainingModeAction,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    })), e(\"div\", {\n      className: \"col-md-6\"\n    }, React.createElement(RadioButton, {\n      label: \"Custom dataset train\",\n      value: \"custom\",\n      onModeSelection: this.trainingModeAction,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }))), this.renderMode(this.state.mode))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/acd/Documents/Projects/breast-cancer-ml/src/App.js"],"names":["React","tf","Console","Button","RadioButton","Input","xTrain","yTrain","e","createElement","App","Component","constructor","props","predictTrainedModel","xTest","tensor2d","data","length","yTest","modelStorage","loadLayersModel","tidy","output","predict","predictions","dataSync","correct","wrong","total","yTestData","forEach","value","index","fromTest","addConsoleValue","test","dataset","map","row","id","push","diagnosis","radius_mean","texture_mean","perimeter_mean","area_mean","smoothness_mean","compactness_mean","concavity_mean","concave_points_mean","symmetry_mean","fractal_dimension_mean","radius_se","texture_se","perimeter_se","area_se","smoothness_se","compactness_se","concavity_se","concave_points_se","symmetry_se","fractal_dimension_se","radius_worst","texture_worst","perimeter_worst","area_worst","smoothness_worst","compactness_worst","concavity_worst","concave_points_worst","symmetry_worst","fractal_dimension_worst","xTensorTrain","yTensorTrain","model","sequential","inputLayer","layers","dense","units","inputDim","activation","hiddenLayer","hiddenLayer2","outputLayer","add","compile","optimizer","loss","metrics","batchSize","state","batchIterations","trainEpochs","epochs","valAcc","fit","validationData","callbacks","onEpochEnd","epoch","logs","acc","then","testResult","evaluate","testAccPercent","finalValAccPercent","toFixed","save","clearConsole","bind","trainingModeAction","updateEpochs","updateLearningRate","updatebatchIterations","train","console","learningRate","mode","setState","date","Date","toLocaleTimeString","iteration","renderMode","render","className","style","position","top"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport Console from \"./Components/Console\";\nimport Button from \"./Components/Button\";\nimport RadioButton from \"./Components/RadioButton\";\nimport Input from \"./Components/Input\";\nimport {xTrain,yTrain} from './Dataset'\n\nconst e = React.createElement;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.clearConsole = this.clearConsole.bind(this);\n    this.addConsoleValue = this.addConsoleValue.bind(this);\n    this.trainingModeAction = this.trainingModeAction.bind(this);\n    this.updateEpochs = this.updateEpochs.bind(this);\n    this.updateLearningRate = this.updateLearningRate.bind(this);\n    this.updatebatchIterations = this.updatebatchIterations.bind(this);\n    this.predictTrainedModel = this.predictTrainedModel.bind(this);\n    this.train = this.train.bind(this);\n    this.state = {\n      console: [],\n      epochs: 50,\n      learningRate: 1.5,\n      batchIterations: 1,\n      mode: \"default\"\n    };\n  }\n\n  clearConsole() {\n    this.setState({\n      console: []\n    });\n  }\n\n  train() {\n    const date = new Date();\n    this.setState({\n      console: [\n        ...this.state.console,\n        \"[\" +\n          date.toLocaleTimeString() +\n          \"]:Epochs \" +\n          this.state.epochs +\n          \"Iter \" +\n          this.state.batchIterations\n      ]\n    });\n  }\n\n  updatebatchIterations(iteration) {\n    this.setState({\n      batchIterations: iteration\n    });\n  }\n  updateLearningRate(learningRate) {\n    this.setState({\n      learningRate: learningRate\n    });\n  }\n  updateEpochs(epoch) {\n    this.setState({\n      epochs: epoch\n    });\n  }\n\n  trainingModeAction(mode) {\n    this.setState({\n      mode: mode\n    });\n  }\n\n  addConsoleValue(value) {\n    const date = new Date();\n    this.setState({\n      console: [\n        ...this.state.console,\n        \"[\" + date.toLocaleTimeString() + \"] \" + value\n      ]\n    });\n  }\n\n  renderMode(mode) {\n    switch (mode) {\n      default:\n        return e(\n          \"div\",\n          {},\n          <Button label=\"Train with default dataset\" onClick={this.test} />,\n          <Button label=\"Predict with test dataset\" />,\n          <Button\n            label=\"Predict with pre trained model\"\n            onClick={this.predictTrainedModel}\n          />,\n          <Button label=\"Download model\" />\n        );\n      case \"custom\":\n        return e(\"p\", {}, \"custom goest here...\");\n    }\n  }\n  predictTrainedModel = async () => {\n    const xTest = tf.tensor2d(data.xTest, [data.xTest.length, data.xTest[0].length]);\n    const yTest = tf.tensor2d(data.yTest, [data.yTest.length, data.yTest[0].length]);\n    const modelStorage = await tf.loadLayersModel(\n      \"localstorage://breast-cancer-model\"\n    );\n    tf.tidy(() => {\n      const output = modelStorage.predict(xTest);\n      const predictions = output.dataSync();\n      let correct = 0;\n      let wrong = 0;\n      let total = 0;\n      const yTestData = yTest.dataSync();\n      predictions.forEach((value, index) => {\n        total++;\n        if (yTestData[index] === 1) {\n          const fromTest = value >= 0.5 ? \"Correct\" : \"Wrong\";\n          if (fromTest === \"Correct\") {\n            correct++;\n          } else {\n            wrong++;\n          }\n          this.addConsoleValue(\n            `[${index}] = Malignant, Dataset Test = ${fromTest}`\n          );\n        } else {\n          const fromTest = value <= 0.5 ? \"Correct\" : \"Wrong\";\n          if (fromTest === \"Correct\") {\n            correct++;\n          } else {\n            wrong++;\n          }\n          this.addConsoleValue(\n            `[${index}] = Benign, Dataset Test= ${fromTest} `\n          );\n        }\n      });\n\n      this.addConsoleValue(\n        `Correct=${correct}, Wrong = ${wrong} Total=${total}`\n      );\n    });\n  };\n  test = async () => {\n    this.addConsoleValue(\"Training...\");\n\n    const dataset = data.dataset;\n    const yTrain = [];\n    dataset.map(row => {\n      //We do not need ID so we will delete ID from array\n      delete row.id;\n      //test data using target M=1, B =0;\n      yTrain.push([row.diagnosis === \"M\" ? 1 : 0]);\n      delete row.diagnosis;\n      return row;\n    });\n    const xTrain = dataset.map(row => [\n      row.radius_mean,\n      row.texture_mean,\n      row.perimeter_mean,\n      row.area_mean,\n      row.smoothness_mean,\n      row.compactness_mean,\n      row.concavity_mean,\n      row.concave_points_mean,\n      row.symmetry_mean,\n      row.fractal_dimension_mean,\n      row.radius_se,\n      row.texture_se,\n      row.perimeter_se,\n      row.area_se,\n      row.smoothness_se,\n      row.compactness_se,\n      row.concavity_se,\n      row.concave_points_se,\n      row.symmetry_se,\n      row.fractal_dimension_se,\n      row.radius_worst,\n      row.texture_worst,\n      row.perimeter_worst,\n      row.area_worst,\n      row.smoothness_worst,\n      row.compactness_worst,\n      row.concavity_worst,\n      row.concave_points_worst,\n      row.symmetry_worst,\n      row.fractal_dimension_worst\n    ]);\n\n    const xTensorTrain = tf.tensor2d(xTrain, [xTrain.length, xTrain[0].length]);\n    const yTensorTrain = tf.tensor2d(yTrain, [yTrain.length, yTrain[0].length]);\n\n\n    //Create model as sequential\n\n    const model = tf.sequential();\n    // const learningRate = this.state.learningRate;\n    // const optimizer = tf.train.sgd(learningRate);\n    const inputLayer = tf.layers.dense({\n      units: 16,\n      inputDim: 30,\n      activation: \"relu\"\n    });\n\n    const hiddenLayer = tf.layers.dense({\n      units: 8,\n      activation: \"relu\"\n    });\n\n    const hiddenLayer2 = tf.layers.dense({\n      units: 8,\n      activation: \"relu\"\n    });\n    const outputLayer = tf.layers.dense({\n      units: 1,\n      activation: \"sigmoid\"\n    });\n\n    model.add(inputLayer);\n    model.add(hiddenLayer);\n    model.add(hiddenLayer2);\n    // model.add(hiddenLayer3);\n    model.add(outputLayer);\n\n    model.compile({\n      optimizer: \"rmsprop\", //learning rate\n      loss: \"meanSquaredError\",\n      metrics: [\"accuracy\"]\n    });\n\n    const xTest = tf.tensor2d(data.xTest, [data.xTest.length, 30]);\n    const yTest = tf.tensor2d(data.yTest, [data.yTest.length, 1]);\n    const batchSize = this.state.batchIterations || 0;\n    const trainEpochs = this.state.epochs || 0;\n    // const totalNumBatches = Math.ceil(xTensorTrain.shape[0] * (1 - validationSplit) / batchSize) *trainEpochs;\n    let valAcc;\n    await model\n      .fit(xTensorTrain, yTensorTrain, {\n        batchSize: batchSize,\n        epochs: trainEpochs,\n        validationData: [xTest, yTest],\n        callbacks: {\n          onEpochEnd: async (epoch, logs) => {\n            valAcc = logs.acc;\n            this.addConsoleValue(\n              `Epoch =${epoch} Loss=${logs.loss}  Acc=${logs.acc}`\n            );\n          }\n        }\n      })\n      .then(async () => {\n        const testResult = model.evaluate(xTensorTrain, yTensorTrain);\n        const testAccPercent = testResult[0].dataSync()[0] * 100;\n        const finalValAccPercent = valAcc * 100;\n        this.addConsoleValue(\n          `Final validation accuracy: ${finalValAccPercent.toFixed(1)}%; ` +\n            `Final test accuracy: ${testAccPercent.toFixed(1)}%`\n        );\n\n        await model.save(\"localstorage://breast-cancer-model\");\n        this.addConsoleValue(\"Model savet to localStorage\");\n      });\n  };\n\n  render() {\n    return e(\n      \"div\",\n      {\n        className: \"container\",\n        style: {\n          position: \"relative\",\n          top: 100\n        }\n      },\n      e(\n        \"div\",\n        { className: \"row\" },\n        e(\n          \"div\",\n          { className: \"col-md-6\" },\n          e(\"p\", null, \"Console\"),\n          <Console console={this.state.console} />,\n          <Button label=\"Clear\" onClick={this.clearConsole} />\n        ),\n        e(\n          \"div\",\n          { className: \"col-md-6\" },\n          e(\"p\", {}, \"Train\"),\n          e(\"p\", null, \"Default Breast Cancer Dataset\"),\n          e(\n            \"div\",\n            { className: \"row\" },\n            e(\n              \"div\",\n              { className: \"col-md-4\" },\n              e(\"p\", {}, \"Epochs\"),\n              <Input\n                placeholder=\"Enter here number of epochs\"\n                value={this.state.epochs}\n                updateValue={this.updateEpochs}\n              />\n            ),\n            e(\n              \"div\",\n              { className: \"col-md-4\" },\n              e(\"p\", {}, \"Batch Iterations\"),\n              <Input\n                placeholder=\"Enter here number of batchIterations\"\n                value={this.state.batchIterations}\n                updateValue={this.updatebatchIterations}\n              />\n            ),\n            e(\n              \"div\",\n              { className: \"col-md-4\" },\n              e(\"p\", {}, \"Learning rate\"),\n              <Input\n                placeholder=\"Learning rate\"\n                value={this.state.learningRate}\n                updateValue={this.updateLearningRate}\n              />\n            ),\n            e(\n              \"div\",\n              { className: \"col-md-6\" },\n              <RadioButton\n                label=\"Default dataset train\"\n                value=\"default\"\n                onModeSelection={this.trainingModeAction}\n              />\n            ),\n            e(\n              \"div\",\n              { className: \"col-md-6\" },\n              <RadioButton\n                label=\"Custom dataset train\"\n                value=\"custom\"\n                onModeSelection={this.trainingModeAction}\n              />\n            )\n          ),\n          this.renderMode(this.state.mode)\n        )\n      )\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}