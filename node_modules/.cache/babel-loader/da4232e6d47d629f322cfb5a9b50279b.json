{"ast":null,"code":"import _toConsumableArray from\"/Users/acd/Documents/Projects/breast-cancer-ml/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _regeneratorRuntime from\"/Users/acd/Documents/Projects/breast-cancer-ml/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/acd/Documents/Projects/breast-cancer-ml/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/Users/acd/Documents/Projects/breast-cancer-ml/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/acd/Documents/Projects/breast-cancer-ml/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/acd/Documents/Projects/breast-cancer-ml/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/acd/Documents/Projects/breast-cancer-ml/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _assertThisInitialized from\"/Users/acd/Documents/Projects/breast-cancer-ml/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/Users/acd/Documents/Projects/breast-cancer-ml/node_modules/@babel/runtime/helpers/esm/inherits\";import React from\"react\";import\"bootstrap/dist/css/bootstrap.min.css\";import*as tf from\"@tensorflow/tfjs\";import Console from\"./Components/Console\";import Button from\"./Components/Button\";import RadioButton from\"./Components/RadioButton\";import Input from\"./Components/Input\";import{dataset,xTest,yTest}from\"./Dataset/datasetJson\";import{filterData}from\"./Dataset\";var e=React.createElement;var App=/*#__PURE__*/function(_React$Component){_inherits(App,_React$Component);function App(props){var _this;_classCallCheck(this,App);_this=_possibleConstructorReturn(this,_getPrototypeOf(App).call(this,props));_this.predictTrainedModel=/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var xTestData,yTestData,modelStorage;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:xTestData=tf.tensor2d(xTest,[xTest.length,xTest[0].length]);yTestData=tf.tensor2d(yTest,[yTest.length,yTest[0].length]);_context.next=4;return tf.loadLayersModel(\"localstorage://breast-cancer-model\");case 4:modelStorage=_context.sent;tf.tidy(function(){var output=modelStorage.predict(xTestData);var predictions=output.dataSync();var correct=0;var wrong=0;var total=0;var yTestValues=yTestData.dataSync();predictions.forEach(function(value,index){total++;console.log(value,yTestValues[index]);if(yTestValues[index]===1){var result=\"Malignant\";if(value>0.5){result=\"Malignant\";correct++;}else{result=\"Benign\";wrong++;}_this.addConsoleValue(\"Test data [\".concat(index,\"] Predict = Malignant,  Test diagnosis = \").concat(result));}else if(yTestValues[index]===0){var _result=\"Benign\";if(value<0.5){_result=\"Benign\";console.log(\"here?2???\");correct++;}else{_result=\"Malignant\";wrong++;}_this.addConsoleValue(\"Test data [\".concat(index,\"] Predict = Benign,  Test diagnosis = \").concat(_result));}});_this.addConsoleValue(\"Correct=\".concat(correct,\", Wrong = \").concat(wrong,\" Total=\").concat(total));});case 6:case\"end\":return _context.stop();}}},_callee);}));_this.trainModel=/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){var data,xTensorTrain,yTensorTrain,model,batchSize,trainEpochs,inputLayer,hiddenLayer,hiddenLayer2,outputLayer,valAcc;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_this.addConsoleValue(\"Start training...\");data=filterData(dataset);xTensorTrain=tf.tensor2d(data.xTrain,[data.xTrain.length,data.xTrain[0].length]);yTensorTrain=tf.tensor2d(data.yTrain,[data.yTrain.length,data.yTrain[0].length]);//Create model as sequential\nmodel=tf.sequential();// const learningRate = parseFloat(this.state.learningRate) || 0;\nbatchSize=parseInt(_this.state.batchIterations)||0;trainEpochs=parseInt(_this.state.epochs)||0;// const optimizer = tf.train.sgd(learningRate);\ninputLayer=tf.layers.dense({units:30,inputDim:30,activation:\"relu\"});hiddenLayer=tf.layers.dense({units:30,activation:\"relu\"});hiddenLayer2=tf.layers.dense({units:30,activation:\"relu\"});outputLayer=tf.layers.dense({units:1,activation:\"sigmoid\"});model.add(inputLayer);model.add(hiddenLayer);model.add(hiddenLayer2);model.add(outputLayer);model.compile({optimizer:\"rmsprop\",loss:\"meanSquaredError\",metrics:[\"accuracy\"]});_context4.next=18;return model.fit(xTensorTrain,yTensorTrain,{batchSize:batchSize,epochs:trainEpochs,callbacks:{onEpochEnd:function(){var _onEpochEnd=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(epoch,logs){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:valAcc=logs.acc;_this.addConsoleValue(\"Epoch[\".concat(epoch,\"] Loss:\").concat(logs.loss,\"  Acc:\").concat(logs.acc));case 2:case\"end\":return _context2.stop();}}},_callee2);}));function onEpochEnd(_x,_x2){return _onEpochEnd.apply(this,arguments);}return onEpochEnd;}()}}).then(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var testResult,testAccPercent,finalValAccPercent;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:testResult=model.evaluate(xTensorTrain,yTensorTrain);testAccPercent=testResult[0].dataSync()[0]*100;finalValAccPercent=valAcc*100;_this.addConsoleValue(\"Final validation accuracy: \".concat(finalValAccPercent.toFixed(1),\"%; \")+\"Final test accuracy: \".concat(testAccPercent.toFixed(1),\"%\"));_context3.next=6;return model.save(\"localstorage://breast-cancer-model\");case 6:_this.addConsoleValue(\"Model saved to LocalStorage\");case 7:case\"end\":return _context3.stop();}}},_callee3);})));case 18:case\"end\":return _context4.stop();}}},_callee4);}));_this.clearConsole=_this.clearConsole.bind(_assertThisInitialized(_this));_this.addConsoleValue=_this.addConsoleValue.bind(_assertThisInitialized(_this));_this.trainingModeAction=_this.trainingModeAction.bind(_assertThisInitialized(_this));_this.updateEpochs=_this.updateEpochs.bind(_assertThisInitialized(_this));// this.updateLearningRate = this.updateLearningRate.bind(this);\n_this.updatebatchIterations=_this.updatebatchIterations.bind(_assertThisInitialized(_this));_this.predictTrainedModel=_this.predictTrainedModel.bind(_assertThisInitialized(_this));_this.train=_this.train.bind(_assertThisInitialized(_this));_this.state={console:[],epochs:50,// learningRate: 1.5,\nbatchIterations:1,mode:\"default\"};return _this;}_createClass(App,[{key:\"clearConsole\",value:function clearConsole(){this.setState({console:[]});}},{key:\"train\",value:function train(){var date=new Date();this.setState({console:[].concat(_toConsumableArray(this.state.console),[\"[\"+date.toLocaleTimeString()+\"]:Epochs \"+this.state.epochs+\"Iter \"+this.state.batchIterations])});}},{key:\"updatebatchIterations\",value:function updatebatchIterations(iteration){this.setState({batchIterations:iteration});}},{key:\"updateLearningRate\",value:function updateLearningRate(learningRate){this.setState({learningRate:learningRate});}},{key:\"updateEpochs\",value:function updateEpochs(epoch){this.setState({epochs:epoch});}},{key:\"trainingModeAction\",value:function trainingModeAction(mode){this.setState({mode:mode});}},{key:\"addConsoleValue\",value:function addConsoleValue(value){var date=new Date();this.setState({console:[].concat(_toConsumableArray(this.state.console),[\"[\"+date.toLocaleTimeString()+\"] \"+value])});}},{key:\"renderMode\",value:function renderMode(mode){switch(mode){default:return e(\"div\",{},React.createElement(Button,{label:\"Train\",onClick:this.trainModel}),React.createElement(Button,{label:\"Predict\",onClick:this.predictTrainedModel}));case\"custom\":return e(\"p\",{},\"custom goest here...\");}}},{key:\"render\",value:function render(){return e(\"div\",{className:\"container\",style:{position:\"relative\",top:100}},e(\"div\",{className:\"row\"},e(\"div\",{className:\"col-md-6\"},e(\"p\",null,\"Console\"),React.createElement(Console,{console:this.state.console}),React.createElement(Button,{label:\"Clear\",onClick:this.clearConsole})),e(\"div\",{className:\"col-md-6\"},e(\"p\",{},\"Train\"),e(\"p\",null,\"Default Breast Cancer Dataset\"),e(\"div\",{className:\"row\"},e(\"div\",{className:\"col-md-6\"},e(\"p\",{},\"Epochs\"),React.createElement(Input,{placeholder:\"Enter here number of epochs\",value:this.state.epochs,updateValue:this.updateEpochs})),e(\"div\",{className:\"col-md-6\"},e(\"p\",{},\"Batch Iterations\"),React.createElement(Input,{placeholder:\"Enter here number of batchIterations\",value:this.state.batchIterations,updateValue:this.updatebatchIterations})),// e(\n//   \"div\",\n//   { className: \"col-md-4\" },\n//   e(\"p\", {}, \"Learning rate\"),\n//   <Input\n//     placeholder=\"Learning rate\"\n//     value={this.state.learningRate}\n//     updateValue={this.updateLearningRate}\n//   />\n// ),\ne(\"div\",{className:\"col-md-6\"},React.createElement(RadioButton,{label:\"Default dataset train\",value:\"default\",onModeSelection:this.trainingModeAction}))// e(\n//   \"div\",\n//   { className: \"col-md-6\" },\n//   <RadioButton\n//     label=\"Custom dataset train\"\n//     value=\"custom\"\n//     onModeSelection={this.trainingModeAction}\n//   />\n// )\n),this.renderMode(this.state.mode))));}}]);return App;}(React.Component);export default App;","map":{"version":3,"sources":["/Users/acd/Documents/Projects/breast-cancer-ml/src/App.js"],"names":["React","tf","Console","Button","RadioButton","Input","dataset","xTest","yTest","filterData","e","createElement","App","props","predictTrainedModel","xTestData","tensor2d","length","yTestData","loadLayersModel","modelStorage","tidy","output","predict","predictions","dataSync","correct","wrong","total","yTestValues","forEach","value","index","console","log","result","addConsoleValue","trainModel","data","xTensorTrain","xTrain","yTensorTrain","yTrain","model","sequential","batchSize","parseInt","state","batchIterations","trainEpochs","epochs","inputLayer","layers","dense","units","inputDim","activation","hiddenLayer","hiddenLayer2","outputLayer","add","compile","optimizer","loss","metrics","fit","callbacks","onEpochEnd","epoch","logs","valAcc","acc","then","testResult","evaluate","testAccPercent","finalValAccPercent","toFixed","save","clearConsole","bind","trainingModeAction","updateEpochs","updatebatchIterations","train","mode","setState","date","Date","toLocaleTimeString","iteration","learningRate","className","style","position","top","renderMode","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport Console from \"./Components/Console\";\nimport Button from \"./Components/Button\";\nimport RadioButton from \"./Components/RadioButton\";\nimport Input from \"./Components/Input\";\nimport { dataset, xTest, yTest } from \"./Dataset/datasetJson\";\nimport { filterData } from \"./Dataset\";\n\nconst e = React.createElement;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.clearConsole = this.clearConsole.bind(this);\n    this.addConsoleValue = this.addConsoleValue.bind(this);\n    this.trainingModeAction = this.trainingModeAction.bind(this);\n    this.updateEpochs = this.updateEpochs.bind(this);\n    // this.updateLearningRate = this.updateLearningRate.bind(this);\n    this.updatebatchIterations = this.updatebatchIterations.bind(this);\n    this.predictTrainedModel = this.predictTrainedModel.bind(this);\n    this.train = this.train.bind(this);\n    this.state = {\n      console: [],\n      epochs: 50,\n      // learningRate: 1.5,\n      batchIterations: 1,\n      mode: \"default\"\n    };\n  }\n\n  clearConsole() {\n    this.setState({\n      console: []\n    });\n  }\n\n  train() {\n    const date = new Date();\n    this.setState({\n      console: [\n        ...this.state.console,\n        \"[\" +\n          date.toLocaleTimeString() +\n          \"]:Epochs \" +\n          this.state.epochs +\n          \"Iter \" +\n          this.state.batchIterations\n      ]\n    });\n  }\n\n  updatebatchIterations(iteration) {\n    this.setState({\n      batchIterations: iteration\n    });\n  }\n  updateLearningRate(learningRate) {\n    this.setState({\n      learningRate: learningRate\n    });\n  }\n  updateEpochs(epoch) {\n    this.setState({\n      epochs: epoch\n    });\n  }\n\n  trainingModeAction(mode) {\n    this.setState({\n      mode: mode\n    });\n  }\n\n  addConsoleValue(value) {\n    const date = new Date();\n    this.setState({\n      console: [\n        ...this.state.console,\n        \"[\" + date.toLocaleTimeString() + \"] \" + value\n      ]\n    });\n  }\n\n  renderMode(mode) {\n    switch (mode) {\n      default:\n        return e(\n          \"div\",\n          {},\n          <Button label=\"Train\" onClick={this.trainModel} />,\n          <Button label=\"Predict\" onClick={this.predictTrainedModel} />\n        );\n      case \"custom\":\n        return e(\"p\", {}, \"custom goest here...\");\n    }\n  }\n  predictTrainedModel = async () => {\n    const xTestData = tf.tensor2d(xTest, [xTest.length, xTest[0].length]);\n    const yTestData = tf.tensor2d(yTest, [yTest.length, yTest[0].length]);\n    const modelStorage = await tf.loadLayersModel(\n      \"localstorage://breast-cancer-model\"\n    );\n    tf.tidy(() => {\n      const output = modelStorage.predict(xTestData);\n      const predictions = output.dataSync();\n      let correct = 0;\n      let wrong = 0;\n      let total = 0;\n      const yTestValues = yTestData.dataSync();\n      predictions.forEach((value, index) => {\n\n        total++;\n        console.log(value,yTestValues[index]);\n        if (yTestValues[index] === 1 ) {\n          let result = \"Malignant\";\n          if (value > 0.5) {\n            result = \"Malignant\";\n            correct++;\n          } else {\n            result = \"Benign\";\n            wrong++;\n          }\n          this.addConsoleValue(\n            `Test data [${index}] Predict = Malignant,  Test diagnosis = ${result}`\n          );\n        } else if (yTestValues[index] === 0) {\n          let result = \"Benign\";\n          if (value < 0.5) {\n            result = \"Benign\";\n            console.log(\"here?2???\");\n            correct++;\n          } else {\n            result = \"Malignant\";\n            wrong++;\n          }\n          this.addConsoleValue(\n            `Test data [${index}] Predict = Benign,  Test diagnosis = ${result}`\n          );\n        }\n      });\n      this.addConsoleValue(\n        `Correct=${correct}, Wrong = ${wrong} Total=${total}`\n      );\n    });\n  };\n  trainModel = async () => {\n    this.addConsoleValue(\"Start training...\");\n\n    const data = filterData(dataset);\n\n    const xTensorTrain = tf.tensor2d(data.xTrain, [\n      data.xTrain.length,\n      data.xTrain[0].length\n    ]);\n    const yTensorTrain = tf.tensor2d(data.yTrain, [\n      data.yTrain.length,\n      data.yTrain[0].length\n    ]);\n\n    //Create model as sequential\n\n    const model = tf.sequential();\n    // const learningRate = parseFloat(this.state.learningRate) || 0;\n    const batchSize = parseInt(this.state.batchIterations) || 0;\n    const trainEpochs = parseInt(this.state.epochs) || 0;\n\n    // const optimizer = tf.train.sgd(learningRate);\n\n    const inputLayer = tf.layers.dense({\n      units: 30,\n      inputDim: 30,\n      activation: \"relu\"\n    });\n\n    const hiddenLayer = tf.layers.dense({\n      units: 30,\n      activation: \"relu\"\n    });\n\n    const hiddenLayer2 = tf.layers.dense({\n      units: 30,\n      activation: \"relu\"\n    });\n    const outputLayer = tf.layers.dense({\n      units: 1,\n      activation: \"sigmoid\"\n    });\n\n    model.add(inputLayer);\n    model.add(hiddenLayer);\n    model.add(hiddenLayer2);\n    model.add(outputLayer);\n\n    model.compile({\n      optimizer: \"rmsprop\",\n      loss: \"meanSquaredError\",\n      metrics: [\"accuracy\"]\n    });\n\n    let valAcc;\n    await model\n      .fit(xTensorTrain, yTensorTrain, {\n        batchSize: batchSize,\n        epochs: trainEpochs,\n        callbacks: {\n          onEpochEnd: async (epoch, logs) => {\n            valAcc = logs.acc;\n            this.addConsoleValue(\n              `Epoch[${epoch}] Loss:${logs.loss}  Acc:${logs.acc}`\n            );\n          }\n        }\n      })\n      .then(async () => {\n        const testResult = model.evaluate(xTensorTrain, yTensorTrain);\n        const testAccPercent = testResult[0].dataSync()[0] * 100;\n        const finalValAccPercent = valAcc * 100;\n        this.addConsoleValue(\n          `Final validation accuracy: ${finalValAccPercent.toFixed(1)}%; ` +\n            `Final test accuracy: ${testAccPercent.toFixed(1)}%`\n        );\n\n        await model.save(\"localstorage://breast-cancer-model\");\n        this.addConsoleValue(\"Model saved to LocalStorage\");\n      });\n  };\n\n  render() {\n    return e(\n      \"div\",\n      {\n        className: \"container\",\n        style: {\n          position: \"relative\",\n          top: 100\n        }\n      },\n      e(\n        \"div\",\n        { className: \"row\" },\n        e(\n          \"div\",\n          { className: \"col-md-6\" },\n          e(\"p\", null, \"Console\"),\n          <Console console={this.state.console} />,\n          <Button label=\"Clear\" onClick={this.clearConsole} />\n        ),\n        e(\n          \"div\",\n          { className: \"col-md-6\" },\n          e(\"p\", {}, \"Train\"),\n          e(\"p\", null, \"Default Breast Cancer Dataset\"),\n          e(\n            \"div\",\n            { className: \"row\" },\n            e(\n              \"div\",\n              { className: \"col-md-6\" },\n              e(\"p\", {}, \"Epochs\"),\n              <Input\n                placeholder=\"Enter here number of epochs\"\n                value={this.state.epochs}\n                updateValue={this.updateEpochs}\n              />\n            ),\n            e(\n              \"div\",\n              { className: \"col-md-6\" },\n              e(\"p\", {}, \"Batch Iterations\"),\n              <Input\n                placeholder=\"Enter here number of batchIterations\"\n                value={this.state.batchIterations}\n                updateValue={this.updatebatchIterations}\n              />\n            ),\n            // e(\n            //   \"div\",\n            //   { className: \"col-md-4\" },\n            //   e(\"p\", {}, \"Learning rate\"),\n            //   <Input\n            //     placeholder=\"Learning rate\"\n            //     value={this.state.learningRate}\n            //     updateValue={this.updateLearningRate}\n            //   />\n            // ),\n            e(\n              \"div\",\n              { className: \"col-md-6\" },\n              <RadioButton\n                label=\"Default dataset train\"\n                value=\"default\"\n                onModeSelection={this.trainingModeAction}\n              />\n            )\n            // e(\n            //   \"div\",\n            //   { className: \"col-md-6\" },\n            //   <RadioButton\n            //     label=\"Custom dataset train\"\n            //     value=\"custom\"\n            //     onModeSelection={this.trainingModeAction}\n            //   />\n            // )\n          ),\n          this.renderMode(this.state.mode)\n        )\n      )\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}