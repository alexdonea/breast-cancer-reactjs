{"ast":null,"code":"var _jsxFileName = \"/Users/acd/Documents/Projects/breast-cancer-ml/src/App.js\";\nimport React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport dataset from \"./Dataset\";\nimport Console from \"./Components/Console\";\nimport Button from \"./Components/Button\";\nimport RadioButton from \"./Components/RadioButton\";\nimport Input from \"./Components/Input\";\nconst e = React.createElement;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.test = async () => {\n      this.addConsoleValue(\"Training...\"); //Create model as sequential\n\n      const model = tf.sequential();\n      const inputLayer = tf.layers.dense({\n        units: 16,\n        inputDim: 30,\n        activation: \"relu\"\n      });\n      const hiddenLayer = tf.layers.dense({\n        units: 8,\n        activation: \"relu\"\n      });\n      const outputLayer = tf.layers.dense({\n        units: 1,\n        activation: \"sigmoid\"\n      });\n      model.add(inputLayer);\n      model.add(hiddenLayer);\n      model.add(outputLayer);\n      model.compile({\n        optimizer: \"rmsprop\",\n        loss: \"meanSquaredError\",\n        metrics: ['accuracy']\n      });\n      const xTrain = tf.tensor2d(dataset.xTrain.map(item => [item[0], item[1], item[2], item[3], item[4], item[5], item[6], item[7], item[8], item[9], item[10], item[11], item[12], item[13], item[14], item[15], item[16], item[17], item[18], item[19], item[20], item[21], item[22], item[23], item[24], item[25], item[26], item[27], item[28], item[29]]), [454, 30]);\n      const yTrain = tf.tensor2d(dataset.yTrain.map(item => [item[0]]), [454, 1]);\n      const xTest = tf.tensor2d(dataset.xTest.map(item => [item[0], item[1], item[2], item[3], item[4], item[5], item[6], item[7], item[8], item[9], item[10], item[11], item[12], item[13], item[14], item[15], item[16], item[17], item[18], item[19], item[20], item[21], item[22], item[23], item[24], item[25], item[26], item[27], item[28], item[29]]), [114, 30]);\n      const yTest = tf.tensor2d(dataset.yTest.map(item => [item[0]]), [114, 1]); // model.fit(xTrain,yTrain,{\n      //     batchSize:1,\n      //     epochs:2,\n      // }).then(()=>{\n      //   console.log('done');\n      // });\n      // eppoch\n      // /10 eppochs\n      // for (let i=0;i<this.state.eppoch;i++){\n\n      let trainBatchCount = 0;\n      let valAcc = 0;\n      let onIteration = 0;\n      const batchSize = this.state.iterations;\n      const trainEpochs = this.state.epochs;\n      const validationSplit = 0.15; //learning rate\n\n      const totalNumBatches = Math.ceil(xTrain[0] * (1 - validationSplit) / batchSize) * trainEpochs;\n      await model.fit(xTrain, yTrain, {\n        batchSize: this.state.iterations,\n        epochs: this.state.epochs,\n        callbacks: {\n          onBatchEnd: async (batch, logs) => {\n            trainBatchCount++; // console.table(logs);\n            // const training = (trainBatchCount / totalNumBatches * 100).toFixed(1);\n\n            this.addConsoleValue(\"Batch =\".concat(trainBatchCount, \" Loss=\").concat(logs.loss, \"  Acc=\").concat(logs.acc));\n\n            if (trainBatchCount === batchSize) {\n              console.table(logs);\n              this.addConsoleValue(\"On batch end, Batch=\".concat(batch, \", Log loss=\").concat(logs.loss, \"  acc=\").concat(logs.acc));\n              trainBatchCount = 0;\n            }\n          },\n          onEpochEnd: async (epoch, logs) => {\n            valAcc = logs.val_acc;\n            this.addConsoleValue(\"Epoch =\".concat(epoch, \" Loss=\").concat(logs.val_loss, \"  Acc=\").concat(logs.val_acc)); // if (onIteration) {\n            //   // this.addConsoleValue(`On epoch end, ${epoch}, ${logs}`);\n            // }\n          }\n        }\n      }).then(info => {// console.log('Final accuracy', info.history.acc);\n        // this.addConsoleValue(info.history);\n      }); // console.log(`Iteration ${i}: ${res.history.loss}`);\n      // }\n      // console.log('finisheeeed,predicting');\n      // model.predict(xTest,yTest).print();\n      // await model.save('downloads://my-model');\n      // const json = fetch('./trained_alex.json');\n      // // const model2 = await tf.loadLayersModel('file:trained_alex.json');\n      // console.log('model2',json);\n    };\n\n    this.clearConsole = this.clearConsole.bind(this);\n    this.addConsoleValue = this.addConsoleValue.bind(this);\n    this.trainingModeAction = this.trainingModeAction.bind(this);\n    this.updateEpochs = this.updateEpochs.bind(this);\n    this.updateIterations = this.updateIterations.bind(this);\n    this.train = this.train.bind(this);\n    this.state = {\n      console: [],\n      epochs: 2,\n      iterations: 30,\n      mode: \"default\",\n      trainedModel: []\n    };\n  }\n\n  clearConsole() {\n    this.setState({\n      console: []\n    });\n  }\n\n  train() {\n    const date = new Date();\n    this.setState({\n      console: [...this.state.console, \"[\" + date.toLocaleTimeString() + \"]:Epochs \" + this.state.epochs + \"Iter \" + this.state.iterations]\n    });\n  }\n\n  updateIterations(iteration) {\n    this.setState({\n      iterations: iteration\n    });\n  }\n\n  updateEpochs(epoch) {\n    this.setState({\n      epochs: epoch\n    });\n  }\n\n  trainingModeAction(mode) {\n    this.setState({\n      mode: mode\n    });\n  }\n\n  addConsoleValue(value) {\n    const date = new Date();\n    this.setState({\n      console: [...this.state.console, \"[\" + date.toLocaleTimeString() + \"] \" + value]\n    });\n  }\n\n  renderMode(mode) {\n    switch (mode) {\n      default:\n        return e(\"div\", {}, React.createElement(Button, {\n          label: \"Train with default dataset\",\n          onClick: this.test,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        }), React.createElement(Button, {\n          label: \"Predict with test dataset\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85\n          },\n          __self: this\n        }), React.createElement(Button, {\n          label: \"Predict with pre trained modelt\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        }));\n\n      case \"custom\":\n        return e(\"p\", {}, \"custom goest here...\");\n    }\n  }\n\n  render() {\n    return e(\"div\", {\n      className: \"container\",\n      style: {\n        position: \"relative\",\n        top: 100\n      }\n    }, e(\"div\", {\n      className: \"row\"\n    }, e(\"div\", {\n      className: \"col-md-6\"\n    }, e(\"p\", null, \"Console\"), React.createElement(Console, {\n      console: this.state.console,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }), React.createElement(Button, {\n      label: \"Add\",\n      onClick: this.train,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }), React.createElement(Button, {\n      label: \"Clear\",\n      onClick: this.clearConsole,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    })), e(\"div\", {\n      className: \"col-md-6\"\n    }, e(\"p\", {}, \"Train\"), e(\"p\", null, \"Default Breast Cancer Dataset\"), e(\"div\", {\n      className: \"row\"\n    }, e(\"div\", {\n      className: \"col-md-6\"\n    }, e(\"p\", {}, \"Epochs\"), React.createElement(Input, {\n      placeholder: \"Enter here number of epochs\",\n      value: this.state.epochs,\n      updateValue: this.updateEpochs,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    })), e(\"div\", {\n      className: \"col-md-6\"\n    }, e(\"p\", {}, \"Iterations\"), React.createElement(Input, {\n      placeholder: \"Enter here number of iterations\",\n      value: this.state.iterations,\n      updateValue: this.updateIterations,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    })), e(\"div\", {\n      className: \"col-md-6\"\n    }, React.createElement(RadioButton, {\n      label: \"Default dataset train\",\n      value: \"default\",\n      onModeSelection: this.trainingModeAction,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    })), e(\"div\", {\n      className: \"col-md-6\"\n    }, React.createElement(RadioButton, {\n      label: \"Custom dataset train\",\n      value: \"custom\",\n      onModeSelection: this.trainingModeAction,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }))), this.renderMode(this.state.mode))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/acd/Documents/Projects/breast-cancer-ml/src/App.js"],"names":["React","tf","dataset","Console","Button","RadioButton","Input","e","createElement","App","Component","constructor","props","test","addConsoleValue","model","sequential","inputLayer","layers","dense","units","inputDim","activation","hiddenLayer","outputLayer","add","compile","optimizer","loss","metrics","xTrain","tensor2d","map","item","yTrain","xTest","yTest","trainBatchCount","valAcc","onIteration","batchSize","state","iterations","trainEpochs","epochs","validationSplit","totalNumBatches","Math","ceil","fit","callbacks","onBatchEnd","batch","logs","acc","console","table","onEpochEnd","epoch","val_acc","val_loss","then","info","clearConsole","bind","trainingModeAction","updateEpochs","updateIterations","train","mode","trainedModel","setState","date","Date","toLocaleTimeString","iteration","value","renderMode","render","className","style","position","top"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport dataset from \"./Dataset\";\nimport Console from \"./Components/Console\";\nimport Button from \"./Components/Button\";\nimport RadioButton from \"./Components/RadioButton\";\nimport Input from \"./Components/Input\";\n\nconst e = React.createElement;\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.clearConsole = this.clearConsole.bind(this);\n    this.addConsoleValue = this.addConsoleValue.bind(this);\n    this.trainingModeAction = this.trainingModeAction.bind(this);\n    this.updateEpochs = this.updateEpochs.bind(this);\n    this.updateIterations = this.updateIterations.bind(this);\n    this.train = this.train.bind(this);\n    this.state = {\n      console: [],\n      epochs: 2,\n      iterations: 30,\n      mode: \"default\",\n      trainedModel: []\n    };\n  }\n\n\n  clearConsole() {\n    this.setState({\n      console: []\n    });\n  }\n\n  train() {\n    const date = new Date();\n    this.setState({\n      console: [\n        ...this.state.console,\n        \"[\" +\n          date.toLocaleTimeString() +\n          \"]:Epochs \" +\n          this.state.epochs +\n          \"Iter \" +\n          this.state.iterations\n      ]\n    });\n  }\n\n  updateIterations(iteration) {\n    this.setState({\n      iterations: iteration\n    });\n  }\n  updateEpochs(epoch) {\n    this.setState({\n      epochs: epoch\n    });\n  }\n\n  trainingModeAction(mode) {\n    this.setState({\n      mode: mode\n    });\n  }\n\n  addConsoleValue(value) {\n    const date = new Date();\n    this.setState({\n      console: [\n        ...this.state.console,\n        \"[\" + date.toLocaleTimeString() + \"] \" + value\n      ]\n    });\n  }\n\n  renderMode(mode) {\n    switch (mode) {\n      default:\n        return e(\n          \"div\",\n          {},\n          <Button label=\"Train with default dataset\" onClick={this.test} />,\n          <Button label=\"Predict with test dataset\" />,\n          <Button label=\"Predict with pre trained modelt\" />\n        );\n      case \"custom\":\n        return e(\"p\", {}, \"custom goest here...\");\n    }\n  }\n\n  test = async () => {\n    this.addConsoleValue(\"Training...\");\n\n    //Create model as sequential\n\n    const model = tf.sequential();\n\n    const inputLayer = tf.layers.dense({\n      units: 16,\n      inputDim: 30,\n      activation: \"relu\"\n    });\n\n    const hiddenLayer = tf.layers.dense({\n      units: 8,\n      activation: \"relu\"\n    });\n\n    const outputLayer = tf.layers.dense({\n      units: 1,\n      activation: \"sigmoid\"\n    });\n\n    model.add(inputLayer);\n    model.add(hiddenLayer);\n    model.add(outputLayer);\n\n    model.compile({\n      optimizer: \"rmsprop\",\n      loss: \"meanSquaredError\",\n      metrics:['accuracy']\n\n    });\n\n    const xTrain = tf.tensor2d(\n      dataset.xTrain.map(item => [\n        item[0],\n        item[1],\n        item[2],\n        item[3],\n        item[4],\n        item[5],\n        item[6],\n        item[7],\n        item[8],\n        item[9],\n        item[10],\n        item[11],\n        item[12],\n        item[13],\n        item[14],\n        item[15],\n        item[16],\n        item[17],\n        item[18],\n        item[19],\n        item[20],\n        item[21],\n        item[22],\n        item[23],\n        item[24],\n        item[25],\n        item[26],\n        item[27],\n        item[28],\n        item[29]\n      ]),\n      [454, 30]\n    );\n\n    const yTrain = tf.tensor2d(dataset.yTrain.map(item => [item[0]]), [454, 1]);\n\n    const xTest = tf.tensor2d(\n      dataset.xTest.map(item => [\n        item[0],\n        item[1],\n        item[2],\n        item[3],\n        item[4],\n        item[5],\n        item[6],\n        item[7],\n        item[8],\n        item[9],\n        item[10],\n        item[11],\n        item[12],\n        item[13],\n        item[14],\n        item[15],\n        item[16],\n        item[17],\n        item[18],\n        item[19],\n        item[20],\n        item[21],\n        item[22],\n        item[23],\n        item[24],\n        item[25],\n        item[26],\n        item[27],\n        item[28],\n        item[29]\n      ]),\n      [114, 30]\n    );\n\n    const yTest = tf.tensor2d(dataset.yTest.map(item => [item[0]]), [114, 1]);\n\n    // model.fit(xTrain,yTrain,{\n    //     batchSize:1,\n    //     epochs:2,\n    // }).then(()=>{\n    //   console.log('done');\n\n    // });\n    // eppoch\n\n    // /10 eppochs\n    // for (let i=0;i<this.state.eppoch;i++){\n      let trainBatchCount = 0;\n      let valAcc=0;\n      let onIteration = 0;\n      const batchSize = this.state.iterations;\n      const  trainEpochs = this.state.epochs;\n      const validationSplit = 0.15 //learning rate\n      const totalNumBatches = Math.ceil(xTrain[0] * (1 - validationSplit) / batchSize) * trainEpochs;\n     \n    await model\n      .fit(xTrain, yTrain, {\n        batchSize: this.state.iterations,\n        epochs: this.state.epochs,\n        callbacks: {\n          onBatchEnd: async (batch, logs) => {\n            trainBatchCount++;\n            // console.table(logs);\n            // const training = (trainBatchCount / totalNumBatches * 100).toFixed(1);\n            this.addConsoleValue(`Batch =${trainBatchCount} Loss=${logs.loss}  Acc=${logs.acc}`);\n            if (trainBatchCount === batchSize) {\n                console.table(logs);\n              this.addConsoleValue(`On batch end, Batch=${batch}, Log loss=${logs.loss}  acc=${logs.acc}`);\n              trainBatchCount = 0;\n            }\n          },\n          onEpochEnd: async (epoch, logs)=>{\n            valAcc = logs.val_acc;\n            \n            this.addConsoleValue(`Epoch =${epoch} Loss=${logs.val_loss}  Acc=${logs.val_acc}`);\n            // if (onIteration) {\n            //   // this.addConsoleValue(`On epoch end, ${epoch}, ${logs}`);\n            // }\n          }\n        }\n      })\n      .then(info => {\n        // console.log('Final accuracy', info.history.acc);\n        // this.addConsoleValue(info.history);\n      });\n    // console.log(`Iteration ${i}: ${res.history.loss}`);\n    // }\n\n    // console.log('finisheeeed,predicting');\n    // model.predict(xTest,yTest).print();\n    // await model.save('downloads://my-model');\n\n    // const json = fetch('./trained_alex.json');\n    // // const model2 = await tf.loadLayersModel('file:trained_alex.json');\n    // console.log('model2',json);\n  };\n\n  render() {\n    return e(\n      \"div\",\n      {\n        className: \"container\",\n        style: {\n          position: \"relative\",\n          top: 100\n        }\n      },\n      e(\n        \"div\",\n        { className: \"row\" },\n        e(\n          \"div\",\n          { className: \"col-md-6\" },\n          e(\"p\", null, \"Console\"),\n          <Console console={this.state.console} />,\n          <Button label=\"Add\" onClick={this.train} />,\n          <Button label=\"Clear\" onClick={this.clearConsole} />\n        ),\n        e(\n          \"div\",\n          { className: \"col-md-6\" },\n          e(\"p\", {}, \"Train\"),\n          e(\"p\", null, \"Default Breast Cancer Dataset\"),\n          e(\n            \"div\",\n            { className: \"row\" },\n            e(\n              \"div\",\n              { className: \"col-md-6\" },\n              e(\"p\", {}, \"Epochs\"),\n              <Input\n                placeholder=\"Enter here number of epochs\"\n                value={this.state.epochs}\n                updateValue={this.updateEpochs}\n              />\n            ),\n            e(\n              \"div\",\n              { className: \"col-md-6\" },\n              e(\"p\", {}, \"Iterations\"),\n              <Input\n                placeholder=\"Enter here number of iterations\"\n                value={this.state.iterations}\n                updateValue={this.updateIterations}\n              />\n            ),\n            e(\n              \"div\",\n              { className: \"col-md-6\" },\n              <RadioButton\n                label=\"Default dataset train\"\n                value=\"default\"\n                onModeSelection={this.trainingModeAction}\n              />\n            ),\n            e(\n              \"div\",\n              { className: \"col-md-6\" },\n              <RadioButton\n                label=\"Custom dataset train\"\n                value=\"custom\"\n                onModeSelection={this.trainingModeAction}\n              />\n            )\n          ),\n          this.renderMode(this.state.mode)\n        )\n      )\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}