{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar IORouterRegistry =\n/** @class */\nfunction () {\n  function IORouterRegistry() {\n    this.saveRouters = [];\n    this.loadRouters = [];\n  }\n\n  IORouterRegistry.getInstance = function () {\n    if (IORouterRegistry.instance == null) {\n      IORouterRegistry.instance = new IORouterRegistry();\n    }\n\n    return IORouterRegistry.instance;\n  };\n  /**\n   * Register a save-handler router.\n   *\n   * @param saveRouter A function that maps a URL-like string onto an instance\n   * of `IOHandler` with the `save` method defined or `null`.\n   */\n\n\n  IORouterRegistry.registerSaveRouter = function (saveRouter) {\n    IORouterRegistry.getInstance().saveRouters.push(saveRouter);\n  };\n  /**\n   * Register a load-handler router.\n   *\n   * @param loadRouter A function that maps a URL-like string onto an instance\n   * of `IOHandler` with the `load` method defined or `null`.\n   */\n\n\n  IORouterRegistry.registerLoadRouter = function (loadRouter) {\n    IORouterRegistry.getInstance().loadRouters.push(loadRouter);\n  };\n  /**\n   * Look up IOHandler for saving, given a URL-like string.\n   *\n   * @param url\n   * @returns If only one match is found, an instance of IOHandler with the\n   * `save` method defined. If no match is found, `null`.\n   * @throws Error, if more than one match is found.\n   */\n\n\n  IORouterRegistry.getSaveHandlers = function (url) {\n    return IORouterRegistry.getHandlers(url, 'save');\n  };\n  /**\n   * Look up IOHandler for loading, given a URL-like string.\n   *\n   * @param url\n   * @param onProgress Optional, progress callback function, fired periodically\n   *   before the load is completed.\n   * @returns All valid handlers for `url`, given the currently registered\n   *   handler routers.\n   */\n\n\n  IORouterRegistry.getLoadHandlers = function (url, onProgress) {\n    return IORouterRegistry.getHandlers(url, 'load', onProgress);\n  };\n\n  IORouterRegistry.getHandlers = function (url, handlerType, onProgress) {\n    var validHandlers = [];\n    var routers = handlerType === 'load' ? IORouterRegistry.getInstance().loadRouters : IORouterRegistry.getInstance().saveRouters;\n    routers.forEach(function (router) {\n      var handler = router(url, onProgress);\n\n      if (handler !== null) {\n        validHandlers.push(handler);\n      }\n    });\n    return validHandlers;\n  };\n\n  return IORouterRegistry;\n}();\n\nexports.IORouterRegistry = IORouterRegistry;\n\nexports.registerSaveRouter = function (loudRouter) {\n  return IORouterRegistry.registerSaveRouter(loudRouter);\n};\n\nexports.registerLoadRouter = function (loudRouter) {\n  return IORouterRegistry.registerLoadRouter(loudRouter);\n};\n\nexports.getSaveHandlers = function (url) {\n  return IORouterRegistry.getSaveHandlers(url);\n};\n\nexports.getLoadHandlers = function (url, onProgress) {\n  return IORouterRegistry.getLoadHandlers(url, onProgress);\n};","map":null,"metadata":{},"sourceType":"script"}